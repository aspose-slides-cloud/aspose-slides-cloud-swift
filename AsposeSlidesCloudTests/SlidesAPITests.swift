/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2020 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


import XCTest
@testable import AsposeSlidesCloud

class SlidesAPITests : XCTestCase {
    static var allTests : [(String, (SlidesAPITests) -> () -> ())] = [
        ("testAlignShapes", testAlignShapes),
        ("testAlignShapesInvalidName", testAlignShapesInvalidName),
        ("testAlignShapesInvalidSlideIndex", testAlignShapesInvalidSlideIndex),
        ("testAlignShapesInvalidAlignmentType", testAlignShapesInvalidAlignmentType),
        ("testAlignShapesInvalidAlignToSlide", testAlignShapesInvalidAlignToSlide),
        ("testAlignShapesInvalidShapes", testAlignShapesInvalidShapes),
        ("testAlignShapesInvalidPassword", testAlignShapesInvalidPassword),
        ("testAlignShapesInvalidFolder", testAlignShapesInvalidFolder),
        ("testAlignShapesInvalidStorage", testAlignShapesInvalidStorage),
        ("testConvert", testConvert),
        ("testConvertInvalidDocument", testConvertInvalidDocument),
        ("testConvertInvalidFormat", testConvertInvalidFormat),
        ("testConvertInvalidPassword", testConvertInvalidPassword),
        ("testConvertInvalidStorage", testConvertInvalidStorage),
        ("testConvertInvalidFontsFolder", testConvertInvalidFontsFolder),
        ("testConvertAndSave", testConvertAndSave),
        ("testConvertAndSaveInvalidDocument", testConvertAndSaveInvalidDocument),
        ("testConvertAndSaveInvalidFormat", testConvertAndSaveInvalidFormat),
        ("testConvertAndSaveInvalidOutPath", testConvertAndSaveInvalidOutPath),
        ("testConvertAndSaveInvalidPassword", testConvertAndSaveInvalidPassword),
        ("testConvertAndSaveInvalidStorage", testConvertAndSaveInvalidStorage),
        ("testConvertAndSaveInvalidFontsFolder", testConvertAndSaveInvalidFontsFolder),
        ("testCopyFile", testCopyFile),
        ("testCopyFileInvalidSrcPath", testCopyFileInvalidSrcPath),
        ("testCopyFileInvalidDestPath", testCopyFileInvalidDestPath),
        ("testCopyFileInvalidSrcStorageName", testCopyFileInvalidSrcStorageName),
        ("testCopyFileInvalidDestStorageName", testCopyFileInvalidDestStorageName),
        ("testCopyFileInvalidVersionId", testCopyFileInvalidVersionId),
        ("testCopyFolder", testCopyFolder),
        ("testCopyFolderInvalidSrcPath", testCopyFolderInvalidSrcPath),
        ("testCopyFolderInvalidDestPath", testCopyFolderInvalidDestPath),
        ("testCopyFolderInvalidSrcStorageName", testCopyFolderInvalidSrcStorageName),
        ("testCopyFolderInvalidDestStorageName", testCopyFolderInvalidDestStorageName),
        ("testCopyLayoutSlide", testCopyLayoutSlide),
        ("testCopyLayoutSlideInvalidName", testCopyLayoutSlideInvalidName),
        ("testCopyLayoutSlideInvalidCloneFrom", testCopyLayoutSlideInvalidCloneFrom),
        ("testCopyLayoutSlideInvalidCloneFromPosition", testCopyLayoutSlideInvalidCloneFromPosition),
        ("testCopyLayoutSlideInvalidCloneFromPassword", testCopyLayoutSlideInvalidCloneFromPassword),
        ("testCopyLayoutSlideInvalidCloneFromStorage", testCopyLayoutSlideInvalidCloneFromStorage),
        ("testCopyLayoutSlideInvalidPassword", testCopyLayoutSlideInvalidPassword),
        ("testCopyLayoutSlideInvalidFolder", testCopyLayoutSlideInvalidFolder),
        ("testCopyLayoutSlideInvalidStorage", testCopyLayoutSlideInvalidStorage),
        ("testCopyMasterSlide", testCopyMasterSlide),
        ("testCopyMasterSlideInvalidName", testCopyMasterSlideInvalidName),
        ("testCopyMasterSlideInvalidCloneFrom", testCopyMasterSlideInvalidCloneFrom),
        ("testCopyMasterSlideInvalidCloneFromPosition", testCopyMasterSlideInvalidCloneFromPosition),
        ("testCopyMasterSlideInvalidCloneFromPassword", testCopyMasterSlideInvalidCloneFromPassword),
        ("testCopyMasterSlideInvalidCloneFromStorage", testCopyMasterSlideInvalidCloneFromStorage),
        ("testCopyMasterSlideInvalidApplyToAll", testCopyMasterSlideInvalidApplyToAll),
        ("testCopyMasterSlideInvalidPassword", testCopyMasterSlideInvalidPassword),
        ("testCopyMasterSlideInvalidFolder", testCopyMasterSlideInvalidFolder),
        ("testCopyMasterSlideInvalidStorage", testCopyMasterSlideInvalidStorage),
        ("testCopySlide", testCopySlide),
        ("testCopySlideInvalidName", testCopySlideInvalidName),
        ("testCopySlideInvalidSlideToCopy", testCopySlideInvalidSlideToCopy),
        ("testCopySlideInvalidPosition", testCopySlideInvalidPosition),
        ("testCopySlideInvalidSource", testCopySlideInvalidSource),
        ("testCopySlideInvalidSourcePassword", testCopySlideInvalidSourcePassword),
        ("testCopySlideInvalidSourceStorage", testCopySlideInvalidSourceStorage),
        ("testCopySlideInvalidPassword", testCopySlideInvalidPassword),
        ("testCopySlideInvalidFolder", testCopySlideInvalidFolder),
        ("testCopySlideInvalidStorage", testCopySlideInvalidStorage),
        ("testCreateAnimationEffect", testCreateAnimationEffect),
        ("testCreateAnimationEffectInvalidName", testCreateAnimationEffectInvalidName),
        ("testCreateAnimationEffectInvalidSlideIndex", testCreateAnimationEffectInvalidSlideIndex),
        ("testCreateAnimationEffectInvalidEffect", testCreateAnimationEffectInvalidEffect),
        ("testCreateAnimationEffectInvalidPassword", testCreateAnimationEffectInvalidPassword),
        ("testCreateAnimationEffectInvalidFolder", testCreateAnimationEffectInvalidFolder),
        ("testCreateAnimationEffectInvalidStorage", testCreateAnimationEffectInvalidStorage),
        ("testCreateAnimationInteractiveSequence", testCreateAnimationInteractiveSequence),
        ("testCreateAnimationInteractiveSequenceInvalidName", testCreateAnimationInteractiveSequenceInvalidName),
        ("testCreateAnimationInteractiveSequenceInvalidSlideIndex", testCreateAnimationInteractiveSequenceInvalidSlideIndex),
        ("testCreateAnimationInteractiveSequenceInvalidSequence", testCreateAnimationInteractiveSequenceInvalidSequence),
        ("testCreateAnimationInteractiveSequenceInvalidPassword", testCreateAnimationInteractiveSequenceInvalidPassword),
        ("testCreateAnimationInteractiveSequenceInvalidFolder", testCreateAnimationInteractiveSequenceInvalidFolder),
        ("testCreateAnimationInteractiveSequenceInvalidStorage", testCreateAnimationInteractiveSequenceInvalidStorage),
        ("testCreateAnimationInteractiveSequenceEffect", testCreateAnimationInteractiveSequenceEffect),
        ("testCreateAnimationInteractiveSequenceEffectInvalidName", testCreateAnimationInteractiveSequenceEffectInvalidName),
        ("testCreateAnimationInteractiveSequenceEffectInvalidSlideIndex", testCreateAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testCreateAnimationInteractiveSequenceEffectInvalidSequenceIndex", testCreateAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testCreateAnimationInteractiveSequenceEffectInvalidEffect", testCreateAnimationInteractiveSequenceEffectInvalidEffect),
        ("testCreateAnimationInteractiveSequenceEffectInvalidPassword", testCreateAnimationInteractiveSequenceEffectInvalidPassword),
        ("testCreateAnimationInteractiveSequenceEffectInvalidFolder", testCreateAnimationInteractiveSequenceEffectInvalidFolder),
        ("testCreateAnimationInteractiveSequenceEffectInvalidStorage", testCreateAnimationInteractiveSequenceEffectInvalidStorage),
        ("testCreateChartCategory", testCreateChartCategory),
        ("testCreateChartCategoryInvalidName", testCreateChartCategoryInvalidName),
        ("testCreateChartCategoryInvalidSlideIndex", testCreateChartCategoryInvalidSlideIndex),
        ("testCreateChartCategoryInvalidShapeIndex", testCreateChartCategoryInvalidShapeIndex),
        ("testCreateChartCategoryInvalidCategory", testCreateChartCategoryInvalidCategory),
        ("testCreateChartCategoryInvalidPassword", testCreateChartCategoryInvalidPassword),
        ("testCreateChartCategoryInvalidFolder", testCreateChartCategoryInvalidFolder),
        ("testCreateChartCategoryInvalidStorage", testCreateChartCategoryInvalidStorage),
        ("testCreateChartDataPoint", testCreateChartDataPoint),
        ("testCreateChartDataPointInvalidName", testCreateChartDataPointInvalidName),
        ("testCreateChartDataPointInvalidSlideIndex", testCreateChartDataPointInvalidSlideIndex),
        ("testCreateChartDataPointInvalidShapeIndex", testCreateChartDataPointInvalidShapeIndex),
        ("testCreateChartDataPointInvalidSeriesIndex", testCreateChartDataPointInvalidSeriesIndex),
        ("testCreateChartDataPointInvalidDataPoint", testCreateChartDataPointInvalidDataPoint),
        ("testCreateChartDataPointInvalidPassword", testCreateChartDataPointInvalidPassword),
        ("testCreateChartDataPointInvalidFolder", testCreateChartDataPointInvalidFolder),
        ("testCreateChartDataPointInvalidStorage", testCreateChartDataPointInvalidStorage),
        ("testCreateChartSeries", testCreateChartSeries),
        ("testCreateChartSeriesInvalidName", testCreateChartSeriesInvalidName),
        ("testCreateChartSeriesInvalidSlideIndex", testCreateChartSeriesInvalidSlideIndex),
        ("testCreateChartSeriesInvalidShapeIndex", testCreateChartSeriesInvalidShapeIndex),
        ("testCreateChartSeriesInvalidSeries", testCreateChartSeriesInvalidSeries),
        ("testCreateChartSeriesInvalidPassword", testCreateChartSeriesInvalidPassword),
        ("testCreateChartSeriesInvalidFolder", testCreateChartSeriesInvalidFolder),
        ("testCreateChartSeriesInvalidStorage", testCreateChartSeriesInvalidStorage),
        ("testCreateComment", testCreateComment),
        ("testCreateCommentInvalidName", testCreateCommentInvalidName),
        ("testCreateCommentInvalidSlideIndex", testCreateCommentInvalidSlideIndex),
        ("testCreateCommentInvalidDto", testCreateCommentInvalidDto),
        ("testCreateCommentInvalidPassword", testCreateCommentInvalidPassword),
        ("testCreateCommentInvalidFolder", testCreateCommentInvalidFolder),
        ("testCreateCommentInvalidStorage", testCreateCommentInvalidStorage),
        ("testCreateCommentOnline", testCreateCommentOnline),
        ("testCreateCommentOnlineInvalidDocument", testCreateCommentOnlineInvalidDocument),
        ("testCreateCommentOnlineInvalidSlideIndex", testCreateCommentOnlineInvalidSlideIndex),
        ("testCreateCommentOnlineInvalidDto", testCreateCommentOnlineInvalidDto),
        ("testCreateCommentOnlineInvalidPassword", testCreateCommentOnlineInvalidPassword),
        ("testCreateFolder", testCreateFolder),
        ("testCreateFolderInvalidPath", testCreateFolderInvalidPath),
        ("testCreateFolderInvalidStorageName", testCreateFolderInvalidStorageName),
        ("testCreateImageWatermark", testCreateImageWatermark),
        ("testCreateImageWatermarkInvalidName", testCreateImageWatermarkInvalidName),
        ("testCreateImageWatermarkInvalidImage", testCreateImageWatermarkInvalidImage),
        ("testCreateImageWatermarkInvalidPictureFrame", testCreateImageWatermarkInvalidPictureFrame),
        ("testCreateImageWatermarkInvalidPassword", testCreateImageWatermarkInvalidPassword),
        ("testCreateImageWatermarkInvalidFolder", testCreateImageWatermarkInvalidFolder),
        ("testCreateImageWatermarkInvalidStorage", testCreateImageWatermarkInvalidStorage),
        ("testCreateImageWatermarkOnline", testCreateImageWatermarkOnline),
        ("testCreateImageWatermarkOnlineInvalidDocument", testCreateImageWatermarkOnlineInvalidDocument),
        ("testCreateImageWatermarkOnlineInvalidImage", testCreateImageWatermarkOnlineInvalidImage),
        ("testCreateImageWatermarkOnlineInvalidPictureFrame", testCreateImageWatermarkOnlineInvalidPictureFrame),
        ("testCreateImageWatermarkOnlineInvalidPassword", testCreateImageWatermarkOnlineInvalidPassword),
        ("testCreateNotesSlide", testCreateNotesSlide),
        ("testCreateNotesSlideInvalidName", testCreateNotesSlideInvalidName),
        ("testCreateNotesSlideInvalidSlideIndex", testCreateNotesSlideInvalidSlideIndex),
        ("testCreateNotesSlideInvalidDto", testCreateNotesSlideInvalidDto),
        ("testCreateNotesSlideInvalidPassword", testCreateNotesSlideInvalidPassword),
        ("testCreateNotesSlideInvalidFolder", testCreateNotesSlideInvalidFolder),
        ("testCreateNotesSlideInvalidStorage", testCreateNotesSlideInvalidStorage),
        ("testCreateNotesSlideParagraph", testCreateNotesSlideParagraph),
        ("testCreateNotesSlideParagraphInvalidName", testCreateNotesSlideParagraphInvalidName),
        ("testCreateNotesSlideParagraphInvalidSlideIndex", testCreateNotesSlideParagraphInvalidSlideIndex),
        ("testCreateNotesSlideParagraphInvalidShapeIndex", testCreateNotesSlideParagraphInvalidShapeIndex),
        ("testCreateNotesSlideParagraphInvalidDto", testCreateNotesSlideParagraphInvalidDto),
        ("testCreateNotesSlideParagraphInvalidPosition", testCreateNotesSlideParagraphInvalidPosition),
        ("testCreateNotesSlideParagraphInvalidPassword", testCreateNotesSlideParagraphInvalidPassword),
        ("testCreateNotesSlideParagraphInvalidFolder", testCreateNotesSlideParagraphInvalidFolder),
        ("testCreateNotesSlideParagraphInvalidStorage", testCreateNotesSlideParagraphInvalidStorage),
        ("testCreateNotesSlidePortion", testCreateNotesSlidePortion),
        ("testCreateNotesSlidePortionInvalidName", testCreateNotesSlidePortionInvalidName),
        ("testCreateNotesSlidePortionInvalidSlideIndex", testCreateNotesSlidePortionInvalidSlideIndex),
        ("testCreateNotesSlidePortionInvalidShapeIndex", testCreateNotesSlidePortionInvalidShapeIndex),
        ("testCreateNotesSlidePortionInvalidParagraphIndex", testCreateNotesSlidePortionInvalidParagraphIndex),
        ("testCreateNotesSlidePortionInvalidDto", testCreateNotesSlidePortionInvalidDto),
        ("testCreateNotesSlidePortionInvalidPosition", testCreateNotesSlidePortionInvalidPosition),
        ("testCreateNotesSlidePortionInvalidPassword", testCreateNotesSlidePortionInvalidPassword),
        ("testCreateNotesSlidePortionInvalidFolder", testCreateNotesSlidePortionInvalidFolder),
        ("testCreateNotesSlidePortionInvalidStorage", testCreateNotesSlidePortionInvalidStorage),
        ("testCreateNotesSlideShape", testCreateNotesSlideShape),
        ("testCreateNotesSlideShapeInvalidName", testCreateNotesSlideShapeInvalidName),
        ("testCreateNotesSlideShapeInvalidSlideIndex", testCreateNotesSlideShapeInvalidSlideIndex),
        ("testCreateNotesSlideShapeInvalidDto", testCreateNotesSlideShapeInvalidDto),
        ("testCreateNotesSlideShapeInvalidShapeToClone", testCreateNotesSlideShapeInvalidShapeToClone),
        ("testCreateNotesSlideShapeInvalidPosition", testCreateNotesSlideShapeInvalidPosition),
        ("testCreateNotesSlideShapeInvalidPassword", testCreateNotesSlideShapeInvalidPassword),
        ("testCreateNotesSlideShapeInvalidFolder", testCreateNotesSlideShapeInvalidFolder),
        ("testCreateNotesSlideShapeInvalidStorage", testCreateNotesSlideShapeInvalidStorage),
        ("testCreateParagraph", testCreateParagraph),
        ("testCreateParagraphInvalidName", testCreateParagraphInvalidName),
        ("testCreateParagraphInvalidSlideIndex", testCreateParagraphInvalidSlideIndex),
        ("testCreateParagraphInvalidShapeIndex", testCreateParagraphInvalidShapeIndex),
        ("testCreateParagraphInvalidDto", testCreateParagraphInvalidDto),
        ("testCreateParagraphInvalidPosition", testCreateParagraphInvalidPosition),
        ("testCreateParagraphInvalidPassword", testCreateParagraphInvalidPassword),
        ("testCreateParagraphInvalidFolder", testCreateParagraphInvalidFolder),
        ("testCreateParagraphInvalidStorage", testCreateParagraphInvalidStorage),
        ("testCreatePortion", testCreatePortion),
        ("testCreatePortionInvalidName", testCreatePortionInvalidName),
        ("testCreatePortionInvalidSlideIndex", testCreatePortionInvalidSlideIndex),
        ("testCreatePortionInvalidShapeIndex", testCreatePortionInvalidShapeIndex),
        ("testCreatePortionInvalidParagraphIndex", testCreatePortionInvalidParagraphIndex),
        ("testCreatePortionInvalidDto", testCreatePortionInvalidDto),
        ("testCreatePortionInvalidPosition", testCreatePortionInvalidPosition),
        ("testCreatePortionInvalidPassword", testCreatePortionInvalidPassword),
        ("testCreatePortionInvalidFolder", testCreatePortionInvalidFolder),
        ("testCreatePortionInvalidStorage", testCreatePortionInvalidStorage),
        ("testCreatePresentation", testCreatePresentation),
        ("testCreatePresentationInvalidName", testCreatePresentationInvalidName),
        ("testCreatePresentationInvalidData", testCreatePresentationInvalidData),
        ("testCreatePresentationInvalidInputPassword", testCreatePresentationInvalidInputPassword),
        ("testCreatePresentationInvalidPassword", testCreatePresentationInvalidPassword),
        ("testCreatePresentationInvalidFolder", testCreatePresentationInvalidFolder),
        ("testCreatePresentationInvalidStorage", testCreatePresentationInvalidStorage),
        ("testCreatePresentationFromSource", testCreatePresentationFromSource),
        ("testCreatePresentationFromSourceInvalidName", testCreatePresentationFromSourceInvalidName),
        ("testCreatePresentationFromSourceInvalidSourcePath", testCreatePresentationFromSourceInvalidSourcePath),
        ("testCreatePresentationFromSourceInvalidSourcePassword", testCreatePresentationFromSourceInvalidSourcePassword),
        ("testCreatePresentationFromSourceInvalidSourceStorage", testCreatePresentationFromSourceInvalidSourceStorage),
        ("testCreatePresentationFromSourceInvalidPassword", testCreatePresentationFromSourceInvalidPassword),
        ("testCreatePresentationFromSourceInvalidFolder", testCreatePresentationFromSourceInvalidFolder),
        ("testCreatePresentationFromSourceInvalidStorage", testCreatePresentationFromSourceInvalidStorage),
        ("testCreatePresentationFromTemplate", testCreatePresentationFromTemplate),
        ("testCreatePresentationFromTemplateInvalidName", testCreatePresentationFromTemplateInvalidName),
        ("testCreatePresentationFromTemplateInvalidTemplatePath", testCreatePresentationFromTemplateInvalidTemplatePath),
        ("testCreatePresentationFromTemplateInvalidData", testCreatePresentationFromTemplateInvalidData),
        ("testCreatePresentationFromTemplateInvalidTemplatePassword", testCreatePresentationFromTemplateInvalidTemplatePassword),
        ("testCreatePresentationFromTemplateInvalidTemplateStorage", testCreatePresentationFromTemplateInvalidTemplateStorage),
        ("testCreatePresentationFromTemplateInvalidIsImageDataEmbedded", testCreatePresentationFromTemplateInvalidIsImageDataEmbedded),
        ("testCreatePresentationFromTemplateInvalidPassword", testCreatePresentationFromTemplateInvalidPassword),
        ("testCreatePresentationFromTemplateInvalidFolder", testCreatePresentationFromTemplateInvalidFolder),
        ("testCreatePresentationFromTemplateInvalidStorage", testCreatePresentationFromTemplateInvalidStorage),
        ("testCreateSection", testCreateSection),
        ("testCreateSectionInvalidName", testCreateSectionInvalidName),
        ("testCreateSectionInvalidSectionName", testCreateSectionInvalidSectionName),
        ("testCreateSectionInvalidSlideIndex", testCreateSectionInvalidSlideIndex),
        ("testCreateSectionInvalidPassword", testCreateSectionInvalidPassword),
        ("testCreateSectionInvalidFolder", testCreateSectionInvalidFolder),
        ("testCreateSectionInvalidStorage", testCreateSectionInvalidStorage),
        ("testCreateShape", testCreateShape),
        ("testCreateShapeInvalidName", testCreateShapeInvalidName),
        ("testCreateShapeInvalidSlideIndex", testCreateShapeInvalidSlideIndex),
        ("testCreateShapeInvalidDto", testCreateShapeInvalidDto),
        ("testCreateShapeInvalidShapeToClone", testCreateShapeInvalidShapeToClone),
        ("testCreateShapeInvalidPosition", testCreateShapeInvalidPosition),
        ("testCreateShapeInvalidPassword", testCreateShapeInvalidPassword),
        ("testCreateShapeInvalidFolder", testCreateShapeInvalidFolder),
        ("testCreateShapeInvalidStorage", testCreateShapeInvalidStorage),
        ("testCreateSlide", testCreateSlide),
        ("testCreateSlideInvalidName", testCreateSlideInvalidName),
        ("testCreateSlideInvalidLayoutAlias", testCreateSlideInvalidLayoutAlias),
        ("testCreateSlideInvalidPosition", testCreateSlideInvalidPosition),
        ("testCreateSlideInvalidPassword", testCreateSlideInvalidPassword),
        ("testCreateSlideInvalidFolder", testCreateSlideInvalidFolder),
        ("testCreateSlideInvalidStorage", testCreateSlideInvalidStorage),
        ("testCreateSubshape", testCreateSubshape),
        ("testCreateSubshapeInvalidName", testCreateSubshapeInvalidName),
        ("testCreateSubshapeInvalidSlideIndex", testCreateSubshapeInvalidSlideIndex),
        ("testCreateSubshapeInvalidPath", testCreateSubshapeInvalidPath),
        ("testCreateSubshapeInvalidDto", testCreateSubshapeInvalidDto),
        ("testCreateSubshapeInvalidShapeToClone", testCreateSubshapeInvalidShapeToClone),
        ("testCreateSubshapeInvalidPosition", testCreateSubshapeInvalidPosition),
        ("testCreateSubshapeInvalidPassword", testCreateSubshapeInvalidPassword),
        ("testCreateSubshapeInvalidFolder", testCreateSubshapeInvalidFolder),
        ("testCreateSubshapeInvalidStorage", testCreateSubshapeInvalidStorage),
        ("testCreateSubshapeParagraph", testCreateSubshapeParagraph),
        ("testCreateSubshapeParagraphInvalidName", testCreateSubshapeParagraphInvalidName),
        ("testCreateSubshapeParagraphInvalidSlideIndex", testCreateSubshapeParagraphInvalidSlideIndex),
        ("testCreateSubshapeParagraphInvalidPath", testCreateSubshapeParagraphInvalidPath),
        ("testCreateSubshapeParagraphInvalidShapeIndex", testCreateSubshapeParagraphInvalidShapeIndex),
        ("testCreateSubshapeParagraphInvalidDto", testCreateSubshapeParagraphInvalidDto),
        ("testCreateSubshapeParagraphInvalidPosition", testCreateSubshapeParagraphInvalidPosition),
        ("testCreateSubshapeParagraphInvalidPassword", testCreateSubshapeParagraphInvalidPassword),
        ("testCreateSubshapeParagraphInvalidFolder", testCreateSubshapeParagraphInvalidFolder),
        ("testCreateSubshapeParagraphInvalidStorage", testCreateSubshapeParagraphInvalidStorage),
        ("testCreateSubshapePortion", testCreateSubshapePortion),
        ("testCreateSubshapePortionInvalidName", testCreateSubshapePortionInvalidName),
        ("testCreateSubshapePortionInvalidSlideIndex", testCreateSubshapePortionInvalidSlideIndex),
        ("testCreateSubshapePortionInvalidPath", testCreateSubshapePortionInvalidPath),
        ("testCreateSubshapePortionInvalidShapeIndex", testCreateSubshapePortionInvalidShapeIndex),
        ("testCreateSubshapePortionInvalidParagraphIndex", testCreateSubshapePortionInvalidParagraphIndex),
        ("testCreateSubshapePortionInvalidDto", testCreateSubshapePortionInvalidDto),
        ("testCreateSubshapePortionInvalidPosition", testCreateSubshapePortionInvalidPosition),
        ("testCreateSubshapePortionInvalidPassword", testCreateSubshapePortionInvalidPassword),
        ("testCreateSubshapePortionInvalidFolder", testCreateSubshapePortionInvalidFolder),
        ("testCreateSubshapePortionInvalidStorage", testCreateSubshapePortionInvalidStorage),
        ("testCreateWatermark", testCreateWatermark),
        ("testCreateWatermarkInvalidName", testCreateWatermarkInvalidName),
        ("testCreateWatermarkInvalidShape", testCreateWatermarkInvalidShape),
        ("testCreateWatermarkInvalidFontHeight", testCreateWatermarkInvalidFontHeight),
        ("testCreateWatermarkInvalidText", testCreateWatermarkInvalidText),
        ("testCreateWatermarkInvalidFontName", testCreateWatermarkInvalidFontName),
        ("testCreateWatermarkInvalidFontColor", testCreateWatermarkInvalidFontColor),
        ("testCreateWatermarkInvalidPassword", testCreateWatermarkInvalidPassword),
        ("testCreateWatermarkInvalidFolder", testCreateWatermarkInvalidFolder),
        ("testCreateWatermarkInvalidStorage", testCreateWatermarkInvalidStorage),
        ("testCreateWatermarkOnline", testCreateWatermarkOnline),
        ("testCreateWatermarkOnlineInvalidDocument", testCreateWatermarkOnlineInvalidDocument),
        ("testCreateWatermarkOnlineInvalidShape", testCreateWatermarkOnlineInvalidShape),
        ("testCreateWatermarkOnlineInvalidFontHeight", testCreateWatermarkOnlineInvalidFontHeight),
        ("testCreateWatermarkOnlineInvalidText", testCreateWatermarkOnlineInvalidText),
        ("testCreateWatermarkOnlineInvalidFontName", testCreateWatermarkOnlineInvalidFontName),
        ("testCreateWatermarkOnlineInvalidFontColor", testCreateWatermarkOnlineInvalidFontColor),
        ("testCreateWatermarkOnlineInvalidPassword", testCreateWatermarkOnlineInvalidPassword),
        ("testDeleteAnimation", testDeleteAnimation),
        ("testDeleteAnimationInvalidName", testDeleteAnimationInvalidName),
        ("testDeleteAnimationInvalidSlideIndex", testDeleteAnimationInvalidSlideIndex),
        ("testDeleteAnimationInvalidPassword", testDeleteAnimationInvalidPassword),
        ("testDeleteAnimationInvalidFolder", testDeleteAnimationInvalidFolder),
        ("testDeleteAnimationInvalidStorage", testDeleteAnimationInvalidStorage),
        ("testDeleteAnimationEffect", testDeleteAnimationEffect),
        ("testDeleteAnimationEffectInvalidName", testDeleteAnimationEffectInvalidName),
        ("testDeleteAnimationEffectInvalidSlideIndex", testDeleteAnimationEffectInvalidSlideIndex),
        ("testDeleteAnimationEffectInvalidEffectIndex", testDeleteAnimationEffectInvalidEffectIndex),
        ("testDeleteAnimationEffectInvalidPassword", testDeleteAnimationEffectInvalidPassword),
        ("testDeleteAnimationEffectInvalidFolder", testDeleteAnimationEffectInvalidFolder),
        ("testDeleteAnimationEffectInvalidStorage", testDeleteAnimationEffectInvalidStorage),
        ("testDeleteAnimationInteractiveSequence", testDeleteAnimationInteractiveSequence),
        ("testDeleteAnimationInteractiveSequenceInvalidName", testDeleteAnimationInteractiveSequenceInvalidName),
        ("testDeleteAnimationInteractiveSequenceInvalidSlideIndex", testDeleteAnimationInteractiveSequenceInvalidSlideIndex),
        ("testDeleteAnimationInteractiveSequenceInvalidSequenceIndex", testDeleteAnimationInteractiveSequenceInvalidSequenceIndex),
        ("testDeleteAnimationInteractiveSequenceInvalidPassword", testDeleteAnimationInteractiveSequenceInvalidPassword),
        ("testDeleteAnimationInteractiveSequenceInvalidFolder", testDeleteAnimationInteractiveSequenceInvalidFolder),
        ("testDeleteAnimationInteractiveSequenceInvalidStorage", testDeleteAnimationInteractiveSequenceInvalidStorage),
        ("testDeleteAnimationInteractiveSequenceEffect", testDeleteAnimationInteractiveSequenceEffect),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidName", testDeleteAnimationInteractiveSequenceEffectInvalidName),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidSlideIndex", testDeleteAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidSequenceIndex", testDeleteAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidEffectIndex", testDeleteAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidPassword", testDeleteAnimationInteractiveSequenceEffectInvalidPassword),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidFolder", testDeleteAnimationInteractiveSequenceEffectInvalidFolder),
        ("testDeleteAnimationInteractiveSequenceEffectInvalidStorage", testDeleteAnimationInteractiveSequenceEffectInvalidStorage),
        ("testDeleteAnimationInteractiveSequences", testDeleteAnimationInteractiveSequences),
        ("testDeleteAnimationInteractiveSequencesInvalidName", testDeleteAnimationInteractiveSequencesInvalidName),
        ("testDeleteAnimationInteractiveSequencesInvalidSlideIndex", testDeleteAnimationInteractiveSequencesInvalidSlideIndex),
        ("testDeleteAnimationInteractiveSequencesInvalidPassword", testDeleteAnimationInteractiveSequencesInvalidPassword),
        ("testDeleteAnimationInteractiveSequencesInvalidFolder", testDeleteAnimationInteractiveSequencesInvalidFolder),
        ("testDeleteAnimationInteractiveSequencesInvalidStorage", testDeleteAnimationInteractiveSequencesInvalidStorage),
        ("testDeleteAnimationMainSequence", testDeleteAnimationMainSequence),
        ("testDeleteAnimationMainSequenceInvalidName", testDeleteAnimationMainSequenceInvalidName),
        ("testDeleteAnimationMainSequenceInvalidSlideIndex", testDeleteAnimationMainSequenceInvalidSlideIndex),
        ("testDeleteAnimationMainSequenceInvalidPassword", testDeleteAnimationMainSequenceInvalidPassword),
        ("testDeleteAnimationMainSequenceInvalidFolder", testDeleteAnimationMainSequenceInvalidFolder),
        ("testDeleteAnimationMainSequenceInvalidStorage", testDeleteAnimationMainSequenceInvalidStorage),
        ("testDeleteBackground", testDeleteBackground),
        ("testDeleteBackgroundInvalidName", testDeleteBackgroundInvalidName),
        ("testDeleteBackgroundInvalidSlideIndex", testDeleteBackgroundInvalidSlideIndex),
        ("testDeleteBackgroundInvalidPassword", testDeleteBackgroundInvalidPassword),
        ("testDeleteBackgroundInvalidFolder", testDeleteBackgroundInvalidFolder),
        ("testDeleteBackgroundInvalidStorage", testDeleteBackgroundInvalidStorage),
        ("testDeleteChartCategory", testDeleteChartCategory),
        ("testDeleteChartCategoryInvalidName", testDeleteChartCategoryInvalidName),
        ("testDeleteChartCategoryInvalidSlideIndex", testDeleteChartCategoryInvalidSlideIndex),
        ("testDeleteChartCategoryInvalidShapeIndex", testDeleteChartCategoryInvalidShapeIndex),
        ("testDeleteChartCategoryInvalidCategoryIndex", testDeleteChartCategoryInvalidCategoryIndex),
        ("testDeleteChartCategoryInvalidPassword", testDeleteChartCategoryInvalidPassword),
        ("testDeleteChartCategoryInvalidFolder", testDeleteChartCategoryInvalidFolder),
        ("testDeleteChartCategoryInvalidStorage", testDeleteChartCategoryInvalidStorage),
        ("testDeleteChartDataPoint", testDeleteChartDataPoint),
        ("testDeleteChartDataPointInvalidName", testDeleteChartDataPointInvalidName),
        ("testDeleteChartDataPointInvalidSlideIndex", testDeleteChartDataPointInvalidSlideIndex),
        ("testDeleteChartDataPointInvalidShapeIndex", testDeleteChartDataPointInvalidShapeIndex),
        ("testDeleteChartDataPointInvalidSeriesIndex", testDeleteChartDataPointInvalidSeriesIndex),
        ("testDeleteChartDataPointInvalidPointIndex", testDeleteChartDataPointInvalidPointIndex),
        ("testDeleteChartDataPointInvalidPassword", testDeleteChartDataPointInvalidPassword),
        ("testDeleteChartDataPointInvalidFolder", testDeleteChartDataPointInvalidFolder),
        ("testDeleteChartDataPointInvalidStorage", testDeleteChartDataPointInvalidStorage),
        ("testDeleteChartSeries", testDeleteChartSeries),
        ("testDeleteChartSeriesInvalidName", testDeleteChartSeriesInvalidName),
        ("testDeleteChartSeriesInvalidSlideIndex", testDeleteChartSeriesInvalidSlideIndex),
        ("testDeleteChartSeriesInvalidShapeIndex", testDeleteChartSeriesInvalidShapeIndex),
        ("testDeleteChartSeriesInvalidSeriesIndex", testDeleteChartSeriesInvalidSeriesIndex),
        ("testDeleteChartSeriesInvalidPassword", testDeleteChartSeriesInvalidPassword),
        ("testDeleteChartSeriesInvalidFolder", testDeleteChartSeriesInvalidFolder),
        ("testDeleteChartSeriesInvalidStorage", testDeleteChartSeriesInvalidStorage),
        ("testDeleteComments", testDeleteComments),
        ("testDeleteCommentsInvalidName", testDeleteCommentsInvalidName),
        ("testDeleteCommentsInvalidAuthor", testDeleteCommentsInvalidAuthor),
        ("testDeleteCommentsInvalidPassword", testDeleteCommentsInvalidPassword),
        ("testDeleteCommentsInvalidFolder", testDeleteCommentsInvalidFolder),
        ("testDeleteCommentsInvalidStorage", testDeleteCommentsInvalidStorage),
        ("testDeleteCommentsOnline", testDeleteCommentsOnline),
        ("testDeleteCommentsOnlineInvalidDocument", testDeleteCommentsOnlineInvalidDocument),
        ("testDeleteCommentsOnlineInvalidAuthor", testDeleteCommentsOnlineInvalidAuthor),
        ("testDeleteCommentsOnlineInvalidPassword", testDeleteCommentsOnlineInvalidPassword),
        ("testDeleteDocumentProperties", testDeleteDocumentProperties),
        ("testDeleteDocumentPropertiesInvalidName", testDeleteDocumentPropertiesInvalidName),
        ("testDeleteDocumentPropertiesInvalidPassword", testDeleteDocumentPropertiesInvalidPassword),
        ("testDeleteDocumentPropertiesInvalidFolder", testDeleteDocumentPropertiesInvalidFolder),
        ("testDeleteDocumentPropertiesInvalidStorage", testDeleteDocumentPropertiesInvalidStorage),
        ("testDeleteDocumentProperty", testDeleteDocumentProperty),
        ("testDeleteDocumentPropertyInvalidName", testDeleteDocumentPropertyInvalidName),
        ("testDeleteDocumentPropertyInvalidPropertyName", testDeleteDocumentPropertyInvalidPropertyName),
        ("testDeleteDocumentPropertyInvalidPassword", testDeleteDocumentPropertyInvalidPassword),
        ("testDeleteDocumentPropertyInvalidFolder", testDeleteDocumentPropertyInvalidFolder),
        ("testDeleteDocumentPropertyInvalidStorage", testDeleteDocumentPropertyInvalidStorage),
        ("testDeleteFile", testDeleteFile),
        ("testDeleteFileInvalidPath", testDeleteFileInvalidPath),
        ("testDeleteFileInvalidStorageName", testDeleteFileInvalidStorageName),
        ("testDeleteFileInvalidVersionId", testDeleteFileInvalidVersionId),
        ("testDeleteFolder", testDeleteFolder),
        ("testDeleteFolderInvalidPath", testDeleteFolderInvalidPath),
        ("testDeleteFolderInvalidStorageName", testDeleteFolderInvalidStorageName),
        ("testDeleteFolderInvalidRecursive", testDeleteFolderInvalidRecursive),
        ("testDeleteNotesSlide", testDeleteNotesSlide),
        ("testDeleteNotesSlideInvalidName", testDeleteNotesSlideInvalidName),
        ("testDeleteNotesSlideInvalidSlideIndex", testDeleteNotesSlideInvalidSlideIndex),
        ("testDeleteNotesSlideInvalidPassword", testDeleteNotesSlideInvalidPassword),
        ("testDeleteNotesSlideInvalidFolder", testDeleteNotesSlideInvalidFolder),
        ("testDeleteNotesSlideInvalidStorage", testDeleteNotesSlideInvalidStorage),
        ("testDeleteNotesSlideParagraph", testDeleteNotesSlideParagraph),
        ("testDeleteNotesSlideParagraphInvalidName", testDeleteNotesSlideParagraphInvalidName),
        ("testDeleteNotesSlideParagraphInvalidSlideIndex", testDeleteNotesSlideParagraphInvalidSlideIndex),
        ("testDeleteNotesSlideParagraphInvalidShapeIndex", testDeleteNotesSlideParagraphInvalidShapeIndex),
        ("testDeleteNotesSlideParagraphInvalidParagraphIndex", testDeleteNotesSlideParagraphInvalidParagraphIndex),
        ("testDeleteNotesSlideParagraphInvalidPassword", testDeleteNotesSlideParagraphInvalidPassword),
        ("testDeleteNotesSlideParagraphInvalidFolder", testDeleteNotesSlideParagraphInvalidFolder),
        ("testDeleteNotesSlideParagraphInvalidStorage", testDeleteNotesSlideParagraphInvalidStorage),
        ("testDeleteNotesSlideParagraphs", testDeleteNotesSlideParagraphs),
        ("testDeleteNotesSlideParagraphsInvalidName", testDeleteNotesSlideParagraphsInvalidName),
        ("testDeleteNotesSlideParagraphsInvalidSlideIndex", testDeleteNotesSlideParagraphsInvalidSlideIndex),
        ("testDeleteNotesSlideParagraphsInvalidShapeIndex", testDeleteNotesSlideParagraphsInvalidShapeIndex),
        ("testDeleteNotesSlideParagraphsInvalidParagraphs", testDeleteNotesSlideParagraphsInvalidParagraphs),
        ("testDeleteNotesSlideParagraphsInvalidPassword", testDeleteNotesSlideParagraphsInvalidPassword),
        ("testDeleteNotesSlideParagraphsInvalidFolder", testDeleteNotesSlideParagraphsInvalidFolder),
        ("testDeleteNotesSlideParagraphsInvalidStorage", testDeleteNotesSlideParagraphsInvalidStorage),
        ("testDeleteNotesSlidePortion", testDeleteNotesSlidePortion),
        ("testDeleteNotesSlidePortionInvalidName", testDeleteNotesSlidePortionInvalidName),
        ("testDeleteNotesSlidePortionInvalidSlideIndex", testDeleteNotesSlidePortionInvalidSlideIndex),
        ("testDeleteNotesSlidePortionInvalidShapeIndex", testDeleteNotesSlidePortionInvalidShapeIndex),
        ("testDeleteNotesSlidePortionInvalidParagraphIndex", testDeleteNotesSlidePortionInvalidParagraphIndex),
        ("testDeleteNotesSlidePortionInvalidPortionIndex", testDeleteNotesSlidePortionInvalidPortionIndex),
        ("testDeleteNotesSlidePortionInvalidPassword", testDeleteNotesSlidePortionInvalidPassword),
        ("testDeleteNotesSlidePortionInvalidFolder", testDeleteNotesSlidePortionInvalidFolder),
        ("testDeleteNotesSlidePortionInvalidStorage", testDeleteNotesSlidePortionInvalidStorage),
        ("testDeleteNotesSlidePortions", testDeleteNotesSlidePortions),
        ("testDeleteNotesSlidePortionsInvalidName", testDeleteNotesSlidePortionsInvalidName),
        ("testDeleteNotesSlidePortionsInvalidSlideIndex", testDeleteNotesSlidePortionsInvalidSlideIndex),
        ("testDeleteNotesSlidePortionsInvalidShapeIndex", testDeleteNotesSlidePortionsInvalidShapeIndex),
        ("testDeleteNotesSlidePortionsInvalidParagraphIndex", testDeleteNotesSlidePortionsInvalidParagraphIndex),
        ("testDeleteNotesSlidePortionsInvalidPortions", testDeleteNotesSlidePortionsInvalidPortions),
        ("testDeleteNotesSlidePortionsInvalidPassword", testDeleteNotesSlidePortionsInvalidPassword),
        ("testDeleteNotesSlidePortionsInvalidFolder", testDeleteNotesSlidePortionsInvalidFolder),
        ("testDeleteNotesSlidePortionsInvalidStorage", testDeleteNotesSlidePortionsInvalidStorage),
        ("testDeleteNotesSlideShape", testDeleteNotesSlideShape),
        ("testDeleteNotesSlideShapeInvalidName", testDeleteNotesSlideShapeInvalidName),
        ("testDeleteNotesSlideShapeInvalidSlideIndex", testDeleteNotesSlideShapeInvalidSlideIndex),
        ("testDeleteNotesSlideShapeInvalidShapeIndex", testDeleteNotesSlideShapeInvalidShapeIndex),
        ("testDeleteNotesSlideShapeInvalidPassword", testDeleteNotesSlideShapeInvalidPassword),
        ("testDeleteNotesSlideShapeInvalidFolder", testDeleteNotesSlideShapeInvalidFolder),
        ("testDeleteNotesSlideShapeInvalidStorage", testDeleteNotesSlideShapeInvalidStorage),
        ("testDeleteNotesSlideShapes", testDeleteNotesSlideShapes),
        ("testDeleteNotesSlideShapesInvalidName", testDeleteNotesSlideShapesInvalidName),
        ("testDeleteNotesSlideShapesInvalidSlideIndex", testDeleteNotesSlideShapesInvalidSlideIndex),
        ("testDeleteNotesSlideShapesInvalidShapes", testDeleteNotesSlideShapesInvalidShapes),
        ("testDeleteNotesSlideShapesInvalidPassword", testDeleteNotesSlideShapesInvalidPassword),
        ("testDeleteNotesSlideShapesInvalidFolder", testDeleteNotesSlideShapesInvalidFolder),
        ("testDeleteNotesSlideShapesInvalidStorage", testDeleteNotesSlideShapesInvalidStorage),
        ("testDeleteParagraph", testDeleteParagraph),
        ("testDeleteParagraphInvalidName", testDeleteParagraphInvalidName),
        ("testDeleteParagraphInvalidSlideIndex", testDeleteParagraphInvalidSlideIndex),
        ("testDeleteParagraphInvalidShapeIndex", testDeleteParagraphInvalidShapeIndex),
        ("testDeleteParagraphInvalidParagraphIndex", testDeleteParagraphInvalidParagraphIndex),
        ("testDeleteParagraphInvalidPassword", testDeleteParagraphInvalidPassword),
        ("testDeleteParagraphInvalidFolder", testDeleteParagraphInvalidFolder),
        ("testDeleteParagraphInvalidStorage", testDeleteParagraphInvalidStorage),
        ("testDeleteParagraphs", testDeleteParagraphs),
        ("testDeleteParagraphsInvalidName", testDeleteParagraphsInvalidName),
        ("testDeleteParagraphsInvalidSlideIndex", testDeleteParagraphsInvalidSlideIndex),
        ("testDeleteParagraphsInvalidShapeIndex", testDeleteParagraphsInvalidShapeIndex),
        ("testDeleteParagraphsInvalidParagraphs", testDeleteParagraphsInvalidParagraphs),
        ("testDeleteParagraphsInvalidPassword", testDeleteParagraphsInvalidPassword),
        ("testDeleteParagraphsInvalidFolder", testDeleteParagraphsInvalidFolder),
        ("testDeleteParagraphsInvalidStorage", testDeleteParagraphsInvalidStorage),
        ("testDeletePortion", testDeletePortion),
        ("testDeletePortionInvalidName", testDeletePortionInvalidName),
        ("testDeletePortionInvalidSlideIndex", testDeletePortionInvalidSlideIndex),
        ("testDeletePortionInvalidShapeIndex", testDeletePortionInvalidShapeIndex),
        ("testDeletePortionInvalidParagraphIndex", testDeletePortionInvalidParagraphIndex),
        ("testDeletePortionInvalidPortionIndex", testDeletePortionInvalidPortionIndex),
        ("testDeletePortionInvalidPassword", testDeletePortionInvalidPassword),
        ("testDeletePortionInvalidFolder", testDeletePortionInvalidFolder),
        ("testDeletePortionInvalidStorage", testDeletePortionInvalidStorage),
        ("testDeletePortions", testDeletePortions),
        ("testDeletePortionsInvalidName", testDeletePortionsInvalidName),
        ("testDeletePortionsInvalidSlideIndex", testDeletePortionsInvalidSlideIndex),
        ("testDeletePortionsInvalidShapeIndex", testDeletePortionsInvalidShapeIndex),
        ("testDeletePortionsInvalidParagraphIndex", testDeletePortionsInvalidParagraphIndex),
        ("testDeletePortionsInvalidPortions", testDeletePortionsInvalidPortions),
        ("testDeletePortionsInvalidPassword", testDeletePortionsInvalidPassword),
        ("testDeletePortionsInvalidFolder", testDeletePortionsInvalidFolder),
        ("testDeletePortionsInvalidStorage", testDeletePortionsInvalidStorage),
        ("testDeleteProtection", testDeleteProtection),
        ("testDeleteProtectionInvalidName", testDeleteProtectionInvalidName),
        ("testDeleteProtectionInvalidPassword", testDeleteProtectionInvalidPassword),
        ("testDeleteProtectionInvalidFolder", testDeleteProtectionInvalidFolder),
        ("testDeleteProtectionInvalidStorage", testDeleteProtectionInvalidStorage),
        ("testDeleteProtectionOnline", testDeleteProtectionOnline),
        ("testDeleteProtectionOnlineInvalidDocument", testDeleteProtectionOnlineInvalidDocument),
        ("testDeleteProtectionOnlineInvalidPassword", testDeleteProtectionOnlineInvalidPassword),
        ("testDeleteSection", testDeleteSection),
        ("testDeleteSectionInvalidName", testDeleteSectionInvalidName),
        ("testDeleteSectionInvalidSectionIndex", testDeleteSectionInvalidSectionIndex),
        ("testDeleteSectionInvalidWithSlides", testDeleteSectionInvalidWithSlides),
        ("testDeleteSectionInvalidPassword", testDeleteSectionInvalidPassword),
        ("testDeleteSectionInvalidFolder", testDeleteSectionInvalidFolder),
        ("testDeleteSectionInvalidStorage", testDeleteSectionInvalidStorage),
        ("testDeleteSections", testDeleteSections),
        ("testDeleteSectionsInvalidName", testDeleteSectionsInvalidName),
        ("testDeleteSectionsInvalidSections", testDeleteSectionsInvalidSections),
        ("testDeleteSectionsInvalidWithSlides", testDeleteSectionsInvalidWithSlides),
        ("testDeleteSectionsInvalidPassword", testDeleteSectionsInvalidPassword),
        ("testDeleteSectionsInvalidFolder", testDeleteSectionsInvalidFolder),
        ("testDeleteSectionsInvalidStorage", testDeleteSectionsInvalidStorage),
        ("testDeleteShape", testDeleteShape),
        ("testDeleteShapeInvalidName", testDeleteShapeInvalidName),
        ("testDeleteShapeInvalidSlideIndex", testDeleteShapeInvalidSlideIndex),
        ("testDeleteShapeInvalidShapeIndex", testDeleteShapeInvalidShapeIndex),
        ("testDeleteShapeInvalidPassword", testDeleteShapeInvalidPassword),
        ("testDeleteShapeInvalidFolder", testDeleteShapeInvalidFolder),
        ("testDeleteShapeInvalidStorage", testDeleteShapeInvalidStorage),
        ("testDeleteShapes", testDeleteShapes),
        ("testDeleteShapesInvalidName", testDeleteShapesInvalidName),
        ("testDeleteShapesInvalidSlideIndex", testDeleteShapesInvalidSlideIndex),
        ("testDeleteShapesInvalidShapes", testDeleteShapesInvalidShapes),
        ("testDeleteShapesInvalidPassword", testDeleteShapesInvalidPassword),
        ("testDeleteShapesInvalidFolder", testDeleteShapesInvalidFolder),
        ("testDeleteShapesInvalidStorage", testDeleteShapesInvalidStorage),
        ("testDeleteSlide", testDeleteSlide),
        ("testDeleteSlideInvalidName", testDeleteSlideInvalidName),
        ("testDeleteSlideInvalidSlideIndex", testDeleteSlideInvalidSlideIndex),
        ("testDeleteSlideInvalidPassword", testDeleteSlideInvalidPassword),
        ("testDeleteSlideInvalidFolder", testDeleteSlideInvalidFolder),
        ("testDeleteSlideInvalidStorage", testDeleteSlideInvalidStorage),
        ("testDeleteSlideComments", testDeleteSlideComments),
        ("testDeleteSlideCommentsInvalidName", testDeleteSlideCommentsInvalidName),
        ("testDeleteSlideCommentsInvalidSlideIndex", testDeleteSlideCommentsInvalidSlideIndex),
        ("testDeleteSlideCommentsInvalidAuthor", testDeleteSlideCommentsInvalidAuthor),
        ("testDeleteSlideCommentsInvalidPassword", testDeleteSlideCommentsInvalidPassword),
        ("testDeleteSlideCommentsInvalidFolder", testDeleteSlideCommentsInvalidFolder),
        ("testDeleteSlideCommentsInvalidStorage", testDeleteSlideCommentsInvalidStorage),
        ("testDeleteSlideCommentsOnline", testDeleteSlideCommentsOnline),
        ("testDeleteSlideCommentsOnlineInvalidDocument", testDeleteSlideCommentsOnlineInvalidDocument),
        ("testDeleteSlideCommentsOnlineInvalidSlideIndex", testDeleteSlideCommentsOnlineInvalidSlideIndex),
        ("testDeleteSlideCommentsOnlineInvalidAuthor", testDeleteSlideCommentsOnlineInvalidAuthor),
        ("testDeleteSlideCommentsOnlineInvalidPassword", testDeleteSlideCommentsOnlineInvalidPassword),
        ("testDeleteSlides", testDeleteSlides),
        ("testDeleteSlidesInvalidName", testDeleteSlidesInvalidName),
        ("testDeleteSlidesInvalidSlides", testDeleteSlidesInvalidSlides),
        ("testDeleteSlidesInvalidPassword", testDeleteSlidesInvalidPassword),
        ("testDeleteSlidesInvalidFolder", testDeleteSlidesInvalidFolder),
        ("testDeleteSlidesInvalidStorage", testDeleteSlidesInvalidStorage),
        ("testDeleteSubshape", testDeleteSubshape),
        ("testDeleteSubshapeInvalidName", testDeleteSubshapeInvalidName),
        ("testDeleteSubshapeInvalidSlideIndex", testDeleteSubshapeInvalidSlideIndex),
        ("testDeleteSubshapeInvalidPath", testDeleteSubshapeInvalidPath),
        ("testDeleteSubshapeInvalidShapeIndex", testDeleteSubshapeInvalidShapeIndex),
        ("testDeleteSubshapeInvalidPassword", testDeleteSubshapeInvalidPassword),
        ("testDeleteSubshapeInvalidFolder", testDeleteSubshapeInvalidFolder),
        ("testDeleteSubshapeInvalidStorage", testDeleteSubshapeInvalidStorage),
        ("testDeleteSubshapeParagraph", testDeleteSubshapeParagraph),
        ("testDeleteSubshapeParagraphInvalidName", testDeleteSubshapeParagraphInvalidName),
        ("testDeleteSubshapeParagraphInvalidSlideIndex", testDeleteSubshapeParagraphInvalidSlideIndex),
        ("testDeleteSubshapeParagraphInvalidPath", testDeleteSubshapeParagraphInvalidPath),
        ("testDeleteSubshapeParagraphInvalidShapeIndex", testDeleteSubshapeParagraphInvalidShapeIndex),
        ("testDeleteSubshapeParagraphInvalidParagraphIndex", testDeleteSubshapeParagraphInvalidParagraphIndex),
        ("testDeleteSubshapeParagraphInvalidPassword", testDeleteSubshapeParagraphInvalidPassword),
        ("testDeleteSubshapeParagraphInvalidFolder", testDeleteSubshapeParagraphInvalidFolder),
        ("testDeleteSubshapeParagraphInvalidStorage", testDeleteSubshapeParagraphInvalidStorage),
        ("testDeleteSubshapeParagraphs", testDeleteSubshapeParagraphs),
        ("testDeleteSubshapeParagraphsInvalidName", testDeleteSubshapeParagraphsInvalidName),
        ("testDeleteSubshapeParagraphsInvalidSlideIndex", testDeleteSubshapeParagraphsInvalidSlideIndex),
        ("testDeleteSubshapeParagraphsInvalidPath", testDeleteSubshapeParagraphsInvalidPath),
        ("testDeleteSubshapeParagraphsInvalidShapeIndex", testDeleteSubshapeParagraphsInvalidShapeIndex),
        ("testDeleteSubshapeParagraphsInvalidParagraphs", testDeleteSubshapeParagraphsInvalidParagraphs),
        ("testDeleteSubshapeParagraphsInvalidPassword", testDeleteSubshapeParagraphsInvalidPassword),
        ("testDeleteSubshapeParagraphsInvalidFolder", testDeleteSubshapeParagraphsInvalidFolder),
        ("testDeleteSubshapeParagraphsInvalidStorage", testDeleteSubshapeParagraphsInvalidStorage),
        ("testDeleteSubshapePortion", testDeleteSubshapePortion),
        ("testDeleteSubshapePortionInvalidName", testDeleteSubshapePortionInvalidName),
        ("testDeleteSubshapePortionInvalidSlideIndex", testDeleteSubshapePortionInvalidSlideIndex),
        ("testDeleteSubshapePortionInvalidPath", testDeleteSubshapePortionInvalidPath),
        ("testDeleteSubshapePortionInvalidShapeIndex", testDeleteSubshapePortionInvalidShapeIndex),
        ("testDeleteSubshapePortionInvalidParagraphIndex", testDeleteSubshapePortionInvalidParagraphIndex),
        ("testDeleteSubshapePortionInvalidPortionIndex", testDeleteSubshapePortionInvalidPortionIndex),
        ("testDeleteSubshapePortionInvalidPassword", testDeleteSubshapePortionInvalidPassword),
        ("testDeleteSubshapePortionInvalidFolder", testDeleteSubshapePortionInvalidFolder),
        ("testDeleteSubshapePortionInvalidStorage", testDeleteSubshapePortionInvalidStorage),
        ("testDeleteSubshapePortions", testDeleteSubshapePortions),
        ("testDeleteSubshapePortionsInvalidName", testDeleteSubshapePortionsInvalidName),
        ("testDeleteSubshapePortionsInvalidSlideIndex", testDeleteSubshapePortionsInvalidSlideIndex),
        ("testDeleteSubshapePortionsInvalidPath", testDeleteSubshapePortionsInvalidPath),
        ("testDeleteSubshapePortionsInvalidShapeIndex", testDeleteSubshapePortionsInvalidShapeIndex),
        ("testDeleteSubshapePortionsInvalidParagraphIndex", testDeleteSubshapePortionsInvalidParagraphIndex),
        ("testDeleteSubshapePortionsInvalidPortions", testDeleteSubshapePortionsInvalidPortions),
        ("testDeleteSubshapePortionsInvalidPassword", testDeleteSubshapePortionsInvalidPassword),
        ("testDeleteSubshapePortionsInvalidFolder", testDeleteSubshapePortionsInvalidFolder),
        ("testDeleteSubshapePortionsInvalidStorage", testDeleteSubshapePortionsInvalidStorage),
        ("testDeleteSubshapes", testDeleteSubshapes),
        ("testDeleteSubshapesInvalidName", testDeleteSubshapesInvalidName),
        ("testDeleteSubshapesInvalidSlideIndex", testDeleteSubshapesInvalidSlideIndex),
        ("testDeleteSubshapesInvalidPath", testDeleteSubshapesInvalidPath),
        ("testDeleteSubshapesInvalidShapes", testDeleteSubshapesInvalidShapes),
        ("testDeleteSubshapesInvalidPassword", testDeleteSubshapesInvalidPassword),
        ("testDeleteSubshapesInvalidFolder", testDeleteSubshapesInvalidFolder),
        ("testDeleteSubshapesInvalidStorage", testDeleteSubshapesInvalidStorage),
        ("testDeleteWatermark", testDeleteWatermark),
        ("testDeleteWatermarkInvalidName", testDeleteWatermarkInvalidName),
        ("testDeleteWatermarkInvalidShapeName", testDeleteWatermarkInvalidShapeName),
        ("testDeleteWatermarkInvalidPassword", testDeleteWatermarkInvalidPassword),
        ("testDeleteWatermarkInvalidFolder", testDeleteWatermarkInvalidFolder),
        ("testDeleteWatermarkInvalidStorage", testDeleteWatermarkInvalidStorage),
        ("testDeleteWatermarkOnline", testDeleteWatermarkOnline),
        ("testDeleteWatermarkOnlineInvalidDocument", testDeleteWatermarkOnlineInvalidDocument),
        ("testDeleteWatermarkOnlineInvalidShapeName", testDeleteWatermarkOnlineInvalidShapeName),
        ("testDeleteWatermarkOnlineInvalidPassword", testDeleteWatermarkOnlineInvalidPassword),
        ("testDownloadFile", testDownloadFile),
        ("testDownloadFileInvalidPath", testDownloadFileInvalidPath),
        ("testDownloadFileInvalidStorageName", testDownloadFileInvalidStorageName),
        ("testDownloadFileInvalidVersionId", testDownloadFileInvalidVersionId),
        ("testDownloadImage", testDownloadImage),
        ("testDownloadImageInvalidName", testDownloadImageInvalidName),
        ("testDownloadImageInvalidIndex", testDownloadImageInvalidIndex),
        ("testDownloadImageInvalidFormat", testDownloadImageInvalidFormat),
        ("testDownloadImageInvalidPassword", testDownloadImageInvalidPassword),
        ("testDownloadImageInvalidFolder", testDownloadImageInvalidFolder),
        ("testDownloadImageInvalidStorage", testDownloadImageInvalidStorage),
        ("testDownloadImageDefaultFormat", testDownloadImageDefaultFormat),
        ("testDownloadImageDefaultFormatInvalidName", testDownloadImageDefaultFormatInvalidName),
        ("testDownloadImageDefaultFormatInvalidIndex", testDownloadImageDefaultFormatInvalidIndex),
        ("testDownloadImageDefaultFormatInvalidPassword", testDownloadImageDefaultFormatInvalidPassword),
        ("testDownloadImageDefaultFormatInvalidFolder", testDownloadImageDefaultFormatInvalidFolder),
        ("testDownloadImageDefaultFormatInvalidStorage", testDownloadImageDefaultFormatInvalidStorage),
        ("testDownloadImageDefaultFormatOnline", testDownloadImageDefaultFormatOnline),
        ("testDownloadImageDefaultFormatOnlineInvalidDocument", testDownloadImageDefaultFormatOnlineInvalidDocument),
        ("testDownloadImageDefaultFormatOnlineInvalidIndex", testDownloadImageDefaultFormatOnlineInvalidIndex),
        ("testDownloadImageDefaultFormatOnlineInvalidPassword", testDownloadImageDefaultFormatOnlineInvalidPassword),
        ("testDownloadImageOnline", testDownloadImageOnline),
        ("testDownloadImageOnlineInvalidDocument", testDownloadImageOnlineInvalidDocument),
        ("testDownloadImageOnlineInvalidIndex", testDownloadImageOnlineInvalidIndex),
        ("testDownloadImageOnlineInvalidFormat", testDownloadImageOnlineInvalidFormat),
        ("testDownloadImageOnlineInvalidPassword", testDownloadImageOnlineInvalidPassword),
        ("testDownloadImages", testDownloadImages),
        ("testDownloadImagesInvalidName", testDownloadImagesInvalidName),
        ("testDownloadImagesInvalidFormat", testDownloadImagesInvalidFormat),
        ("testDownloadImagesInvalidPassword", testDownloadImagesInvalidPassword),
        ("testDownloadImagesInvalidFolder", testDownloadImagesInvalidFolder),
        ("testDownloadImagesInvalidStorage", testDownloadImagesInvalidStorage),
        ("testDownloadImagesDefaultFormat", testDownloadImagesDefaultFormat),
        ("testDownloadImagesDefaultFormatInvalidName", testDownloadImagesDefaultFormatInvalidName),
        ("testDownloadImagesDefaultFormatInvalidPassword", testDownloadImagesDefaultFormatInvalidPassword),
        ("testDownloadImagesDefaultFormatInvalidFolder", testDownloadImagesDefaultFormatInvalidFolder),
        ("testDownloadImagesDefaultFormatInvalidStorage", testDownloadImagesDefaultFormatInvalidStorage),
        ("testDownloadImagesDefaultFormatOnline", testDownloadImagesDefaultFormatOnline),
        ("testDownloadImagesDefaultFormatOnlineInvalidDocument", testDownloadImagesDefaultFormatOnlineInvalidDocument),
        ("testDownloadImagesDefaultFormatOnlineInvalidPassword", testDownloadImagesDefaultFormatOnlineInvalidPassword),
        ("testDownloadImagesOnline", testDownloadImagesOnline),
        ("testDownloadImagesOnlineInvalidDocument", testDownloadImagesOnlineInvalidDocument),
        ("testDownloadImagesOnlineInvalidFormat", testDownloadImagesOnlineInvalidFormat),
        ("testDownloadImagesOnlineInvalidPassword", testDownloadImagesOnlineInvalidPassword),
        ("testDownloadNotesSlide", testDownloadNotesSlide),
        ("testDownloadNotesSlideInvalidName", testDownloadNotesSlideInvalidName),
        ("testDownloadNotesSlideInvalidSlideIndex", testDownloadNotesSlideInvalidSlideIndex),
        ("testDownloadNotesSlideInvalidFormat", testDownloadNotesSlideInvalidFormat),
        ("testDownloadNotesSlideInvalidWidth", testDownloadNotesSlideInvalidWidth),
        ("testDownloadNotesSlideInvalidHeight", testDownloadNotesSlideInvalidHeight),
        ("testDownloadNotesSlideInvalidPassword", testDownloadNotesSlideInvalidPassword),
        ("testDownloadNotesSlideInvalidFolder", testDownloadNotesSlideInvalidFolder),
        ("testDownloadNotesSlideInvalidStorage", testDownloadNotesSlideInvalidStorage),
        ("testDownloadNotesSlideInvalidFontsFolder", testDownloadNotesSlideInvalidFontsFolder),
        ("testDownloadNotesSlideOnline", testDownloadNotesSlideOnline),
        ("testDownloadNotesSlideOnlineInvalidDocument", testDownloadNotesSlideOnlineInvalidDocument),
        ("testDownloadNotesSlideOnlineInvalidSlideIndex", testDownloadNotesSlideOnlineInvalidSlideIndex),
        ("testDownloadNotesSlideOnlineInvalidFormat", testDownloadNotesSlideOnlineInvalidFormat),
        ("testDownloadNotesSlideOnlineInvalidWidth", testDownloadNotesSlideOnlineInvalidWidth),
        ("testDownloadNotesSlideOnlineInvalidHeight", testDownloadNotesSlideOnlineInvalidHeight),
        ("testDownloadNotesSlideOnlineInvalidPassword", testDownloadNotesSlideOnlineInvalidPassword),
        ("testDownloadNotesSlideOnlineInvalidFontsFolder", testDownloadNotesSlideOnlineInvalidFontsFolder),
        ("testDownloadNotesSlideShape", testDownloadNotesSlideShape),
        ("testDownloadNotesSlideShapeInvalidName", testDownloadNotesSlideShapeInvalidName),
        ("testDownloadNotesSlideShapeInvalidSlideIndex", testDownloadNotesSlideShapeInvalidSlideIndex),
        ("testDownloadNotesSlideShapeInvalidShapeIndex", testDownloadNotesSlideShapeInvalidShapeIndex),
        ("testDownloadNotesSlideShapeInvalidFormat", testDownloadNotesSlideShapeInvalidFormat),
        ("testDownloadNotesSlideShapeInvalidOptions", testDownloadNotesSlideShapeInvalidOptions),
        ("testDownloadNotesSlideShapeInvalidScaleX", testDownloadNotesSlideShapeInvalidScaleX),
        ("testDownloadNotesSlideShapeInvalidScaleY", testDownloadNotesSlideShapeInvalidScaleY),
        ("testDownloadNotesSlideShapeInvalidBounds", testDownloadNotesSlideShapeInvalidBounds),
        ("testDownloadNotesSlideShapeInvalidPassword", testDownloadNotesSlideShapeInvalidPassword),
        ("testDownloadNotesSlideShapeInvalidFolder", testDownloadNotesSlideShapeInvalidFolder),
        ("testDownloadNotesSlideShapeInvalidStorage", testDownloadNotesSlideShapeInvalidStorage),
        ("testDownloadNotesSlideShapeInvalidFontsFolder", testDownloadNotesSlideShapeInvalidFontsFolder),
        ("testDownloadPresentation", testDownloadPresentation),
        ("testDownloadPresentationInvalidName", testDownloadPresentationInvalidName),
        ("testDownloadPresentationInvalidFormat", testDownloadPresentationInvalidFormat),
        ("testDownloadPresentationInvalidOptions", testDownloadPresentationInvalidOptions),
        ("testDownloadPresentationInvalidPassword", testDownloadPresentationInvalidPassword),
        ("testDownloadPresentationInvalidFolder", testDownloadPresentationInvalidFolder),
        ("testDownloadPresentationInvalidStorage", testDownloadPresentationInvalidStorage),
        ("testDownloadPresentationInvalidFontsFolder", testDownloadPresentationInvalidFontsFolder),
        ("testDownloadShape", testDownloadShape),
        ("testDownloadShapeInvalidName", testDownloadShapeInvalidName),
        ("testDownloadShapeInvalidSlideIndex", testDownloadShapeInvalidSlideIndex),
        ("testDownloadShapeInvalidShapeIndex", testDownloadShapeInvalidShapeIndex),
        ("testDownloadShapeInvalidFormat", testDownloadShapeInvalidFormat),
        ("testDownloadShapeInvalidOptions", testDownloadShapeInvalidOptions),
        ("testDownloadShapeInvalidScaleX", testDownloadShapeInvalidScaleX),
        ("testDownloadShapeInvalidScaleY", testDownloadShapeInvalidScaleY),
        ("testDownloadShapeInvalidBounds", testDownloadShapeInvalidBounds),
        ("testDownloadShapeInvalidPassword", testDownloadShapeInvalidPassword),
        ("testDownloadShapeInvalidFolder", testDownloadShapeInvalidFolder),
        ("testDownloadShapeInvalidStorage", testDownloadShapeInvalidStorage),
        ("testDownloadShapeInvalidFontsFolder", testDownloadShapeInvalidFontsFolder),
        ("testDownloadShapeOnline", testDownloadShapeOnline),
        ("testDownloadShapeOnlineInvalidDocument", testDownloadShapeOnlineInvalidDocument),
        ("testDownloadShapeOnlineInvalidSlideIndex", testDownloadShapeOnlineInvalidSlideIndex),
        ("testDownloadShapeOnlineInvalidShapeIndex", testDownloadShapeOnlineInvalidShapeIndex),
        ("testDownloadShapeOnlineInvalidFormat", testDownloadShapeOnlineInvalidFormat),
        ("testDownloadShapeOnlineInvalidScaleX", testDownloadShapeOnlineInvalidScaleX),
        ("testDownloadShapeOnlineInvalidScaleY", testDownloadShapeOnlineInvalidScaleY),
        ("testDownloadShapeOnlineInvalidBounds", testDownloadShapeOnlineInvalidBounds),
        ("testDownloadShapeOnlineInvalidPassword", testDownloadShapeOnlineInvalidPassword),
        ("testDownloadShapeOnlineInvalidStorage", testDownloadShapeOnlineInvalidStorage),
        ("testDownloadShapeOnlineInvalidFontsFolder", testDownloadShapeOnlineInvalidFontsFolder),
        ("testDownloadSlide", testDownloadSlide),
        ("testDownloadSlideInvalidName", testDownloadSlideInvalidName),
        ("testDownloadSlideInvalidSlideIndex", testDownloadSlideInvalidSlideIndex),
        ("testDownloadSlideInvalidFormat", testDownloadSlideInvalidFormat),
        ("testDownloadSlideInvalidOptions", testDownloadSlideInvalidOptions),
        ("testDownloadSlideInvalidWidth", testDownloadSlideInvalidWidth),
        ("testDownloadSlideInvalidHeight", testDownloadSlideInvalidHeight),
        ("testDownloadSlideInvalidPassword", testDownloadSlideInvalidPassword),
        ("testDownloadSlideInvalidFolder", testDownloadSlideInvalidFolder),
        ("testDownloadSlideInvalidStorage", testDownloadSlideInvalidStorage),
        ("testDownloadSlideInvalidFontsFolder", testDownloadSlideInvalidFontsFolder),
        ("testDownloadSlideOnline", testDownloadSlideOnline),
        ("testDownloadSlideOnlineInvalidDocument", testDownloadSlideOnlineInvalidDocument),
        ("testDownloadSlideOnlineInvalidSlideIndex", testDownloadSlideOnlineInvalidSlideIndex),
        ("testDownloadSlideOnlineInvalidFormat", testDownloadSlideOnlineInvalidFormat),
        ("testDownloadSlideOnlineInvalidWidth", testDownloadSlideOnlineInvalidWidth),
        ("testDownloadSlideOnlineInvalidHeight", testDownloadSlideOnlineInvalidHeight),
        ("testDownloadSlideOnlineInvalidPassword", testDownloadSlideOnlineInvalidPassword),
        ("testDownloadSlideOnlineInvalidStorage", testDownloadSlideOnlineInvalidStorage),
        ("testDownloadSlideOnlineInvalidFontsFolder", testDownloadSlideOnlineInvalidFontsFolder),
        ("testDownloadSubshape", testDownloadSubshape),
        ("testDownloadSubshapeInvalidName", testDownloadSubshapeInvalidName),
        ("testDownloadSubshapeInvalidSlideIndex", testDownloadSubshapeInvalidSlideIndex),
        ("testDownloadSubshapeInvalidPath", testDownloadSubshapeInvalidPath),
        ("testDownloadSubshapeInvalidShapeIndex", testDownloadSubshapeInvalidShapeIndex),
        ("testDownloadSubshapeInvalidFormat", testDownloadSubshapeInvalidFormat),
        ("testDownloadSubshapeInvalidOptions", testDownloadSubshapeInvalidOptions),
        ("testDownloadSubshapeInvalidScaleX", testDownloadSubshapeInvalidScaleX),
        ("testDownloadSubshapeInvalidScaleY", testDownloadSubshapeInvalidScaleY),
        ("testDownloadSubshapeInvalidBounds", testDownloadSubshapeInvalidBounds),
        ("testDownloadSubshapeInvalidPassword", testDownloadSubshapeInvalidPassword),
        ("testDownloadSubshapeInvalidFolder", testDownloadSubshapeInvalidFolder),
        ("testDownloadSubshapeInvalidStorage", testDownloadSubshapeInvalidStorage),
        ("testDownloadSubshapeInvalidFontsFolder", testDownloadSubshapeInvalidFontsFolder),
        ("testGetAnimation", testGetAnimation),
        ("testGetAnimationInvalidName", testGetAnimationInvalidName),
        ("testGetAnimationInvalidSlideIndex", testGetAnimationInvalidSlideIndex),
        ("testGetAnimationInvalidShapeIndex", testGetAnimationInvalidShapeIndex),
        ("testGetAnimationInvalidPassword", testGetAnimationInvalidPassword),
        ("testGetAnimationInvalidFolder", testGetAnimationInvalidFolder),
        ("testGetAnimationInvalidStorage", testGetAnimationInvalidStorage),
        ("testGetApiInfo", testGetApiInfo),
        ("testGetBackground", testGetBackground),
        ("testGetBackgroundInvalidName", testGetBackgroundInvalidName),
        ("testGetBackgroundInvalidSlideIndex", testGetBackgroundInvalidSlideIndex),
        ("testGetBackgroundInvalidPassword", testGetBackgroundInvalidPassword),
        ("testGetBackgroundInvalidFolder", testGetBackgroundInvalidFolder),
        ("testGetBackgroundInvalidStorage", testGetBackgroundInvalidStorage),
        ("testGetColorScheme", testGetColorScheme),
        ("testGetColorSchemeInvalidName", testGetColorSchemeInvalidName),
        ("testGetColorSchemeInvalidSlideIndex", testGetColorSchemeInvalidSlideIndex),
        ("testGetColorSchemeInvalidPassword", testGetColorSchemeInvalidPassword),
        ("testGetColorSchemeInvalidFolder", testGetColorSchemeInvalidFolder),
        ("testGetColorSchemeInvalidStorage", testGetColorSchemeInvalidStorage),
        ("testGetDiscUsage", testGetDiscUsage),
        ("testGetDiscUsageInvalidStorageName", testGetDiscUsageInvalidStorageName),
        ("testGetDocumentProperties", testGetDocumentProperties),
        ("testGetDocumentPropertiesInvalidName", testGetDocumentPropertiesInvalidName),
        ("testGetDocumentPropertiesInvalidPassword", testGetDocumentPropertiesInvalidPassword),
        ("testGetDocumentPropertiesInvalidFolder", testGetDocumentPropertiesInvalidFolder),
        ("testGetDocumentPropertiesInvalidStorage", testGetDocumentPropertiesInvalidStorage),
        ("testGetDocumentProperty", testGetDocumentProperty),
        ("testGetDocumentPropertyInvalidName", testGetDocumentPropertyInvalidName),
        ("testGetDocumentPropertyInvalidPropertyName", testGetDocumentPropertyInvalidPropertyName),
        ("testGetDocumentPropertyInvalidPassword", testGetDocumentPropertyInvalidPassword),
        ("testGetDocumentPropertyInvalidFolder", testGetDocumentPropertyInvalidFolder),
        ("testGetDocumentPropertyInvalidStorage", testGetDocumentPropertyInvalidStorage),
        ("testGetFileVersions", testGetFileVersions),
        ("testGetFileVersionsInvalidPath", testGetFileVersionsInvalidPath),
        ("testGetFileVersionsInvalidStorageName", testGetFileVersionsInvalidStorageName),
        ("testGetFilesList", testGetFilesList),
        ("testGetFilesListInvalidPath", testGetFilesListInvalidPath),
        ("testGetFilesListInvalidStorageName", testGetFilesListInvalidStorageName),
        ("testGetFontScheme", testGetFontScheme),
        ("testGetFontSchemeInvalidName", testGetFontSchemeInvalidName),
        ("testGetFontSchemeInvalidSlideIndex", testGetFontSchemeInvalidSlideIndex),
        ("testGetFontSchemeInvalidPassword", testGetFontSchemeInvalidPassword),
        ("testGetFontSchemeInvalidFolder", testGetFontSchemeInvalidFolder),
        ("testGetFontSchemeInvalidStorage", testGetFontSchemeInvalidStorage),
        ("testGetFormatScheme", testGetFormatScheme),
        ("testGetFormatSchemeInvalidName", testGetFormatSchemeInvalidName),
        ("testGetFormatSchemeInvalidSlideIndex", testGetFormatSchemeInvalidSlideIndex),
        ("testGetFormatSchemeInvalidPassword", testGetFormatSchemeInvalidPassword),
        ("testGetFormatSchemeInvalidFolder", testGetFormatSchemeInvalidFolder),
        ("testGetFormatSchemeInvalidStorage", testGetFormatSchemeInvalidStorage),
        ("testGetLayoutSlide", testGetLayoutSlide),
        ("testGetLayoutSlideInvalidName", testGetLayoutSlideInvalidName),
        ("testGetLayoutSlideInvalidSlideIndex", testGetLayoutSlideInvalidSlideIndex),
        ("testGetLayoutSlideInvalidPassword", testGetLayoutSlideInvalidPassword),
        ("testGetLayoutSlideInvalidFolder", testGetLayoutSlideInvalidFolder),
        ("testGetLayoutSlideInvalidStorage", testGetLayoutSlideInvalidStorage),
        ("testGetLayoutSlides", testGetLayoutSlides),
        ("testGetLayoutSlidesInvalidName", testGetLayoutSlidesInvalidName),
        ("testGetLayoutSlidesInvalidPassword", testGetLayoutSlidesInvalidPassword),
        ("testGetLayoutSlidesInvalidFolder", testGetLayoutSlidesInvalidFolder),
        ("testGetLayoutSlidesInvalidStorage", testGetLayoutSlidesInvalidStorage),
        ("testGetMasterSlide", testGetMasterSlide),
        ("testGetMasterSlideInvalidName", testGetMasterSlideInvalidName),
        ("testGetMasterSlideInvalidSlideIndex", testGetMasterSlideInvalidSlideIndex),
        ("testGetMasterSlideInvalidPassword", testGetMasterSlideInvalidPassword),
        ("testGetMasterSlideInvalidFolder", testGetMasterSlideInvalidFolder),
        ("testGetMasterSlideInvalidStorage", testGetMasterSlideInvalidStorage),
        ("testGetMasterSlides", testGetMasterSlides),
        ("testGetMasterSlidesInvalidName", testGetMasterSlidesInvalidName),
        ("testGetMasterSlidesInvalidPassword", testGetMasterSlidesInvalidPassword),
        ("testGetMasterSlidesInvalidFolder", testGetMasterSlidesInvalidFolder),
        ("testGetMasterSlidesInvalidStorage", testGetMasterSlidesInvalidStorage),
        ("testGetNotesSlide", testGetNotesSlide),
        ("testGetNotesSlideInvalidName", testGetNotesSlideInvalidName),
        ("testGetNotesSlideInvalidSlideIndex", testGetNotesSlideInvalidSlideIndex),
        ("testGetNotesSlideInvalidPassword", testGetNotesSlideInvalidPassword),
        ("testGetNotesSlideInvalidFolder", testGetNotesSlideInvalidFolder),
        ("testGetNotesSlideInvalidStorage", testGetNotesSlideInvalidStorage),
        ("testGetNotesSlideHeaderFooter", testGetNotesSlideHeaderFooter),
        ("testGetNotesSlideHeaderFooterInvalidName", testGetNotesSlideHeaderFooterInvalidName),
        ("testGetNotesSlideHeaderFooterInvalidSlideIndex", testGetNotesSlideHeaderFooterInvalidSlideIndex),
        ("testGetNotesSlideHeaderFooterInvalidPassword", testGetNotesSlideHeaderFooterInvalidPassword),
        ("testGetNotesSlideHeaderFooterInvalidFolder", testGetNotesSlideHeaderFooterInvalidFolder),
        ("testGetNotesSlideHeaderFooterInvalidStorage", testGetNotesSlideHeaderFooterInvalidStorage),
        ("testGetNotesSlideOnline", testGetNotesSlideOnline),
        ("testGetNotesSlideOnlineInvalidDocument", testGetNotesSlideOnlineInvalidDocument),
        ("testGetNotesSlideOnlineInvalidSlideIndex", testGetNotesSlideOnlineInvalidSlideIndex),
        ("testGetNotesSlideOnlineInvalidPassword", testGetNotesSlideOnlineInvalidPassword),
        ("testGetNotesSlideParagraph", testGetNotesSlideParagraph),
        ("testGetNotesSlideParagraphInvalidName", testGetNotesSlideParagraphInvalidName),
        ("testGetNotesSlideParagraphInvalidSlideIndex", testGetNotesSlideParagraphInvalidSlideIndex),
        ("testGetNotesSlideParagraphInvalidShapeIndex", testGetNotesSlideParagraphInvalidShapeIndex),
        ("testGetNotesSlideParagraphInvalidParagraphIndex", testGetNotesSlideParagraphInvalidParagraphIndex),
        ("testGetNotesSlideParagraphInvalidPassword", testGetNotesSlideParagraphInvalidPassword),
        ("testGetNotesSlideParagraphInvalidFolder", testGetNotesSlideParagraphInvalidFolder),
        ("testGetNotesSlideParagraphInvalidStorage", testGetNotesSlideParagraphInvalidStorage),
        ("testGetNotesSlideParagraphs", testGetNotesSlideParagraphs),
        ("testGetNotesSlideParagraphsInvalidName", testGetNotesSlideParagraphsInvalidName),
        ("testGetNotesSlideParagraphsInvalidSlideIndex", testGetNotesSlideParagraphsInvalidSlideIndex),
        ("testGetNotesSlideParagraphsInvalidShapeIndex", testGetNotesSlideParagraphsInvalidShapeIndex),
        ("testGetNotesSlideParagraphsInvalidPassword", testGetNotesSlideParagraphsInvalidPassword),
        ("testGetNotesSlideParagraphsInvalidFolder", testGetNotesSlideParagraphsInvalidFolder),
        ("testGetNotesSlideParagraphsInvalidStorage", testGetNotesSlideParagraphsInvalidStorage),
        ("testGetNotesSlidePortion", testGetNotesSlidePortion),
        ("testGetNotesSlidePortionInvalidName", testGetNotesSlidePortionInvalidName),
        ("testGetNotesSlidePortionInvalidSlideIndex", testGetNotesSlidePortionInvalidSlideIndex),
        ("testGetNotesSlidePortionInvalidShapeIndex", testGetNotesSlidePortionInvalidShapeIndex),
        ("testGetNotesSlidePortionInvalidParagraphIndex", testGetNotesSlidePortionInvalidParagraphIndex),
        ("testGetNotesSlidePortionInvalidPortionIndex", testGetNotesSlidePortionInvalidPortionIndex),
        ("testGetNotesSlidePortionInvalidPassword", testGetNotesSlidePortionInvalidPassword),
        ("testGetNotesSlidePortionInvalidFolder", testGetNotesSlidePortionInvalidFolder),
        ("testGetNotesSlidePortionInvalidStorage", testGetNotesSlidePortionInvalidStorage),
        ("testGetNotesSlidePortions", testGetNotesSlidePortions),
        ("testGetNotesSlidePortionsInvalidName", testGetNotesSlidePortionsInvalidName),
        ("testGetNotesSlidePortionsInvalidSlideIndex", testGetNotesSlidePortionsInvalidSlideIndex),
        ("testGetNotesSlidePortionsInvalidShapeIndex", testGetNotesSlidePortionsInvalidShapeIndex),
        ("testGetNotesSlidePortionsInvalidParagraphIndex", testGetNotesSlidePortionsInvalidParagraphIndex),
        ("testGetNotesSlidePortionsInvalidPassword", testGetNotesSlidePortionsInvalidPassword),
        ("testGetNotesSlidePortionsInvalidFolder", testGetNotesSlidePortionsInvalidFolder),
        ("testGetNotesSlidePortionsInvalidStorage", testGetNotesSlidePortionsInvalidStorage),
        ("testGetNotesSlideShape", testGetNotesSlideShape),
        ("testGetNotesSlideShapeInvalidName", testGetNotesSlideShapeInvalidName),
        ("testGetNotesSlideShapeInvalidSlideIndex", testGetNotesSlideShapeInvalidSlideIndex),
        ("testGetNotesSlideShapeInvalidShapeIndex", testGetNotesSlideShapeInvalidShapeIndex),
        ("testGetNotesSlideShapeInvalidPassword", testGetNotesSlideShapeInvalidPassword),
        ("testGetNotesSlideShapeInvalidFolder", testGetNotesSlideShapeInvalidFolder),
        ("testGetNotesSlideShapeInvalidStorage", testGetNotesSlideShapeInvalidStorage),
        ("testGetNotesSlideShapes", testGetNotesSlideShapes),
        ("testGetNotesSlideShapesInvalidName", testGetNotesSlideShapesInvalidName),
        ("testGetNotesSlideShapesInvalidSlideIndex", testGetNotesSlideShapesInvalidSlideIndex),
        ("testGetNotesSlideShapesInvalidPassword", testGetNotesSlideShapesInvalidPassword),
        ("testGetNotesSlideShapesInvalidFolder", testGetNotesSlideShapesInvalidFolder),
        ("testGetNotesSlideShapesInvalidStorage", testGetNotesSlideShapesInvalidStorage),
        ("testGetParagraph", testGetParagraph),
        ("testGetParagraphInvalidName", testGetParagraphInvalidName),
        ("testGetParagraphInvalidSlideIndex", testGetParagraphInvalidSlideIndex),
        ("testGetParagraphInvalidShapeIndex", testGetParagraphInvalidShapeIndex),
        ("testGetParagraphInvalidParagraphIndex", testGetParagraphInvalidParagraphIndex),
        ("testGetParagraphInvalidPassword", testGetParagraphInvalidPassword),
        ("testGetParagraphInvalidFolder", testGetParagraphInvalidFolder),
        ("testGetParagraphInvalidStorage", testGetParagraphInvalidStorage),
        ("testGetParagraphs", testGetParagraphs),
        ("testGetParagraphsInvalidName", testGetParagraphsInvalidName),
        ("testGetParagraphsInvalidSlideIndex", testGetParagraphsInvalidSlideIndex),
        ("testGetParagraphsInvalidShapeIndex", testGetParagraphsInvalidShapeIndex),
        ("testGetParagraphsInvalidPassword", testGetParagraphsInvalidPassword),
        ("testGetParagraphsInvalidFolder", testGetParagraphsInvalidFolder),
        ("testGetParagraphsInvalidStorage", testGetParagraphsInvalidStorage),
        ("testGetPlaceholder", testGetPlaceholder),
        ("testGetPlaceholderInvalidName", testGetPlaceholderInvalidName),
        ("testGetPlaceholderInvalidSlideIndex", testGetPlaceholderInvalidSlideIndex),
        ("testGetPlaceholderInvalidPlaceholderIndex", testGetPlaceholderInvalidPlaceholderIndex),
        ("testGetPlaceholderInvalidPassword", testGetPlaceholderInvalidPassword),
        ("testGetPlaceholderInvalidFolder", testGetPlaceholderInvalidFolder),
        ("testGetPlaceholderInvalidStorage", testGetPlaceholderInvalidStorage),
        ("testGetPlaceholders", testGetPlaceholders),
        ("testGetPlaceholdersInvalidName", testGetPlaceholdersInvalidName),
        ("testGetPlaceholdersInvalidSlideIndex", testGetPlaceholdersInvalidSlideIndex),
        ("testGetPlaceholdersInvalidPassword", testGetPlaceholdersInvalidPassword),
        ("testGetPlaceholdersInvalidFolder", testGetPlaceholdersInvalidFolder),
        ("testGetPlaceholdersInvalidStorage", testGetPlaceholdersInvalidStorage),
        ("testGetPortion", testGetPortion),
        ("testGetPortionInvalidName", testGetPortionInvalidName),
        ("testGetPortionInvalidSlideIndex", testGetPortionInvalidSlideIndex),
        ("testGetPortionInvalidShapeIndex", testGetPortionInvalidShapeIndex),
        ("testGetPortionInvalidParagraphIndex", testGetPortionInvalidParagraphIndex),
        ("testGetPortionInvalidPortionIndex", testGetPortionInvalidPortionIndex),
        ("testGetPortionInvalidPassword", testGetPortionInvalidPassword),
        ("testGetPortionInvalidFolder", testGetPortionInvalidFolder),
        ("testGetPortionInvalidStorage", testGetPortionInvalidStorage),
        ("testGetPortions", testGetPortions),
        ("testGetPortionsInvalidName", testGetPortionsInvalidName),
        ("testGetPortionsInvalidSlideIndex", testGetPortionsInvalidSlideIndex),
        ("testGetPortionsInvalidShapeIndex", testGetPortionsInvalidShapeIndex),
        ("testGetPortionsInvalidParagraphIndex", testGetPortionsInvalidParagraphIndex),
        ("testGetPortionsInvalidPassword", testGetPortionsInvalidPassword),
        ("testGetPortionsInvalidFolder", testGetPortionsInvalidFolder),
        ("testGetPortionsInvalidStorage", testGetPortionsInvalidStorage),
        ("testGetPresentation", testGetPresentation),
        ("testGetPresentationInvalidName", testGetPresentationInvalidName),
        ("testGetPresentationInvalidPassword", testGetPresentationInvalidPassword),
        ("testGetPresentationInvalidFolder", testGetPresentationInvalidFolder),
        ("testGetPresentationInvalidStorage", testGetPresentationInvalidStorage),
        ("testGetPresentationImages", testGetPresentationImages),
        ("testGetPresentationImagesInvalidName", testGetPresentationImagesInvalidName),
        ("testGetPresentationImagesInvalidPassword", testGetPresentationImagesInvalidPassword),
        ("testGetPresentationImagesInvalidFolder", testGetPresentationImagesInvalidFolder),
        ("testGetPresentationImagesInvalidStorage", testGetPresentationImagesInvalidStorage),
        ("testGetPresentationTextItems", testGetPresentationTextItems),
        ("testGetPresentationTextItemsInvalidName", testGetPresentationTextItemsInvalidName),
        ("testGetPresentationTextItemsInvalidWithEmpty", testGetPresentationTextItemsInvalidWithEmpty),
        ("testGetPresentationTextItemsInvalidPassword", testGetPresentationTextItemsInvalidPassword),
        ("testGetPresentationTextItemsInvalidFolder", testGetPresentationTextItemsInvalidFolder),
        ("testGetPresentationTextItemsInvalidStorage", testGetPresentationTextItemsInvalidStorage),
        ("testGetProtectionProperties", testGetProtectionProperties),
        ("testGetProtectionPropertiesInvalidName", testGetProtectionPropertiesInvalidName),
        ("testGetProtectionPropertiesInvalidPassword", testGetProtectionPropertiesInvalidPassword),
        ("testGetProtectionPropertiesInvalidFolder", testGetProtectionPropertiesInvalidFolder),
        ("testGetProtectionPropertiesInvalidStorage", testGetProtectionPropertiesInvalidStorage),
        ("testGetSections", testGetSections),
        ("testGetSectionsInvalidName", testGetSectionsInvalidName),
        ("testGetSectionsInvalidPassword", testGetSectionsInvalidPassword),
        ("testGetSectionsInvalidFolder", testGetSectionsInvalidFolder),
        ("testGetSectionsInvalidStorage", testGetSectionsInvalidStorage),
        ("testGetShape", testGetShape),
        ("testGetShapeInvalidName", testGetShapeInvalidName),
        ("testGetShapeInvalidSlideIndex", testGetShapeInvalidSlideIndex),
        ("testGetShapeInvalidShapeIndex", testGetShapeInvalidShapeIndex),
        ("testGetShapeInvalidPassword", testGetShapeInvalidPassword),
        ("testGetShapeInvalidFolder", testGetShapeInvalidFolder),
        ("testGetShapeInvalidStorage", testGetShapeInvalidStorage),
        ("testGetShapes", testGetShapes),
        ("testGetShapesInvalidName", testGetShapesInvalidName),
        ("testGetShapesInvalidSlideIndex", testGetShapesInvalidSlideIndex),
        ("testGetShapesInvalidPassword", testGetShapesInvalidPassword),
        ("testGetShapesInvalidFolder", testGetShapesInvalidFolder),
        ("testGetShapesInvalidStorage", testGetShapesInvalidStorage),
        ("testGetSlide", testGetSlide),
        ("testGetSlideInvalidName", testGetSlideInvalidName),
        ("testGetSlideInvalidSlideIndex", testGetSlideInvalidSlideIndex),
        ("testGetSlideInvalidPassword", testGetSlideInvalidPassword),
        ("testGetSlideInvalidFolder", testGetSlideInvalidFolder),
        ("testGetSlideInvalidStorage", testGetSlideInvalidStorage),
        ("testGetSlideComments", testGetSlideComments),
        ("testGetSlideCommentsInvalidName", testGetSlideCommentsInvalidName),
        ("testGetSlideCommentsInvalidSlideIndex", testGetSlideCommentsInvalidSlideIndex),
        ("testGetSlideCommentsInvalidPassword", testGetSlideCommentsInvalidPassword),
        ("testGetSlideCommentsInvalidFolder", testGetSlideCommentsInvalidFolder),
        ("testGetSlideCommentsInvalidStorage", testGetSlideCommentsInvalidStorage),
        ("testGetSlideHeaderFooter", testGetSlideHeaderFooter),
        ("testGetSlideHeaderFooterInvalidName", testGetSlideHeaderFooterInvalidName),
        ("testGetSlideHeaderFooterInvalidSlideIndex", testGetSlideHeaderFooterInvalidSlideIndex),
        ("testGetSlideHeaderFooterInvalidPassword", testGetSlideHeaderFooterInvalidPassword),
        ("testGetSlideHeaderFooterInvalidFolder", testGetSlideHeaderFooterInvalidFolder),
        ("testGetSlideHeaderFooterInvalidStorage", testGetSlideHeaderFooterInvalidStorage),
        ("testGetSlideImages", testGetSlideImages),
        ("testGetSlideImagesInvalidName", testGetSlideImagesInvalidName),
        ("testGetSlideImagesInvalidSlideIndex", testGetSlideImagesInvalidSlideIndex),
        ("testGetSlideImagesInvalidPassword", testGetSlideImagesInvalidPassword),
        ("testGetSlideImagesInvalidFolder", testGetSlideImagesInvalidFolder),
        ("testGetSlideImagesInvalidStorage", testGetSlideImagesInvalidStorage),
        ("testGetSlideProperties", testGetSlideProperties),
        ("testGetSlidePropertiesInvalidName", testGetSlidePropertiesInvalidName),
        ("testGetSlidePropertiesInvalidPassword", testGetSlidePropertiesInvalidPassword),
        ("testGetSlidePropertiesInvalidFolder", testGetSlidePropertiesInvalidFolder),
        ("testGetSlidePropertiesInvalidStorage", testGetSlidePropertiesInvalidStorage),
        ("testGetSlideTextItems", testGetSlideTextItems),
        ("testGetSlideTextItemsInvalidName", testGetSlideTextItemsInvalidName),
        ("testGetSlideTextItemsInvalidSlideIndex", testGetSlideTextItemsInvalidSlideIndex),
        ("testGetSlideTextItemsInvalidWithEmpty", testGetSlideTextItemsInvalidWithEmpty),
        ("testGetSlideTextItemsInvalidPassword", testGetSlideTextItemsInvalidPassword),
        ("testGetSlideTextItemsInvalidFolder", testGetSlideTextItemsInvalidFolder),
        ("testGetSlideTextItemsInvalidStorage", testGetSlideTextItemsInvalidStorage),
        ("testGetSlides", testGetSlides),
        ("testGetSlidesInvalidName", testGetSlidesInvalidName),
        ("testGetSlidesInvalidPassword", testGetSlidesInvalidPassword),
        ("testGetSlidesInvalidFolder", testGetSlidesInvalidFolder),
        ("testGetSlidesInvalidStorage", testGetSlidesInvalidStorage),
        ("testGetSubshape", testGetSubshape),
        ("testGetSubshapeInvalidName", testGetSubshapeInvalidName),
        ("testGetSubshapeInvalidSlideIndex", testGetSubshapeInvalidSlideIndex),
        ("testGetSubshapeInvalidPath", testGetSubshapeInvalidPath),
        ("testGetSubshapeInvalidShapeIndex", testGetSubshapeInvalidShapeIndex),
        ("testGetSubshapeInvalidPassword", testGetSubshapeInvalidPassword),
        ("testGetSubshapeInvalidFolder", testGetSubshapeInvalidFolder),
        ("testGetSubshapeInvalidStorage", testGetSubshapeInvalidStorage),
        ("testGetSubshapeParagraph", testGetSubshapeParagraph),
        ("testGetSubshapeParagraphInvalidName", testGetSubshapeParagraphInvalidName),
        ("testGetSubshapeParagraphInvalidSlideIndex", testGetSubshapeParagraphInvalidSlideIndex),
        ("testGetSubshapeParagraphInvalidPath", testGetSubshapeParagraphInvalidPath),
        ("testGetSubshapeParagraphInvalidShapeIndex", testGetSubshapeParagraphInvalidShapeIndex),
        ("testGetSubshapeParagraphInvalidParagraphIndex", testGetSubshapeParagraphInvalidParagraphIndex),
        ("testGetSubshapeParagraphInvalidPassword", testGetSubshapeParagraphInvalidPassword),
        ("testGetSubshapeParagraphInvalidFolder", testGetSubshapeParagraphInvalidFolder),
        ("testGetSubshapeParagraphInvalidStorage", testGetSubshapeParagraphInvalidStorage),
        ("testGetSubshapeParagraphs", testGetSubshapeParagraphs),
        ("testGetSubshapeParagraphsInvalidName", testGetSubshapeParagraphsInvalidName),
        ("testGetSubshapeParagraphsInvalidSlideIndex", testGetSubshapeParagraphsInvalidSlideIndex),
        ("testGetSubshapeParagraphsInvalidPath", testGetSubshapeParagraphsInvalidPath),
        ("testGetSubshapeParagraphsInvalidShapeIndex", testGetSubshapeParagraphsInvalidShapeIndex),
        ("testGetSubshapeParagraphsInvalidPassword", testGetSubshapeParagraphsInvalidPassword),
        ("testGetSubshapeParagraphsInvalidFolder", testGetSubshapeParagraphsInvalidFolder),
        ("testGetSubshapeParagraphsInvalidStorage", testGetSubshapeParagraphsInvalidStorage),
        ("testGetSubshapePortion", testGetSubshapePortion),
        ("testGetSubshapePortionInvalidName", testGetSubshapePortionInvalidName),
        ("testGetSubshapePortionInvalidSlideIndex", testGetSubshapePortionInvalidSlideIndex),
        ("testGetSubshapePortionInvalidPath", testGetSubshapePortionInvalidPath),
        ("testGetSubshapePortionInvalidShapeIndex", testGetSubshapePortionInvalidShapeIndex),
        ("testGetSubshapePortionInvalidParagraphIndex", testGetSubshapePortionInvalidParagraphIndex),
        ("testGetSubshapePortionInvalidPortionIndex", testGetSubshapePortionInvalidPortionIndex),
        ("testGetSubshapePortionInvalidPassword", testGetSubshapePortionInvalidPassword),
        ("testGetSubshapePortionInvalidFolder", testGetSubshapePortionInvalidFolder),
        ("testGetSubshapePortionInvalidStorage", testGetSubshapePortionInvalidStorage),
        ("testGetSubshapePortions", testGetSubshapePortions),
        ("testGetSubshapePortionsInvalidName", testGetSubshapePortionsInvalidName),
        ("testGetSubshapePortionsInvalidSlideIndex", testGetSubshapePortionsInvalidSlideIndex),
        ("testGetSubshapePortionsInvalidPath", testGetSubshapePortionsInvalidPath),
        ("testGetSubshapePortionsInvalidShapeIndex", testGetSubshapePortionsInvalidShapeIndex),
        ("testGetSubshapePortionsInvalidParagraphIndex", testGetSubshapePortionsInvalidParagraphIndex),
        ("testGetSubshapePortionsInvalidPassword", testGetSubshapePortionsInvalidPassword),
        ("testGetSubshapePortionsInvalidFolder", testGetSubshapePortionsInvalidFolder),
        ("testGetSubshapePortionsInvalidStorage", testGetSubshapePortionsInvalidStorage),
        ("testGetSubshapes", testGetSubshapes),
        ("testGetSubshapesInvalidName", testGetSubshapesInvalidName),
        ("testGetSubshapesInvalidSlideIndex", testGetSubshapesInvalidSlideIndex),
        ("testGetSubshapesInvalidPath", testGetSubshapesInvalidPath),
        ("testGetSubshapesInvalidPassword", testGetSubshapesInvalidPassword),
        ("testGetSubshapesInvalidFolder", testGetSubshapesInvalidFolder),
        ("testGetSubshapesInvalidStorage", testGetSubshapesInvalidStorage),
        ("testGetTheme", testGetTheme),
        ("testGetThemeInvalidName", testGetThemeInvalidName),
        ("testGetThemeInvalidSlideIndex", testGetThemeInvalidSlideIndex),
        ("testGetThemeInvalidPassword", testGetThemeInvalidPassword),
        ("testGetThemeInvalidFolder", testGetThemeInvalidFolder),
        ("testGetThemeInvalidStorage", testGetThemeInvalidStorage),
        ("testGetViewProperties", testGetViewProperties),
        ("testGetViewPropertiesInvalidName", testGetViewPropertiesInvalidName),
        ("testGetViewPropertiesInvalidPassword", testGetViewPropertiesInvalidPassword),
        ("testGetViewPropertiesInvalidFolder", testGetViewPropertiesInvalidFolder),
        ("testGetViewPropertiesInvalidStorage", testGetViewPropertiesInvalidStorage),
        ("testImportFromHtml", testImportFromHtml),
        ("testImportFromHtmlInvalidName", testImportFromHtmlInvalidName),
        ("testImportFromHtmlInvalidHtml", testImportFromHtmlInvalidHtml),
        ("testImportFromHtmlInvalidPassword", testImportFromHtmlInvalidPassword),
        ("testImportFromHtmlInvalidFolder", testImportFromHtmlInvalidFolder),
        ("testImportFromHtmlInvalidStorage", testImportFromHtmlInvalidStorage),
        ("testImportFromPdf", testImportFromPdf),
        ("testImportFromPdfInvalidName", testImportFromPdfInvalidName),
        ("testImportFromPdfInvalidPdf", testImportFromPdfInvalidPdf),
        ("testImportFromPdfInvalidPassword", testImportFromPdfInvalidPassword),
        ("testImportFromPdfInvalidFolder", testImportFromPdfInvalidFolder),
        ("testImportFromPdfInvalidStorage", testImportFromPdfInvalidStorage),
        ("testMerge", testMerge),
        ("testMergeInvalidName", testMergeInvalidName),
        ("testMergeInvalidRequest", testMergeInvalidRequest),
        ("testMergeInvalidPassword", testMergeInvalidPassword),
        ("testMergeInvalidFolder", testMergeInvalidFolder),
        ("testMergeInvalidStorage", testMergeInvalidStorage),
        ("testMergeAndSaveOnline", testMergeAndSaveOnline),
        ("testMergeAndSaveOnlineInvalidOutPath", testMergeAndSaveOnlineInvalidOutPath),
        ("testMergeAndSaveOnlineInvalidFiles", testMergeAndSaveOnlineInvalidFiles),
        ("testMergeAndSaveOnlineInvalidRequest", testMergeAndSaveOnlineInvalidRequest),
        ("testMergeAndSaveOnlineInvalidStorage", testMergeAndSaveOnlineInvalidStorage),
        ("testMergeOnline", testMergeOnline),
        ("testMergeOnlineInvalidFiles", testMergeOnlineInvalidFiles),
        ("testMergeOnlineInvalidRequest", testMergeOnlineInvalidRequest),
        ("testMergeOnlineInvalidStorage", testMergeOnlineInvalidStorage),
        ("testMoveFile", testMoveFile),
        ("testMoveFileInvalidSrcPath", testMoveFileInvalidSrcPath),
        ("testMoveFileInvalidDestPath", testMoveFileInvalidDestPath),
        ("testMoveFileInvalidSrcStorageName", testMoveFileInvalidSrcStorageName),
        ("testMoveFileInvalidDestStorageName", testMoveFileInvalidDestStorageName),
        ("testMoveFileInvalidVersionId", testMoveFileInvalidVersionId),
        ("testMoveFolder", testMoveFolder),
        ("testMoveFolderInvalidSrcPath", testMoveFolderInvalidSrcPath),
        ("testMoveFolderInvalidDestPath", testMoveFolderInvalidDestPath),
        ("testMoveFolderInvalidSrcStorageName", testMoveFolderInvalidSrcStorageName),
        ("testMoveFolderInvalidDestStorageName", testMoveFolderInvalidDestStorageName),
        ("testMoveSection", testMoveSection),
        ("testMoveSectionInvalidName", testMoveSectionInvalidName),
        ("testMoveSectionInvalidSectionIndex", testMoveSectionInvalidSectionIndex),
        ("testMoveSectionInvalidNewPosition", testMoveSectionInvalidNewPosition),
        ("testMoveSectionInvalidPassword", testMoveSectionInvalidPassword),
        ("testMoveSectionInvalidFolder", testMoveSectionInvalidFolder),
        ("testMoveSectionInvalidStorage", testMoveSectionInvalidStorage),
        ("testMoveSlide", testMoveSlide),
        ("testMoveSlideInvalidName", testMoveSlideInvalidName),
        ("testMoveSlideInvalidSlideIndex", testMoveSlideInvalidSlideIndex),
        ("testMoveSlideInvalidNewPosition", testMoveSlideInvalidNewPosition),
        ("testMoveSlideInvalidPassword", testMoveSlideInvalidPassword),
        ("testMoveSlideInvalidFolder", testMoveSlideInvalidFolder),
        ("testMoveSlideInvalidStorage", testMoveSlideInvalidStorage),
        ("testNotesSlideExists", testNotesSlideExists),
        ("testNotesSlideExistsInvalidName", testNotesSlideExistsInvalidName),
        ("testNotesSlideExistsInvalidSlideIndex", testNotesSlideExistsInvalidSlideIndex),
        ("testNotesSlideExistsInvalidPassword", testNotesSlideExistsInvalidPassword),
        ("testNotesSlideExistsInvalidFolder", testNotesSlideExistsInvalidFolder),
        ("testNotesSlideExistsInvalidStorage", testNotesSlideExistsInvalidStorage),
        ("testNotesSlideExistsOnline", testNotesSlideExistsOnline),
        ("testNotesSlideExistsOnlineInvalidDocument", testNotesSlideExistsOnlineInvalidDocument),
        ("testNotesSlideExistsOnlineInvalidSlideIndex", testNotesSlideExistsOnlineInvalidSlideIndex),
        ("testNotesSlideExistsOnlineInvalidPassword", testNotesSlideExistsOnlineInvalidPassword),
        ("testObjectExists", testObjectExists),
        ("testObjectExistsInvalidPath", testObjectExistsInvalidPath),
        ("testObjectExistsInvalidStorageName", testObjectExistsInvalidStorageName),
        ("testObjectExistsInvalidVersionId", testObjectExistsInvalidVersionId),
        ("testOrderedMerge", testOrderedMerge),
        ("testOrderedMergeInvalidName", testOrderedMergeInvalidName),
        ("testOrderedMergeInvalidRequest", testOrderedMergeInvalidRequest),
        ("testOrderedMergeInvalidPassword", testOrderedMergeInvalidPassword),
        ("testOrderedMergeInvalidFolder", testOrderedMergeInvalidFolder),
        ("testOrderedMergeInvalidStorage", testOrderedMergeInvalidStorage),
        ("testPipeline", testPipeline),
        ("testPipelineInvalidPipeline", testPipelineInvalidPipeline),
        ("testPipelineInvalidFiles", testPipelineInvalidFiles),
        ("testReorderSlides", testReorderSlides),
        ("testReorderSlidesInvalidName", testReorderSlidesInvalidName),
        ("testReorderSlidesInvalidOldPositions", testReorderSlidesInvalidOldPositions),
        ("testReorderSlidesInvalidNewPositions", testReorderSlidesInvalidNewPositions),
        ("testReorderSlidesInvalidPassword", testReorderSlidesInvalidPassword),
        ("testReorderSlidesInvalidFolder", testReorderSlidesInvalidFolder),
        ("testReorderSlidesInvalidStorage", testReorderSlidesInvalidStorage),
        ("testReplacePresentationText", testReplacePresentationText),
        ("testReplacePresentationTextInvalidName", testReplacePresentationTextInvalidName),
        ("testReplacePresentationTextInvalidOldValue", testReplacePresentationTextInvalidOldValue),
        ("testReplacePresentationTextInvalidNewValue", testReplacePresentationTextInvalidNewValue),
        ("testReplacePresentationTextInvalidIgnoreCase", testReplacePresentationTextInvalidIgnoreCase),
        ("testReplacePresentationTextInvalidPassword", testReplacePresentationTextInvalidPassword),
        ("testReplacePresentationTextInvalidFolder", testReplacePresentationTextInvalidFolder),
        ("testReplacePresentationTextInvalidStorage", testReplacePresentationTextInvalidStorage),
        ("testReplacePresentationTextOnline", testReplacePresentationTextOnline),
        ("testReplacePresentationTextOnlineInvalidDocument", testReplacePresentationTextOnlineInvalidDocument),
        ("testReplacePresentationTextOnlineInvalidOldValue", testReplacePresentationTextOnlineInvalidOldValue),
        ("testReplacePresentationTextOnlineInvalidNewValue", testReplacePresentationTextOnlineInvalidNewValue),
        ("testReplacePresentationTextOnlineInvalidIgnoreCase", testReplacePresentationTextOnlineInvalidIgnoreCase),
        ("testReplacePresentationTextOnlineInvalidPassword", testReplacePresentationTextOnlineInvalidPassword),
        ("testReplaceSlideText", testReplaceSlideText),
        ("testReplaceSlideTextInvalidName", testReplaceSlideTextInvalidName),
        ("testReplaceSlideTextInvalidSlideIndex", testReplaceSlideTextInvalidSlideIndex),
        ("testReplaceSlideTextInvalidOldValue", testReplaceSlideTextInvalidOldValue),
        ("testReplaceSlideTextInvalidNewValue", testReplaceSlideTextInvalidNewValue),
        ("testReplaceSlideTextInvalidIgnoreCase", testReplaceSlideTextInvalidIgnoreCase),
        ("testReplaceSlideTextInvalidPassword", testReplaceSlideTextInvalidPassword),
        ("testReplaceSlideTextInvalidFolder", testReplaceSlideTextInvalidFolder),
        ("testReplaceSlideTextInvalidStorage", testReplaceSlideTextInvalidStorage),
        ("testReplaceSlideTextOnline", testReplaceSlideTextOnline),
        ("testReplaceSlideTextOnlineInvalidDocument", testReplaceSlideTextOnlineInvalidDocument),
        ("testReplaceSlideTextOnlineInvalidSlideIndex", testReplaceSlideTextOnlineInvalidSlideIndex),
        ("testReplaceSlideTextOnlineInvalidOldValue", testReplaceSlideTextOnlineInvalidOldValue),
        ("testReplaceSlideTextOnlineInvalidNewValue", testReplaceSlideTextOnlineInvalidNewValue),
        ("testReplaceSlideTextOnlineInvalidIgnoreCase", testReplaceSlideTextOnlineInvalidIgnoreCase),
        ("testReplaceSlideTextOnlineInvalidPassword", testReplaceSlideTextOnlineInvalidPassword),
        ("testSaveNotesSlideShape", testSaveNotesSlideShape),
        ("testSaveNotesSlideShapeInvalidName", testSaveNotesSlideShapeInvalidName),
        ("testSaveNotesSlideShapeInvalidSlideIndex", testSaveNotesSlideShapeInvalidSlideIndex),
        ("testSaveNotesSlideShapeInvalidShapeIndex", testSaveNotesSlideShapeInvalidShapeIndex),
        ("testSaveNotesSlideShapeInvalidFormat", testSaveNotesSlideShapeInvalidFormat),
        ("testSaveNotesSlideShapeInvalidOutPath", testSaveNotesSlideShapeInvalidOutPath),
        ("testSaveNotesSlideShapeInvalidOptions", testSaveNotesSlideShapeInvalidOptions),
        ("testSaveNotesSlideShapeInvalidScaleX", testSaveNotesSlideShapeInvalidScaleX),
        ("testSaveNotesSlideShapeInvalidScaleY", testSaveNotesSlideShapeInvalidScaleY),
        ("testSaveNotesSlideShapeInvalidBounds", testSaveNotesSlideShapeInvalidBounds),
        ("testSaveNotesSlideShapeInvalidPassword", testSaveNotesSlideShapeInvalidPassword),
        ("testSaveNotesSlideShapeInvalidFolder", testSaveNotesSlideShapeInvalidFolder),
        ("testSaveNotesSlideShapeInvalidStorage", testSaveNotesSlideShapeInvalidStorage),
        ("testSaveNotesSlideShapeInvalidFontsFolder", testSaveNotesSlideShapeInvalidFontsFolder),
        ("testSavePresentation", testSavePresentation),
        ("testSavePresentationInvalidName", testSavePresentationInvalidName),
        ("testSavePresentationInvalidFormat", testSavePresentationInvalidFormat),
        ("testSavePresentationInvalidOutPath", testSavePresentationInvalidOutPath),
        ("testSavePresentationInvalidOptions", testSavePresentationInvalidOptions),
        ("testSavePresentationInvalidPassword", testSavePresentationInvalidPassword),
        ("testSavePresentationInvalidFolder", testSavePresentationInvalidFolder),
        ("testSavePresentationInvalidStorage", testSavePresentationInvalidStorage),
        ("testSavePresentationInvalidFontsFolder", testSavePresentationInvalidFontsFolder),
        ("testSaveShape", testSaveShape),
        ("testSaveShapeInvalidName", testSaveShapeInvalidName),
        ("testSaveShapeInvalidSlideIndex", testSaveShapeInvalidSlideIndex),
        ("testSaveShapeInvalidShapeIndex", testSaveShapeInvalidShapeIndex),
        ("testSaveShapeInvalidFormat", testSaveShapeInvalidFormat),
        ("testSaveShapeInvalidOutPath", testSaveShapeInvalidOutPath),
        ("testSaveShapeInvalidOptions", testSaveShapeInvalidOptions),
        ("testSaveShapeInvalidScaleX", testSaveShapeInvalidScaleX),
        ("testSaveShapeInvalidScaleY", testSaveShapeInvalidScaleY),
        ("testSaveShapeInvalidBounds", testSaveShapeInvalidBounds),
        ("testSaveShapeInvalidPassword", testSaveShapeInvalidPassword),
        ("testSaveShapeInvalidFolder", testSaveShapeInvalidFolder),
        ("testSaveShapeInvalidStorage", testSaveShapeInvalidStorage),
        ("testSaveShapeInvalidFontsFolder", testSaveShapeInvalidFontsFolder),
        ("testSaveShapeOnline", testSaveShapeOnline),
        ("testSaveShapeOnlineInvalidDocument", testSaveShapeOnlineInvalidDocument),
        ("testSaveShapeOnlineInvalidSlideIndex", testSaveShapeOnlineInvalidSlideIndex),
        ("testSaveShapeOnlineInvalidShapeIndex", testSaveShapeOnlineInvalidShapeIndex),
        ("testSaveShapeOnlineInvalidFormat", testSaveShapeOnlineInvalidFormat),
        ("testSaveShapeOnlineInvalidOutPath", testSaveShapeOnlineInvalidOutPath),
        ("testSaveShapeOnlineInvalidScaleX", testSaveShapeOnlineInvalidScaleX),
        ("testSaveShapeOnlineInvalidScaleY", testSaveShapeOnlineInvalidScaleY),
        ("testSaveShapeOnlineInvalidBounds", testSaveShapeOnlineInvalidBounds),
        ("testSaveShapeOnlineInvalidPassword", testSaveShapeOnlineInvalidPassword),
        ("testSaveShapeOnlineInvalidStorage", testSaveShapeOnlineInvalidStorage),
        ("testSaveShapeOnlineInvalidFontsFolder", testSaveShapeOnlineInvalidFontsFolder),
        ("testSaveSlide", testSaveSlide),
        ("testSaveSlideInvalidName", testSaveSlideInvalidName),
        ("testSaveSlideInvalidSlideIndex", testSaveSlideInvalidSlideIndex),
        ("testSaveSlideInvalidFormat", testSaveSlideInvalidFormat),
        ("testSaveSlideInvalidOutPath", testSaveSlideInvalidOutPath),
        ("testSaveSlideInvalidOptions", testSaveSlideInvalidOptions),
        ("testSaveSlideInvalidWidth", testSaveSlideInvalidWidth),
        ("testSaveSlideInvalidHeight", testSaveSlideInvalidHeight),
        ("testSaveSlideInvalidPassword", testSaveSlideInvalidPassword),
        ("testSaveSlideInvalidFolder", testSaveSlideInvalidFolder),
        ("testSaveSlideInvalidStorage", testSaveSlideInvalidStorage),
        ("testSaveSlideInvalidFontsFolder", testSaveSlideInvalidFontsFolder),
        ("testSaveSlideOnline", testSaveSlideOnline),
        ("testSaveSlideOnlineInvalidDocument", testSaveSlideOnlineInvalidDocument),
        ("testSaveSlideOnlineInvalidSlideIndex", testSaveSlideOnlineInvalidSlideIndex),
        ("testSaveSlideOnlineInvalidFormat", testSaveSlideOnlineInvalidFormat),
        ("testSaveSlideOnlineInvalidOutPath", testSaveSlideOnlineInvalidOutPath),
        ("testSaveSlideOnlineInvalidWidth", testSaveSlideOnlineInvalidWidth),
        ("testSaveSlideOnlineInvalidHeight", testSaveSlideOnlineInvalidHeight),
        ("testSaveSlideOnlineInvalidPassword", testSaveSlideOnlineInvalidPassword),
        ("testSaveSlideOnlineInvalidStorage", testSaveSlideOnlineInvalidStorage),
        ("testSaveSlideOnlineInvalidFontsFolder", testSaveSlideOnlineInvalidFontsFolder),
        ("testSaveSubshape", testSaveSubshape),
        ("testSaveSubshapeInvalidName", testSaveSubshapeInvalidName),
        ("testSaveSubshapeInvalidSlideIndex", testSaveSubshapeInvalidSlideIndex),
        ("testSaveSubshapeInvalidPath", testSaveSubshapeInvalidPath),
        ("testSaveSubshapeInvalidShapeIndex", testSaveSubshapeInvalidShapeIndex),
        ("testSaveSubshapeInvalidFormat", testSaveSubshapeInvalidFormat),
        ("testSaveSubshapeInvalidOutPath", testSaveSubshapeInvalidOutPath),
        ("testSaveSubshapeInvalidOptions", testSaveSubshapeInvalidOptions),
        ("testSaveSubshapeInvalidScaleX", testSaveSubshapeInvalidScaleX),
        ("testSaveSubshapeInvalidScaleY", testSaveSubshapeInvalidScaleY),
        ("testSaveSubshapeInvalidBounds", testSaveSubshapeInvalidBounds),
        ("testSaveSubshapeInvalidPassword", testSaveSubshapeInvalidPassword),
        ("testSaveSubshapeInvalidFolder", testSaveSubshapeInvalidFolder),
        ("testSaveSubshapeInvalidStorage", testSaveSubshapeInvalidStorage),
        ("testSaveSubshapeInvalidFontsFolder", testSaveSubshapeInvalidFontsFolder),
        ("testSetAnimation", testSetAnimation),
        ("testSetAnimationInvalidName", testSetAnimationInvalidName),
        ("testSetAnimationInvalidSlideIndex", testSetAnimationInvalidSlideIndex),
        ("testSetAnimationInvalidAnimation", testSetAnimationInvalidAnimation),
        ("testSetAnimationInvalidPassword", testSetAnimationInvalidPassword),
        ("testSetAnimationInvalidFolder", testSetAnimationInvalidFolder),
        ("testSetAnimationInvalidStorage", testSetAnimationInvalidStorage),
        ("testSetBackground", testSetBackground),
        ("testSetBackgroundInvalidName", testSetBackgroundInvalidName),
        ("testSetBackgroundInvalidSlideIndex", testSetBackgroundInvalidSlideIndex),
        ("testSetBackgroundInvalidBackground", testSetBackgroundInvalidBackground),
        ("testSetBackgroundInvalidPassword", testSetBackgroundInvalidPassword),
        ("testSetBackgroundInvalidFolder", testSetBackgroundInvalidFolder),
        ("testSetBackgroundInvalidStorage", testSetBackgroundInvalidStorage),
        ("testSetBackgroundColor", testSetBackgroundColor),
        ("testSetBackgroundColorInvalidName", testSetBackgroundColorInvalidName),
        ("testSetBackgroundColorInvalidSlideIndex", testSetBackgroundColorInvalidSlideIndex),
        ("testSetBackgroundColorInvalidColor", testSetBackgroundColorInvalidColor),
        ("testSetBackgroundColorInvalidPassword", testSetBackgroundColorInvalidPassword),
        ("testSetBackgroundColorInvalidFolder", testSetBackgroundColorInvalidFolder),
        ("testSetBackgroundColorInvalidStorage", testSetBackgroundColorInvalidStorage),
        ("testSetDocumentProperties", testSetDocumentProperties),
        ("testSetDocumentPropertiesInvalidName", testSetDocumentPropertiesInvalidName),
        ("testSetDocumentPropertiesInvalidProperties", testSetDocumentPropertiesInvalidProperties),
        ("testSetDocumentPropertiesInvalidPassword", testSetDocumentPropertiesInvalidPassword),
        ("testSetDocumentPropertiesInvalidFolder", testSetDocumentPropertiesInvalidFolder),
        ("testSetDocumentPropertiesInvalidStorage", testSetDocumentPropertiesInvalidStorage),
        ("testSetDocumentProperty", testSetDocumentProperty),
        ("testSetDocumentPropertyInvalidName", testSetDocumentPropertyInvalidName),
        ("testSetDocumentPropertyInvalidPropertyName", testSetDocumentPropertyInvalidPropertyName),
        ("testSetDocumentPropertyInvalidProperty", testSetDocumentPropertyInvalidProperty),
        ("testSetDocumentPropertyInvalidPassword", testSetDocumentPropertyInvalidPassword),
        ("testSetDocumentPropertyInvalidFolder", testSetDocumentPropertyInvalidFolder),
        ("testSetDocumentPropertyInvalidStorage", testSetDocumentPropertyInvalidStorage),
        ("testSetNotesSlideHeaderFooter", testSetNotesSlideHeaderFooter),
        ("testSetNotesSlideHeaderFooterInvalidName", testSetNotesSlideHeaderFooterInvalidName),
        ("testSetNotesSlideHeaderFooterInvalidSlideIndex", testSetNotesSlideHeaderFooterInvalidSlideIndex),
        ("testSetNotesSlideHeaderFooterInvalidDto", testSetNotesSlideHeaderFooterInvalidDto),
        ("testSetNotesSlideHeaderFooterInvalidPassword", testSetNotesSlideHeaderFooterInvalidPassword),
        ("testSetNotesSlideHeaderFooterInvalidFolder", testSetNotesSlideHeaderFooterInvalidFolder),
        ("testSetNotesSlideHeaderFooterInvalidStorage", testSetNotesSlideHeaderFooterInvalidStorage),
        ("testSetPresentationHeaderFooter", testSetPresentationHeaderFooter),
        ("testSetPresentationHeaderFooterInvalidName", testSetPresentationHeaderFooterInvalidName),
        ("testSetPresentationHeaderFooterInvalidDto", testSetPresentationHeaderFooterInvalidDto),
        ("testSetPresentationHeaderFooterInvalidPassword", testSetPresentationHeaderFooterInvalidPassword),
        ("testSetPresentationHeaderFooterInvalidFolder", testSetPresentationHeaderFooterInvalidFolder),
        ("testSetPresentationHeaderFooterInvalidStorage", testSetPresentationHeaderFooterInvalidStorage),
        ("testSetProtection", testSetProtection),
        ("testSetProtectionInvalidName", testSetProtectionInvalidName),
        ("testSetProtectionInvalidDto", testSetProtectionInvalidDto),
        ("testSetProtectionInvalidPassword", testSetProtectionInvalidPassword),
        ("testSetProtectionInvalidFolder", testSetProtectionInvalidFolder),
        ("testSetProtectionInvalidStorage", testSetProtectionInvalidStorage),
        ("testSetProtectionOnline", testSetProtectionOnline),
        ("testSetProtectionOnlineInvalidDocument", testSetProtectionOnlineInvalidDocument),
        ("testSetProtectionOnlineInvalidDto", testSetProtectionOnlineInvalidDto),
        ("testSetProtectionOnlineInvalidPassword", testSetProtectionOnlineInvalidPassword),
        ("testSetSections", testSetSections),
        ("testSetSectionsInvalidName", testSetSectionsInvalidName),
        ("testSetSectionsInvalidSections", testSetSectionsInvalidSections),
        ("testSetSectionsInvalidPassword", testSetSectionsInvalidPassword),
        ("testSetSectionsInvalidFolder", testSetSectionsInvalidFolder),
        ("testSetSectionsInvalidStorage", testSetSectionsInvalidStorage),
        ("testSetSlideHeaderFooter", testSetSlideHeaderFooter),
        ("testSetSlideHeaderFooterInvalidName", testSetSlideHeaderFooterInvalidName),
        ("testSetSlideHeaderFooterInvalidSlideIndex", testSetSlideHeaderFooterInvalidSlideIndex),
        ("testSetSlideHeaderFooterInvalidDto", testSetSlideHeaderFooterInvalidDto),
        ("testSetSlideHeaderFooterInvalidPassword", testSetSlideHeaderFooterInvalidPassword),
        ("testSetSlideHeaderFooterInvalidFolder", testSetSlideHeaderFooterInvalidFolder),
        ("testSetSlideHeaderFooterInvalidStorage", testSetSlideHeaderFooterInvalidStorage),
        ("testSetSlideProperties", testSetSlideProperties),
        ("testSetSlidePropertiesInvalidName", testSetSlidePropertiesInvalidName),
        ("testSetSlidePropertiesInvalidDto", testSetSlidePropertiesInvalidDto),
        ("testSetSlidePropertiesInvalidPassword", testSetSlidePropertiesInvalidPassword),
        ("testSetSlidePropertiesInvalidFolder", testSetSlidePropertiesInvalidFolder),
        ("testSetSlidePropertiesInvalidStorage", testSetSlidePropertiesInvalidStorage),
        ("testSetViewProperties", testSetViewProperties),
        ("testSetViewPropertiesInvalidName", testSetViewPropertiesInvalidName),
        ("testSetViewPropertiesInvalidDto", testSetViewPropertiesInvalidDto),
        ("testSetViewPropertiesInvalidPassword", testSetViewPropertiesInvalidPassword),
        ("testSetViewPropertiesInvalidFolder", testSetViewPropertiesInvalidFolder),
        ("testSetViewPropertiesInvalidStorage", testSetViewPropertiesInvalidStorage),
        ("testSplit", testSplit),
        ("testSplitInvalidName", testSplitInvalidName),
        ("testSplitInvalidOptions", testSplitInvalidOptions),
        ("testSplitInvalidFormat", testSplitInvalidFormat),
        ("testSplitInvalidWidth", testSplitInvalidWidth),
        ("testSplitInvalidHeight", testSplitInvalidHeight),
        ("testSplitInvalidFrom", testSplitInvalidFrom),
        ("testSplitInvalidTo", testSplitInvalidTo),
        ("testSplitInvalidDestFolder", testSplitInvalidDestFolder),
        ("testSplitInvalidPassword", testSplitInvalidPassword),
        ("testSplitInvalidFolder", testSplitInvalidFolder),
        ("testSplitInvalidStorage", testSplitInvalidStorage),
        ("testSplitInvalidFontsFolder", testSplitInvalidFontsFolder),
        ("testSplitAndSaveOnline", testSplitAndSaveOnline),
        ("testSplitAndSaveOnlineInvalidDocument", testSplitAndSaveOnlineInvalidDocument),
        ("testSplitAndSaveOnlineInvalidFormat", testSplitAndSaveOnlineInvalidFormat),
        ("testSplitAndSaveOnlineInvalidDestFolder", testSplitAndSaveOnlineInvalidDestFolder),
        ("testSplitAndSaveOnlineInvalidWidth", testSplitAndSaveOnlineInvalidWidth),
        ("testSplitAndSaveOnlineInvalidHeight", testSplitAndSaveOnlineInvalidHeight),
        ("testSplitAndSaveOnlineInvalidFrom", testSplitAndSaveOnlineInvalidFrom),
        ("testSplitAndSaveOnlineInvalidTo", testSplitAndSaveOnlineInvalidTo),
        ("testSplitAndSaveOnlineInvalidPassword", testSplitAndSaveOnlineInvalidPassword),
        ("testSplitAndSaveOnlineInvalidStorage", testSplitAndSaveOnlineInvalidStorage),
        ("testSplitAndSaveOnlineInvalidFontsFolder", testSplitAndSaveOnlineInvalidFontsFolder),
        ("testSplitOnline", testSplitOnline),
        ("testSplitOnlineInvalidDocument", testSplitOnlineInvalidDocument),
        ("testSplitOnlineInvalidFormat", testSplitOnlineInvalidFormat),
        ("testSplitOnlineInvalidWidth", testSplitOnlineInvalidWidth),
        ("testSplitOnlineInvalidHeight", testSplitOnlineInvalidHeight),
        ("testSplitOnlineInvalidFrom", testSplitOnlineInvalidFrom),
        ("testSplitOnlineInvalidTo", testSplitOnlineInvalidTo),
        ("testSplitOnlineInvalidPassword", testSplitOnlineInvalidPassword),
        ("testSplitOnlineInvalidStorage", testSplitOnlineInvalidStorage),
        ("testSplitOnlineInvalidFontsFolder", testSplitOnlineInvalidFontsFolder),
        ("testStorageExists", testStorageExists),
        ("testStorageExistsInvalidStorageName", testStorageExistsInvalidStorageName),
        ("testUpdateAnimationEffect", testUpdateAnimationEffect),
        ("testUpdateAnimationEffectInvalidName", testUpdateAnimationEffectInvalidName),
        ("testUpdateAnimationEffectInvalidSlideIndex", testUpdateAnimationEffectInvalidSlideIndex),
        ("testUpdateAnimationEffectInvalidEffectIndex", testUpdateAnimationEffectInvalidEffectIndex),
        ("testUpdateAnimationEffectInvalidEffect", testUpdateAnimationEffectInvalidEffect),
        ("testUpdateAnimationEffectInvalidPassword", testUpdateAnimationEffectInvalidPassword),
        ("testUpdateAnimationEffectInvalidFolder", testUpdateAnimationEffectInvalidFolder),
        ("testUpdateAnimationEffectInvalidStorage", testUpdateAnimationEffectInvalidStorage),
        ("testUpdateAnimationInteractiveSequenceEffect", testUpdateAnimationInteractiveSequenceEffect),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidName", testUpdateAnimationInteractiveSequenceEffectInvalidName),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidSlideIndex", testUpdateAnimationInteractiveSequenceEffectInvalidSlideIndex),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidSequenceIndex", testUpdateAnimationInteractiveSequenceEffectInvalidSequenceIndex),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidEffectIndex", testUpdateAnimationInteractiveSequenceEffectInvalidEffectIndex),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidEffect", testUpdateAnimationInteractiveSequenceEffectInvalidEffect),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidPassword", testUpdateAnimationInteractiveSequenceEffectInvalidPassword),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidFolder", testUpdateAnimationInteractiveSequenceEffectInvalidFolder),
        ("testUpdateAnimationInteractiveSequenceEffectInvalidStorage", testUpdateAnimationInteractiveSequenceEffectInvalidStorage),
        ("testUpdateChartCategory", testUpdateChartCategory),
        ("testUpdateChartCategoryInvalidName", testUpdateChartCategoryInvalidName),
        ("testUpdateChartCategoryInvalidSlideIndex", testUpdateChartCategoryInvalidSlideIndex),
        ("testUpdateChartCategoryInvalidShapeIndex", testUpdateChartCategoryInvalidShapeIndex),
        ("testUpdateChartCategoryInvalidCategoryIndex", testUpdateChartCategoryInvalidCategoryIndex),
        ("testUpdateChartCategoryInvalidCategory", testUpdateChartCategoryInvalidCategory),
        ("testUpdateChartCategoryInvalidPassword", testUpdateChartCategoryInvalidPassword),
        ("testUpdateChartCategoryInvalidFolder", testUpdateChartCategoryInvalidFolder),
        ("testUpdateChartCategoryInvalidStorage", testUpdateChartCategoryInvalidStorage),
        ("testUpdateChartDataPoint", testUpdateChartDataPoint),
        ("testUpdateChartDataPointInvalidName", testUpdateChartDataPointInvalidName),
        ("testUpdateChartDataPointInvalidSlideIndex", testUpdateChartDataPointInvalidSlideIndex),
        ("testUpdateChartDataPointInvalidShapeIndex", testUpdateChartDataPointInvalidShapeIndex),
        ("testUpdateChartDataPointInvalidSeriesIndex", testUpdateChartDataPointInvalidSeriesIndex),
        ("testUpdateChartDataPointInvalidPointIndex", testUpdateChartDataPointInvalidPointIndex),
        ("testUpdateChartDataPointInvalidDataPoint", testUpdateChartDataPointInvalidDataPoint),
        ("testUpdateChartDataPointInvalidPassword", testUpdateChartDataPointInvalidPassword),
        ("testUpdateChartDataPointInvalidFolder", testUpdateChartDataPointInvalidFolder),
        ("testUpdateChartDataPointInvalidStorage", testUpdateChartDataPointInvalidStorage),
        ("testUpdateChartSeries", testUpdateChartSeries),
        ("testUpdateChartSeriesInvalidName", testUpdateChartSeriesInvalidName),
        ("testUpdateChartSeriesInvalidSlideIndex", testUpdateChartSeriesInvalidSlideIndex),
        ("testUpdateChartSeriesInvalidShapeIndex", testUpdateChartSeriesInvalidShapeIndex),
        ("testUpdateChartSeriesInvalidSeriesIndex", testUpdateChartSeriesInvalidSeriesIndex),
        ("testUpdateChartSeriesInvalidSeries", testUpdateChartSeriesInvalidSeries),
        ("testUpdateChartSeriesInvalidPassword", testUpdateChartSeriesInvalidPassword),
        ("testUpdateChartSeriesInvalidFolder", testUpdateChartSeriesInvalidFolder),
        ("testUpdateChartSeriesInvalidStorage", testUpdateChartSeriesInvalidStorage),
        ("testUpdateLayoutSlide", testUpdateLayoutSlide),
        ("testUpdateLayoutSlideInvalidName", testUpdateLayoutSlideInvalidName),
        ("testUpdateLayoutSlideInvalidSlideIndex", testUpdateLayoutSlideInvalidSlideIndex),
        ("testUpdateLayoutSlideInvalidSlideDto", testUpdateLayoutSlideInvalidSlideDto),
        ("testUpdateLayoutSlideInvalidPassword", testUpdateLayoutSlideInvalidPassword),
        ("testUpdateLayoutSlideInvalidFolder", testUpdateLayoutSlideInvalidFolder),
        ("testUpdateLayoutSlideInvalidStorage", testUpdateLayoutSlideInvalidStorage),
        ("testUpdateNotesSlide", testUpdateNotesSlide),
        ("testUpdateNotesSlideInvalidName", testUpdateNotesSlideInvalidName),
        ("testUpdateNotesSlideInvalidSlideIndex", testUpdateNotesSlideInvalidSlideIndex),
        ("testUpdateNotesSlideInvalidDto", testUpdateNotesSlideInvalidDto),
        ("testUpdateNotesSlideInvalidPassword", testUpdateNotesSlideInvalidPassword),
        ("testUpdateNotesSlideInvalidFolder", testUpdateNotesSlideInvalidFolder),
        ("testUpdateNotesSlideInvalidStorage", testUpdateNotesSlideInvalidStorage),
        ("testUpdateNotesSlideParagraph", testUpdateNotesSlideParagraph),
        ("testUpdateNotesSlideParagraphInvalidName", testUpdateNotesSlideParagraphInvalidName),
        ("testUpdateNotesSlideParagraphInvalidSlideIndex", testUpdateNotesSlideParagraphInvalidSlideIndex),
        ("testUpdateNotesSlideParagraphInvalidShapeIndex", testUpdateNotesSlideParagraphInvalidShapeIndex),
        ("testUpdateNotesSlideParagraphInvalidParagraphIndex", testUpdateNotesSlideParagraphInvalidParagraphIndex),
        ("testUpdateNotesSlideParagraphInvalidDto", testUpdateNotesSlideParagraphInvalidDto),
        ("testUpdateNotesSlideParagraphInvalidPassword", testUpdateNotesSlideParagraphInvalidPassword),
        ("testUpdateNotesSlideParagraphInvalidFolder", testUpdateNotesSlideParagraphInvalidFolder),
        ("testUpdateNotesSlideParagraphInvalidStorage", testUpdateNotesSlideParagraphInvalidStorage),
        ("testUpdateNotesSlidePortion", testUpdateNotesSlidePortion),
        ("testUpdateNotesSlidePortionInvalidName", testUpdateNotesSlidePortionInvalidName),
        ("testUpdateNotesSlidePortionInvalidSlideIndex", testUpdateNotesSlidePortionInvalidSlideIndex),
        ("testUpdateNotesSlidePortionInvalidShapeIndex", testUpdateNotesSlidePortionInvalidShapeIndex),
        ("testUpdateNotesSlidePortionInvalidParagraphIndex", testUpdateNotesSlidePortionInvalidParagraphIndex),
        ("testUpdateNotesSlidePortionInvalidPortionIndex", testUpdateNotesSlidePortionInvalidPortionIndex),
        ("testUpdateNotesSlidePortionInvalidDto", testUpdateNotesSlidePortionInvalidDto),
        ("testUpdateNotesSlidePortionInvalidPassword", testUpdateNotesSlidePortionInvalidPassword),
        ("testUpdateNotesSlidePortionInvalidFolder", testUpdateNotesSlidePortionInvalidFolder),
        ("testUpdateNotesSlidePortionInvalidStorage", testUpdateNotesSlidePortionInvalidStorage),
        ("testUpdateNotesSlideShape", testUpdateNotesSlideShape),
        ("testUpdateNotesSlideShapeInvalidName", testUpdateNotesSlideShapeInvalidName),
        ("testUpdateNotesSlideShapeInvalidSlideIndex", testUpdateNotesSlideShapeInvalidSlideIndex),
        ("testUpdateNotesSlideShapeInvalidShapeIndex", testUpdateNotesSlideShapeInvalidShapeIndex),
        ("testUpdateNotesSlideShapeInvalidDto", testUpdateNotesSlideShapeInvalidDto),
        ("testUpdateNotesSlideShapeInvalidPassword", testUpdateNotesSlideShapeInvalidPassword),
        ("testUpdateNotesSlideShapeInvalidFolder", testUpdateNotesSlideShapeInvalidFolder),
        ("testUpdateNotesSlideShapeInvalidStorage", testUpdateNotesSlideShapeInvalidStorage),
        ("testUpdateParagraph", testUpdateParagraph),
        ("testUpdateParagraphInvalidName", testUpdateParagraphInvalidName),
        ("testUpdateParagraphInvalidSlideIndex", testUpdateParagraphInvalidSlideIndex),
        ("testUpdateParagraphInvalidShapeIndex", testUpdateParagraphInvalidShapeIndex),
        ("testUpdateParagraphInvalidParagraphIndex", testUpdateParagraphInvalidParagraphIndex),
        ("testUpdateParagraphInvalidDto", testUpdateParagraphInvalidDto),
        ("testUpdateParagraphInvalidPassword", testUpdateParagraphInvalidPassword),
        ("testUpdateParagraphInvalidFolder", testUpdateParagraphInvalidFolder),
        ("testUpdateParagraphInvalidStorage", testUpdateParagraphInvalidStorage),
        ("testUpdatePortion", testUpdatePortion),
        ("testUpdatePortionInvalidName", testUpdatePortionInvalidName),
        ("testUpdatePortionInvalidSlideIndex", testUpdatePortionInvalidSlideIndex),
        ("testUpdatePortionInvalidShapeIndex", testUpdatePortionInvalidShapeIndex),
        ("testUpdatePortionInvalidParagraphIndex", testUpdatePortionInvalidParagraphIndex),
        ("testUpdatePortionInvalidPortionIndex", testUpdatePortionInvalidPortionIndex),
        ("testUpdatePortionInvalidDto", testUpdatePortionInvalidDto),
        ("testUpdatePortionInvalidPassword", testUpdatePortionInvalidPassword),
        ("testUpdatePortionInvalidFolder", testUpdatePortionInvalidFolder),
        ("testUpdatePortionInvalidStorage", testUpdatePortionInvalidStorage),
        ("testUpdateSection", testUpdateSection),
        ("testUpdateSectionInvalidName", testUpdateSectionInvalidName),
        ("testUpdateSectionInvalidSectionIndex", testUpdateSectionInvalidSectionIndex),
        ("testUpdateSectionInvalidSectionName", testUpdateSectionInvalidSectionName),
        ("testUpdateSectionInvalidPassword", testUpdateSectionInvalidPassword),
        ("testUpdateSectionInvalidFolder", testUpdateSectionInvalidFolder),
        ("testUpdateSectionInvalidStorage", testUpdateSectionInvalidStorage),
        ("testUpdateShape", testUpdateShape),
        ("testUpdateShapeInvalidName", testUpdateShapeInvalidName),
        ("testUpdateShapeInvalidSlideIndex", testUpdateShapeInvalidSlideIndex),
        ("testUpdateShapeInvalidShapeIndex", testUpdateShapeInvalidShapeIndex),
        ("testUpdateShapeInvalidDto", testUpdateShapeInvalidDto),
        ("testUpdateShapeInvalidPassword", testUpdateShapeInvalidPassword),
        ("testUpdateShapeInvalidFolder", testUpdateShapeInvalidFolder),
        ("testUpdateShapeInvalidStorage", testUpdateShapeInvalidStorage),
        ("testUpdateSlide", testUpdateSlide),
        ("testUpdateSlideInvalidName", testUpdateSlideInvalidName),
        ("testUpdateSlideInvalidSlideIndex", testUpdateSlideInvalidSlideIndex),
        ("testUpdateSlideInvalidSlideDto", testUpdateSlideInvalidSlideDto),
        ("testUpdateSlideInvalidPassword", testUpdateSlideInvalidPassword),
        ("testUpdateSlideInvalidFolder", testUpdateSlideInvalidFolder),
        ("testUpdateSlideInvalidStorage", testUpdateSlideInvalidStorage),
        ("testUpdateSubshape", testUpdateSubshape),
        ("testUpdateSubshapeInvalidName", testUpdateSubshapeInvalidName),
        ("testUpdateSubshapeInvalidSlideIndex", testUpdateSubshapeInvalidSlideIndex),
        ("testUpdateSubshapeInvalidPath", testUpdateSubshapeInvalidPath),
        ("testUpdateSubshapeInvalidShapeIndex", testUpdateSubshapeInvalidShapeIndex),
        ("testUpdateSubshapeInvalidDto", testUpdateSubshapeInvalidDto),
        ("testUpdateSubshapeInvalidPassword", testUpdateSubshapeInvalidPassword),
        ("testUpdateSubshapeInvalidFolder", testUpdateSubshapeInvalidFolder),
        ("testUpdateSubshapeInvalidStorage", testUpdateSubshapeInvalidStorage),
        ("testUpdateSubshapeParagraph", testUpdateSubshapeParagraph),
        ("testUpdateSubshapeParagraphInvalidName", testUpdateSubshapeParagraphInvalidName),
        ("testUpdateSubshapeParagraphInvalidSlideIndex", testUpdateSubshapeParagraphInvalidSlideIndex),
        ("testUpdateSubshapeParagraphInvalidPath", testUpdateSubshapeParagraphInvalidPath),
        ("testUpdateSubshapeParagraphInvalidShapeIndex", testUpdateSubshapeParagraphInvalidShapeIndex),
        ("testUpdateSubshapeParagraphInvalidParagraphIndex", testUpdateSubshapeParagraphInvalidParagraphIndex),
        ("testUpdateSubshapeParagraphInvalidDto", testUpdateSubshapeParagraphInvalidDto),
        ("testUpdateSubshapeParagraphInvalidPassword", testUpdateSubshapeParagraphInvalidPassword),
        ("testUpdateSubshapeParagraphInvalidFolder", testUpdateSubshapeParagraphInvalidFolder),
        ("testUpdateSubshapeParagraphInvalidStorage", testUpdateSubshapeParagraphInvalidStorage),
        ("testUpdateSubshapePortion", testUpdateSubshapePortion),
        ("testUpdateSubshapePortionInvalidName", testUpdateSubshapePortionInvalidName),
        ("testUpdateSubshapePortionInvalidSlideIndex", testUpdateSubshapePortionInvalidSlideIndex),
        ("testUpdateSubshapePortionInvalidPath", testUpdateSubshapePortionInvalidPath),
        ("testUpdateSubshapePortionInvalidShapeIndex", testUpdateSubshapePortionInvalidShapeIndex),
        ("testUpdateSubshapePortionInvalidParagraphIndex", testUpdateSubshapePortionInvalidParagraphIndex),
        ("testUpdateSubshapePortionInvalidPortionIndex", testUpdateSubshapePortionInvalidPortionIndex),
        ("testUpdateSubshapePortionInvalidDto", testUpdateSubshapePortionInvalidDto),
        ("testUpdateSubshapePortionInvalidPassword", testUpdateSubshapePortionInvalidPassword),
        ("testUpdateSubshapePortionInvalidFolder", testUpdateSubshapePortionInvalidFolder),
        ("testUpdateSubshapePortionInvalidStorage", testUpdateSubshapePortionInvalidStorage),
        ("testUploadFile", testUploadFile),
        ("testUploadFileInvalidPath", testUploadFileInvalidPath),
        ("testUploadFileInvalidFile", testUploadFileInvalidFile),
        ("testUploadFileInvalidStorageName", testUploadFileInvalidStorageName),
    ];
    
    internal let testTimeout: TimeInterval = 200.0 

    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        super.tearDown()
    }    
    
    func testAlignShapes() {
        let expectation = self.expectation(description: "testalignShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        let paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        let paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        TestUtils.initialize("alignShapes") { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidName() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("alignShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("alignShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidAlignmentType() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramAlignmentType = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "alignmentType", value: paramAlignmentType as Any, type: "String")
        TestUtils.initialize("alignShapes", "alignmentType", paramAlignmentType) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "alignmentType", parameterValue: paramAlignmentType as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidAlignToSlide() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramAlignToSlide = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "alignToSlide", value: paramAlignToSlide as Any, type: "Bool")
        TestUtils.initialize("alignShapes", "alignToSlide", paramAlignToSlide) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "alignToSlide", parameterValue: paramAlignToSlide as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidShapes() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("alignShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidPassword() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("alignShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidFolder() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("alignShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testAlignShapesInvalidStorage() {
        let expectation = self.expectation(description: "testalignShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "alignShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "alignShapes", name: "slideIndex", type: "Int")
        var paramAlignmentType : String = TestUtils.getTestValue(functionName: "alignShapes", name: "alignmentType", type: "String")
        var paramAlignToSlide : Bool = TestUtils.getTestValue(functionName: "alignShapes", name: "alignToSlide", type: "Bool")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "alignShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "alignShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "alignShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "alignShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "alignShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("alignShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.alignShapes(paramName, paramSlideIndex, paramAlignmentType, paramAlignToSlide, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "alignShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testConvert() {
        let expectation = self.expectation(description: "testconvert")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "convert", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "convert", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "convert", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "convert", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "convert", name: "fontsFolder", type: "String")
        TestUtils.initialize("convert") { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidDocument() {
        let expectation = self.expectation(description: "testconvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convert", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "convert", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("convert", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidFormat() {
        let expectation = self.expectation(description: "testconvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convert", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "convert", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("convert", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidPassword() {
        let expectation = self.expectation(description: "testconvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convert", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "convert", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("convert", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidStorage() {
        let expectation = self.expectation(description: "testconvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convert", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "convert", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("convert", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertInvalidFontsFolder() {
        let expectation = self.expectation(description: "testconvert")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convert", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convert", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convert", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convert", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convert", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "convert", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("convert", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.convert(paramDocument, paramFormat, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convert", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testConvertAndSave() {
        let expectation = self.expectation(description: "testconvertAndSave")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        TestUtils.initialize("convertAndSave") { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidDocument() {
        let expectation = self.expectation(description: "testconvertAndSave")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "convertAndSave", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("convertAndSave", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidFormat() {
        let expectation = self.expectation(description: "testconvertAndSave")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "convertAndSave", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("convertAndSave", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidOutPath() {
        let expectation = self.expectation(description: "testconvertAndSave")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "convertAndSave", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("convertAndSave", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidPassword() {
        let expectation = self.expectation(description: "testconvertAndSave")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "convertAndSave", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("convertAndSave", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidStorage() {
        let expectation = self.expectation(description: "testconvertAndSave")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "convertAndSave", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("convertAndSave", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testConvertAndSaveInvalidFontsFolder() {
        let expectation = self.expectation(description: "testconvertAndSave")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "convertAndSave", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "outPath", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "convertAndSave", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "convertAndSave", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("convertAndSave", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.convertAndSave(paramDocument, paramFormat, paramOutPath, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "convertAndSave", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyFile() {
        let expectation = self.expectation(description: "testcopyFile")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        TestUtils.initialize("copyFile") { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("copyFile", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("copyFile", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("copyFile", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFileInvalidVersionId() {
        let expectation = self.expectation(description: "testcopyFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "copyFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "copyFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("copyFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.copyFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyFolder() {
        let expectation = self.expectation(description: "testcopyFolder")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        TestUtils.initialize("copyFolder") { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("copyFolder", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testcopyFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "copyFolder", name: "destStorageName", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "copyFolder", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("copyFolder", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.copyFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyFolder", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyLayoutSlide() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        let paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("copyLayoutSlide") { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("copyLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFrom() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramCloneFrom = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", value: paramCloneFrom as Any, type: "String")
        TestUtils.initialize("copyLayoutSlide", "cloneFrom", paramCloneFrom) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFrom", parameterValue: paramCloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramCloneFromPosition = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", value: paramCloneFromPosition as Any, type: "Int")
        TestUtils.initialize("copyLayoutSlide", "cloneFromPosition", paramCloneFromPosition) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFromPosition", parameterValue: paramCloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramCloneFromPassword = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", value: paramCloneFromPassword as Any, type: "String")
        TestUtils.initialize("copyLayoutSlide", "cloneFromPassword", paramCloneFromPassword) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFromPassword", parameterValue: paramCloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramCloneFromStorage = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", value: paramCloneFromStorage as Any, type: "String")
        TestUtils.initialize("copyLayoutSlide", "cloneFromStorage", paramCloneFromStorage) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "cloneFromStorage", parameterValue: paramCloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("copyLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("copyLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcopyLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "cloneFromStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyLayoutSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "copyLayoutSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("copyLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copyLayoutSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopyMasterSlide() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        let paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        let paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        let paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        let paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        let paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        TestUtils.initialize("copyMasterSlide") { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidName() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("copyMasterSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFrom() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramCloneFrom = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "cloneFrom", value: paramCloneFrom as Any, type: "String")
        TestUtils.initialize("copyMasterSlide", "cloneFrom", paramCloneFrom) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFrom", parameterValue: paramCloneFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFromPosition() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramCloneFromPosition = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", value: paramCloneFromPosition as Any, type: "Int")
        TestUtils.initialize("copyMasterSlide", "cloneFromPosition", paramCloneFromPosition) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFromPosition", parameterValue: paramCloneFromPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFromPassword() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramCloneFromPassword = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", value: paramCloneFromPassword as Any, type: "String")
        TestUtils.initialize("copyMasterSlide", "cloneFromPassword", paramCloneFromPassword) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFromPassword", parameterValue: paramCloneFromPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidCloneFromStorage() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramCloneFromStorage = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", value: paramCloneFromStorage as Any, type: "String")
        TestUtils.initialize("copyMasterSlide", "cloneFromStorage", paramCloneFromStorage) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "cloneFromStorage", parameterValue: paramCloneFromStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidApplyToAll() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramApplyToAll = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "applyToAll", value: paramApplyToAll as Any, type: "Bool")
        TestUtils.initialize("copyMasterSlide", "applyToAll", paramApplyToAll) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "applyToAll", parameterValue: paramApplyToAll as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("copyMasterSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("copyMasterSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopyMasterSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcopyMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "name", type: "String")
        var paramCloneFrom : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFrom", type: "String")
        var paramCloneFromPosition : Int = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPosition", type: "Int")
        var paramCloneFromPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromPassword", type: "String")
        var paramCloneFromStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "cloneFromStorage", type: "String")
        var paramApplyToAll : Bool = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "applyToAll", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copyMasterSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "copyMasterSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("copyMasterSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copyMasterSlide(paramName, paramCloneFrom, paramCloneFromPosition, paramCloneFromPassword, paramCloneFromStorage, paramApplyToAll, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copyMasterSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCopySlide() {
        let expectation = self.expectation(description: "testcopySlide")
        let paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        let paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        let paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        let paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        let paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        TestUtils.initialize("copySlide") { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidName() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("copySlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSlideToCopy() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramSlideToCopy = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "slideToCopy", value: paramSlideToCopy as Any, type: "Int")
        TestUtils.initialize("copySlide", "slideToCopy", paramSlideToCopy) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "slideToCopy", parameterValue: paramSlideToCopy as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidPosition() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("copySlide", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSource() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramSource = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "source", value: paramSource as Any, type: "String")
        TestUtils.initialize("copySlide", "source", paramSource) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "source", parameterValue: paramSource as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSourcePassword() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramSourcePassword = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "sourcePassword", value: paramSourcePassword as Any, type: "String")
        TestUtils.initialize("copySlide", "sourcePassword", paramSourcePassword) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "sourcePassword", parameterValue: paramSourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidSourceStorage() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramSourceStorage = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "sourceStorage", value: paramSourceStorage as Any, type: "String")
        TestUtils.initialize("copySlide", "sourceStorage", paramSourceStorage) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "sourceStorage", parameterValue: paramSourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidPassword() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("copySlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidFolder() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("copySlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCopySlideInvalidStorage() {
        let expectation = self.expectation(description: "testcopySlide")
        var paramName : String = TestUtils.getTestValue(functionName: "copySlide", name: "name", type: "String")
        var paramSlideToCopy : Int = TestUtils.getTestValue(functionName: "copySlide", name: "slideToCopy", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "copySlide", name: "position", type: "Int")
        var paramSource : String = TestUtils.getTestValue(functionName: "copySlide", name: "source", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "copySlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "copySlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "copySlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "copySlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("copySlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.copySlide(paramName, paramSlideToCopy, paramPosition, paramSource, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "copySlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateAnimationEffect() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("createAnimationEffect") { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createAnimationEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createAnimationEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "createAnimationEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("createAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createAnimationEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createAnimationEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testcreateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createAnimationEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationEffect(paramName, paramSlideIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequence", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidSequence() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        paramSequence = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", value: paramSequence as Any, type: "InteractiveSequence")
        TestUtils.initialize("createAnimationInteractiveSequence", "sequence", paramSequence) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "sequence", parameterValue: paramSequence as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequence", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequence : InteractiveSequence = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "sequence", type: "InteractiveSequence")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequence", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequence, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testcreateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createAnimationInteractiveSequenceEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateChartCategory() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        TestUtils.initialize("createChartCategory") { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createChartCategory", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createChartCategory", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createChartCategory", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidCategory() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        paramCategory = TestUtils.getInvalidTestValue(functionName: "createChartCategory", name: "category", value: paramCategory as Any, type: "ChartCategory")
        TestUtils.initialize("createChartCategory", "category", paramCategory) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "category", parameterValue: paramCategory as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createChartCategory", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createChartCategory", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testcreateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartCategory", name: "shapeIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "createChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartCategory", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createChartCategory", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateChartDataPoint() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("createChartDataPoint") { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("createChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidDataPoint() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramDataPoint = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "dataPoint", value: paramDataPoint as Any, type: "DataPoint")
        TestUtils.initialize("createChartDataPoint", "dataPoint", paramDataPoint) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "dataPoint", parameterValue: paramDataPoint as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testcreateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "seriesIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartDataPoint", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createChartDataPoint", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateChartSeries() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        let paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        TestUtils.initialize("createChartSeries") { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createChartSeries", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createChartSeries", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createChartSeries", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        paramSeries = TestUtils.getInvalidTestValue(functionName: "createChartSeries", name: "series", value: paramSeries as Any, type: "Series")
        TestUtils.initialize("createChartSeries", "series", paramSeries) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "series", parameterValue: paramSeries as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createChartSeries", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createChartSeries", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testcreateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createChartSeries", name: "shapeIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "createChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createChartSeries", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createChartSeries", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateComment() {
        let expectation = self.expectation(description: "testcreateComment")
        let paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        let paramDto : SlideComment = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideComment")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        TestUtils.initialize("createComment") { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidName() {
        let expectation = self.expectation(description: "testcreateComment")
        var paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createComment", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createComment", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateComment")
        var paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createComment", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createComment", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidDto() {
        let expectation = self.expectation(description: "testcreateComment")
        var paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createComment", name: "dto", value: paramDto as Any, type: "SlideComment")
        TestUtils.initialize("createComment", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidPassword() {
        let expectation = self.expectation(description: "testcreateComment")
        var paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createComment", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createComment", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidFolder() {
        let expectation = self.expectation(description: "testcreateComment")
        var paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createComment", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createComment", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentInvalidStorage() {
        let expectation = self.expectation(description: "testcreateComment")
        var paramName : String = TestUtils.getTestValue(functionName: "createComment", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createComment", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createComment", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createComment", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createComment", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createComment", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createComment", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createComment", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createComment(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createComment", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateCommentOnline() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "createCommentOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createCommentOnline", name: "slideIndex", type: "Int")
        let paramDto : SlideComment = TestUtils.getTestValue(functionName: "createCommentOnline", name: "dto", type: "SlideComment")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createCommentOnline", name: "password", type: "String")
        TestUtils.initialize("createCommentOnline") { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createCommentOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createCommentOnline", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createCommentOnline", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createCommentOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "createCommentOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("createCommentOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createCommentOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createCommentOnline", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createCommentOnline", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createCommentOnline", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createCommentOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createCommentOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidDto() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createCommentOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createCommentOnline", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createCommentOnline", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createCommentOnline", name: "password", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createCommentOnline", name: "dto", value: paramDto as Any, type: "SlideComment")
        TestUtils.initialize("createCommentOnline", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateCommentOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testcreateCommentOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createCommentOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createCommentOnline", name: "slideIndex", type: "Int")
        var paramDto : SlideComment = TestUtils.getTestValue(functionName: "createCommentOnline", name: "dto", type: "SlideComment")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createCommentOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createCommentOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createCommentOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createCommentOnline(paramDocument, paramSlideIndex, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createCommentOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateFolder() {
        let expectation = self.expectation(description: "testcreateFolder")
        let paramPath : String = TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String")
        TestUtils.initialize("createFolder") { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidPath() {
        let expectation = self.expectation(description: "testcreateFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("createFolder", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testcreateFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "createFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "createFolder", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "createFolder", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("createFolder", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.createFolder(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createFolder", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateImageWatermark() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        let paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        let paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        TestUtils.initialize("createImageWatermark") { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidName() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createImageWatermark", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createImageWatermark", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidImage() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        paramImage = TestUtils.getInvalidTestValue(functionName: "createImageWatermark", name: "image", value: paramImage as Any, type: "Data")
        TestUtils.initialize("createImageWatermark", "image", paramImage) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "image", parameterValue: paramImage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidPictureFrame() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        paramPictureFrame = TestUtils.getInvalidTestValue(functionName: "createImageWatermark", name: "pictureFrame", value: paramPictureFrame as Any, type: "PictureFrame")
        TestUtils.initialize("createImageWatermark", "pictureFrame", paramPictureFrame) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "pictureFrame", parameterValue: paramPictureFrame as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidPassword() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createImageWatermark", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createImageWatermark", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidFolder() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createImageWatermark", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createImageWatermark", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkInvalidStorage() {
        let expectation = self.expectation(description: "testcreateImageWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "name", type: "String")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermark", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermark", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createImageWatermark", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createImageWatermark", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createImageWatermark", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createImageWatermark(paramName, paramImage, paramPictureFrame, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermark", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateImageWatermarkOnline() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "document", type: "Data")
        let paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "image", type: "Data")
        let paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "pictureFrame", type: "PictureFrame")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "password", type: "String")
        TestUtils.initialize("createImageWatermarkOnline") { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "document", type: "Data")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "createImageWatermarkOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("createImageWatermarkOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidImage() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "document", type: "Data")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "password", type: "String")
        paramImage = TestUtils.getInvalidTestValue(functionName: "createImageWatermarkOnline", name: "image", value: paramImage as Any, type: "Data")
        TestUtils.initialize("createImageWatermarkOnline", "image", paramImage) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "image", parameterValue: paramImage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidPictureFrame() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "document", type: "Data")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "password", type: "String")
        paramPictureFrame = TestUtils.getInvalidTestValue(functionName: "createImageWatermarkOnline", name: "pictureFrame", value: paramPictureFrame as Any, type: "PictureFrame")
        TestUtils.initialize("createImageWatermarkOnline", "pictureFrame", paramPictureFrame) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "pictureFrame", parameterValue: paramPictureFrame as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateImageWatermarkOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testcreateImageWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "document", type: "Data")
        var paramImage : Data = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "image", type: "Data")
        var paramPictureFrame : PictureFrame = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "pictureFrame", type: "PictureFrame")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createImageWatermarkOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createImageWatermarkOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createImageWatermarkOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createImageWatermarkOnline(paramDocument, paramImage, paramPictureFrame, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createImageWatermarkOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateNotesSlide() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("createNotesSlide") { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createNotesSlide", name: "dto", value: paramDto as Any, type: "NotesSlide")
        TestUtils.initialize("createNotesSlide", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcreateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "createNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateNotesSlideParagraph() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        TestUtils.initialize("createNotesSlideParagraph") { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createNotesSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createNotesSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createNotesSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidDto() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("createNotesSlideParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createNotesSlideParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createNotesSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createNotesSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testcreateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createNotesSlideParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createNotesSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateNotesSlidePortion() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        TestUtils.initialize("createNotesSlidePortion") { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createNotesSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createNotesSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createNotesSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("createNotesSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidDto() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("createNotesSlidePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidPosition() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createNotesSlidePortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createNotesSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createNotesSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testcreateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlidePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createNotesSlidePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createNotesSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateNotesSlideShape() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        TestUtils.initialize("createNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidDto() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("createNotesSlideShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramShapeToClone = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", value: paramShapeToClone as Any, type: "Int")
        TestUtils.initialize("createNotesSlideShape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidPosition() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createNotesSlideShape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testcreateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createNotesSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createNotesSlideShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateParagraph() {
        let expectation = self.expectation(description: "testcreateParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        TestUtils.initialize("createParagraph") { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidName() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidDto() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("createParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testcreateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createParagraph(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePortion() {
        let expectation = self.expectation(description: "testcreatePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        TestUtils.initialize("createPortion") { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidName() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("createPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidDto() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("createPortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidPosition() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createPortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePortionInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createPortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createPortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createPortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createPortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePresentation() {
        let expectation = self.expectation(description: "testcreatePresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        let paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        let paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        TestUtils.initialize("createPresentation") { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidName() {
        let expectation = self.expectation(description: "testcreatePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createPresentation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createPresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidData() {
        let expectation = self.expectation(description: "testcreatePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        paramData = TestUtils.getInvalidTestValue(functionName: "createPresentation", name: "data", value: paramData as Any, type: "Data")
        TestUtils.initialize("createPresentation", "data", paramData) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "data", parameterValue: paramData as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidInputPassword() {
        let expectation = self.expectation(description: "testcreatePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        paramInputPassword = TestUtils.getInvalidTestValue(functionName: "createPresentation", name: "inputPassword", value: paramInputPassword as Any, type: "String")
        TestUtils.initialize("createPresentation", "inputPassword", paramInputPassword) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "inputPassword", parameterValue: paramInputPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createPresentation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createPresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createPresentation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createPresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentation", name: "name", type: "String")
        var paramData : Data = TestUtils.getTestValue(functionName: "createPresentation", name: "data", type: "Data")
        var paramInputPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "inputPassword", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createPresentation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createPresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentation(paramName, paramData, paramInputPassword, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePresentationFromSource() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        let paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        let paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        let paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        let paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        TestUtils.initialize("createPresentationFromSource") { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidName() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createPresentationFromSource", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createPresentationFromSource", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidSourcePath() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        paramSourcePath = TestUtils.getInvalidTestValue(functionName: "createPresentationFromSource", name: "sourcePath", value: paramSourcePath as Any, type: "String")
        TestUtils.initialize("createPresentationFromSource", "sourcePath", paramSourcePath) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "sourcePath", parameterValue: paramSourcePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidSourcePassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        paramSourcePassword = TestUtils.getInvalidTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", value: paramSourcePassword as Any, type: "String")
        TestUtils.initialize("createPresentationFromSource", "sourcePassword", paramSourcePassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "sourcePassword", parameterValue: paramSourcePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidSourceStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        paramSourceStorage = TestUtils.getInvalidTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", value: paramSourceStorage as Any, type: "String")
        TestUtils.initialize("createPresentationFromSource", "sourceStorage", paramSourceStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "sourceStorage", parameterValue: paramSourceStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createPresentationFromSource", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createPresentationFromSource", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createPresentationFromSource", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createPresentationFromSource", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromSourceInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromSource")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "name", type: "String")
        var paramSourcePath : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePath", type: "String")
        var paramSourcePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourcePassword", type: "String")
        var paramSourceStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "sourceStorage", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromSource", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createPresentationFromSource", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createPresentationFromSource", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromSource(paramName, paramSourcePath, paramSourcePassword, paramSourceStorage, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromSource", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreatePresentationFromTemplate() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        let paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        let paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        let paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        let paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        let paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        let paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        TestUtils.initialize("createPresentationFromTemplate") { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidName() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidTemplatePath() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramTemplatePath = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", value: paramTemplatePath as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "templatePath", paramTemplatePath) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "templatePath", parameterValue: paramTemplatePath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidData() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramData = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "data", value: paramData as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "data", paramData) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "data", parameterValue: paramData as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidTemplatePassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramTemplatePassword = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", value: paramTemplatePassword as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "templatePassword", paramTemplatePassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "templatePassword", parameterValue: paramTemplatePassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidTemplateStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramTemplateStorage = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", value: paramTemplateStorage as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "templateStorage", paramTemplateStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "templateStorage", parameterValue: paramTemplateStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidIsImageDataEmbedded() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramIsImageDataEmbedded = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", value: paramIsImageDataEmbedded as Any, type: "Bool")
        TestUtils.initialize("createPresentationFromTemplate", "isImageDataEmbedded", paramIsImageDataEmbedded) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "isImageDataEmbedded", parameterValue: paramIsImageDataEmbedded as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidPassword() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidFolder() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreatePresentationFromTemplateInvalidStorage() {
        let expectation = self.expectation(description: "testcreatePresentationFromTemplate")
        var paramName : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "name", type: "String")
        var paramTemplatePath : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePath", type: "String")
        var paramData : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "data", type: "String")
        var paramTemplatePassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templatePassword", type: "String")
        var paramTemplateStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "templateStorage", type: "String")
        var paramIsImageDataEmbedded : Bool = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "isImageDataEmbedded", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createPresentationFromTemplate", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createPresentationFromTemplate", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createPresentationFromTemplate", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createPresentationFromTemplate(paramName, paramTemplatePath, paramData, paramTemplatePassword, paramTemplateStorage, paramIsImageDataEmbedded, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createPresentationFromTemplate", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSection() {
        let expectation = self.expectation(description: "testcreateSection")
        let paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        let paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        TestUtils.initialize("createSection") { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidName() {
        let expectation = self.expectation(description: "testcreateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createSection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidSectionName() {
        let expectation = self.expectation(description: "testcreateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        paramSectionName = TestUtils.getInvalidTestValue(functionName: "createSection", name: "sectionName", value: paramSectionName as Any, type: "String")
        TestUtils.initialize("createSection", "sectionName", paramSectionName) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "sectionName", parameterValue: paramSectionName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createSection", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createSection", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createSection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createSection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSectionInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "createSection", name: "name", type: "String")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "createSection", name: "sectionName", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSection", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createSection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSection(paramName, paramSectionName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateShape() {
        let expectation = self.expectation(description: "testcreateShape")
        let paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        TestUtils.initialize("createShape") { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidName() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidDto() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createShape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("createShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramShapeToClone = TestUtils.getInvalidTestValue(functionName: "createShape", name: "shapeToClone", value: paramShapeToClone as Any, type: "Int")
        TestUtils.initialize("createShape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidPosition() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createShape", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createShape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidPassword() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidFolder() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateShapeInvalidStorage() {
        let expectation = self.expectation(description: "testcreateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "createShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createShape", name: "slideIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createShape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createShape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createShape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createShape(paramName, paramSlideIndex, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSlide() {
        let expectation = self.expectation(description: "testcreateSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        let paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        TestUtils.initialize("createSlide") { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidName() {
        let expectation = self.expectation(description: "testcreateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidLayoutAlias() {
        let expectation = self.expectation(description: "testcreateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        paramLayoutAlias = TestUtils.getInvalidTestValue(functionName: "createSlide", name: "layoutAlias", value: paramLayoutAlias as Any, type: "String")
        TestUtils.initialize("createSlide", "layoutAlias", paramLayoutAlias) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "layoutAlias", parameterValue: paramLayoutAlias as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createSlide", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createSlide", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSlideInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "createSlide", name: "name", type: "String")
        var paramLayoutAlias : String = TestUtils.getTestValue(functionName: "createSlide", name: "layoutAlias", type: "String")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSlide", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSlide(paramName, paramLayoutAlias, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSubshape() {
        let expectation = self.expectation(description: "testcreateSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        let paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        TestUtils.initialize("createSubshape") { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidName() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("createSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidDto() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("createSubshape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidShapeToClone() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramShapeToClone = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "shapeToClone", value: paramShapeToClone as Any, type: "Int")
        TestUtils.initialize("createSubshape", "shapeToClone", paramShapeToClone) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "shapeToClone", parameterValue: paramShapeToClone as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createSubshape", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshape", name: "path", type: "String")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "createSubshape", name: "dto", type: "ShapeBase")
        var paramShapeToClone : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "shapeToClone", type: "Int")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshape", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSubshape(paramName, paramSlideIndex, paramPath, paramDto, paramShapeToClone, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSubshapeParagraph() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("createSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createSubshapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createSubshapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("createSubshapeParagraph", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createSubshapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidDto() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("createSubshapeParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createSubshapeParagraph", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createSubshapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createSubshapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createSubshapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createSubshapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateSubshapePortion() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        let paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        TestUtils.initialize("createSubshapePortion") { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createSubshapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("createSubshapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("createSubshapePortion", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("createSubshapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("createSubshapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidDto() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("createSubshapePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidPosition() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramPosition = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "position", value: paramPosition as Any, type: "Int")
        TestUtils.initialize("createSubshapePortion", "position", paramPosition) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "position", parameterValue: paramPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createSubshapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createSubshapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testcreateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "dto", type: "Portion")
        var paramPosition : Int = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "position", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createSubshapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createSubshapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createSubshapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createSubshapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateWatermark() {
        let expectation = self.expectation(description: "testcreateWatermark")
        let paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        let paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        let paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        let paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        let paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        TestUtils.initialize("createWatermark") { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidName() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("createWatermark", "name", paramName) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidShape() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramShape = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "shape", value: paramShape as Any, type: "Shape")
        TestUtils.initialize("createWatermark", "shape", paramShape) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "shape", parameterValue: paramShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFontHeight() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramFontHeight = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "fontHeight", value: paramFontHeight as Any, type: "Double")
        TestUtils.initialize("createWatermark", "fontHeight", paramFontHeight) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "fontHeight", parameterValue: paramFontHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidText() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramText = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "text", value: paramText as Any, type: "String")
        TestUtils.initialize("createWatermark", "text", paramText) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "text", parameterValue: paramText as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFontName() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramFontName = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "fontName", value: paramFontName as Any, type: "String")
        TestUtils.initialize("createWatermark", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFontColor() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramFontColor = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "fontColor", value: paramFontColor as Any, type: "String")
        TestUtils.initialize("createWatermark", "fontColor", paramFontColor) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "fontColor", parameterValue: paramFontColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidPassword() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createWatermark", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidFolder() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("createWatermark", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkInvalidStorage() {
        let expectation = self.expectation(description: "testcreateWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "name", type: "String")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermark", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermark", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermark", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermark", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "createWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "createWatermark", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "createWatermark", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("createWatermark", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.createWatermark(paramName, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermark", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testCreateWatermarkOnline() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        let paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        let paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        let paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        let paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        let paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        TestUtils.initialize("createWatermarkOnline") { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "createWatermarkOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("createWatermarkOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidShape() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        paramShape = TestUtils.getInvalidTestValue(functionName: "createWatermarkOnline", name: "shape", value: paramShape as Any, type: "Shape")
        TestUtils.initialize("createWatermarkOnline", "shape", paramShape) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "shape", parameterValue: paramShape as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidFontHeight() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        paramFontHeight = TestUtils.getInvalidTestValue(functionName: "createWatermarkOnline", name: "fontHeight", value: paramFontHeight as Any, type: "Double")
        TestUtils.initialize("createWatermarkOnline", "fontHeight", paramFontHeight) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "fontHeight", parameterValue: paramFontHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidText() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        paramText = TestUtils.getInvalidTestValue(functionName: "createWatermarkOnline", name: "text", value: paramText as Any, type: "String")
        TestUtils.initialize("createWatermarkOnline", "text", paramText) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "text", parameterValue: paramText as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidFontName() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        paramFontName = TestUtils.getInvalidTestValue(functionName: "createWatermarkOnline", name: "fontName", value: paramFontName as Any, type: "String")
        TestUtils.initialize("createWatermarkOnline", "fontName", paramFontName) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "fontName", parameterValue: paramFontName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidFontColor() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        paramFontColor = TestUtils.getInvalidTestValue(functionName: "createWatermarkOnline", name: "fontColor", value: paramFontColor as Any, type: "String")
        TestUtils.initialize("createWatermarkOnline", "fontColor", paramFontColor) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "fontColor", parameterValue: paramFontColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testCreateWatermarkOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testcreateWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "document", type: "Data")
        var paramShape : Shape = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "shape", type: "Shape")
        var paramFontHeight : Double = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontHeight", type: "Double")
        var paramText : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "text", type: "String")
        var paramFontName : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontName", type: "String")
        var paramFontColor : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "fontColor", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "createWatermarkOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "createWatermarkOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("createWatermarkOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.createWatermarkOnline(paramDocument, paramShape, paramFontHeight, paramText, paramFontName, paramFontColor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "createWatermarkOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimation() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimation", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimation") { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteAnimation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimation", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteAnimation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteAnimation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimation", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteAnimation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimation(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationEffect() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationEffect") { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteAnimationEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteAnimationEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteAnimationEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteAnimationEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationInteractiveSequence() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "sequenceIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequence", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequence(paramName, paramSlideIndex, paramSequenceIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequenceEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationInteractiveSequences() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences") { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationInteractiveSequencesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationInteractiveSequences")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteAnimationInteractiveSequences", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteAnimationInteractiveSequences", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationInteractiveSequences(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationInteractiveSequences", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteAnimationMainSequence() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "storage", type: "String")
        TestUtils.initialize("deleteAnimationMainSequence") { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidName() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteAnimationMainSequence", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteAnimationMainSequence", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteAnimationMainSequence", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteAnimationMainSequence", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteAnimationMainSequenceInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteAnimationMainSequence")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteAnimationMainSequence", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteAnimationMainSequence", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteAnimationMainSequence", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteAnimationMainSequence(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteAnimationMainSequence", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteBackground() {
        let expectation = self.expectation(description: "testdeleteBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteBackground", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "storage", type: "String")
        TestUtils.initialize("deleteBackground") { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidName() {
        let expectation = self.expectation(description: "testdeleteBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteBackground", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteBackground", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteBackground", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteBackground", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteBackground", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteBackground", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartCategory() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        TestUtils.initialize("deleteChartCategory") { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidCategoryIndex() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramCategoryIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "categoryIndex", value: paramCategoryIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartCategory", "categoryIndex", paramCategoryIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "categoryIndex", parameterValue: paramCategoryIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "categoryIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartCategory", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteChartCategory", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartDataPoint() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("deleteChartDataPoint") { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidPointIndex() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramPointIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", value: paramPointIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartDataPoint", "pointIndex", paramPointIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "pointIndex", parameterValue: paramPointIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "pointIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartDataPoint", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteChartDataPoint", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteChartSeries() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        TestUtils.initialize("deleteChartSeries") { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("deleteChartSeries", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "seriesIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteChartSeries", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteChartSeries", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteComments() {
        let expectation = self.expectation(description: "testdeleteComments")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteComments", name: "name", type: "String")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteComments", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteComments", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteComments", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteComments", name: "storage", type: "String")
        TestUtils.initialize("deleteComments") { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidName() {
        let expectation = self.expectation(description: "testdeleteComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteComments", name: "name", type: "String")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteComments", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteComments", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteComments", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteComments", name: "name", type: "String")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteComments", name: "storage", type: "String")
        paramAuthor = TestUtils.getInvalidTestValue(functionName: "deleteComments", name: "author", value: paramAuthor as Any, type: "String")
        TestUtils.initialize("deleteComments", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteComments", name: "name", type: "String")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteComments", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteComments", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteComments", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteComments", name: "name", type: "String")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteComments", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteComments", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteComments", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteComments", name: "name", type: "String")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteComments", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteComments", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteComments", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteComments(paramName, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteComments", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteCommentsOnline() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "document", type: "Data")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "password", type: "String")
        TestUtils.initialize("deleteCommentsOnline") { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "document", type: "Data")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "deleteCommentsOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("deleteCommentsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteCommentsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsOnlineInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "document", type: "Data")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "password", type: "String")
        paramAuthor = TestUtils.getInvalidTestValue(functionName: "deleteCommentsOnline", name: "author", value: paramAuthor as Any, type: "String")
        TestUtils.initialize("deleteCommentsOnline", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteCommentsOnline", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteCommentsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteCommentsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "document", type: "Data")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteCommentsOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteCommentsOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteCommentsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteCommentsOnline(paramDocument, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteCommentsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteDocumentProperties() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("deleteDocumentProperties") { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteDocumentProperty() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "propertyName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("deleteDocumentProperty") { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperty", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "storage", type: "String")
        paramPropertyName = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperty", name: "propertyName", value: paramPropertyName as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperty", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperty", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteDocumentProperty", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteDocumentProperty", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFile() {
        let expectation = self.expectation(description: "testdeleteFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        TestUtils.initialize("deleteFile") { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("deleteFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdeleteFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "deleteFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "deleteFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("deleteFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.deleteFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteFolder() {
        let expectation = self.expectation(description: "testdeleteFolder")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        let paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        TestUtils.initialize("deleteFolder") { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidPath() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        var paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteFolder", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidStorageName() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        var paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("deleteFolder", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteFolderInvalidRecursive() {
        let expectation = self.expectation(description: "testdeleteFolder")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "deleteFolder", name: "storageName", type: "String")
        var paramRecursive : Bool = TestUtils.getTestValue(functionName: "deleteFolder", name: "recursive", type: "Bool")
        paramRecursive = TestUtils.getInvalidTestValue(functionName: "deleteFolder", name: "recursive", value: paramRecursive as Any, type: "Bool")
        TestUtils.initialize("deleteFolder", "recursive", paramRecursive) { (response, error) -> Void in
            SlidesAPI.deleteFolder(paramPath, paramStorageName, paramRecursive) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteFolder", parameterName: "recursive", parameterValue: paramRecursive as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlide() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlide") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideParagraph() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideParagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramParagraphs = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", value: paramParagraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlidePortion() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlidePortion") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlidePortions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlidePortions") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlidePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramPortions = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "portions", value: paramPortions as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlidePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlidePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlidePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlidePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlidePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlidePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideShape() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteNotesSlideShapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        TestUtils.initialize("deleteNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteNotesSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("deleteNotesSlideShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteNotesSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteNotesSlideShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteNotesSlideShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteNotesSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteNotesSlideShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteNotesSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraph() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        TestUtils.initialize("deleteParagraph") { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        TestUtils.initialize("deleteParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramParagraphs = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "paragraphs", value: paramParagraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortion() {
        let expectation = self.expectation(description: "testdeletePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        TestUtils.initialize("deletePortion") { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidName() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deletePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("deletePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deletePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deletePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deletePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deletePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deletePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deletePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeletePortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        TestUtils.initialize("deletePortions") { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deletePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deletePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramPortions = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "portions", value: paramPortions as Any, type: "[Int]")
        TestUtils.initialize("deletePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deletePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deletePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeletePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeletePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deletePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deletePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deletePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deletePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deletePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deletePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deletePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deletePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deletePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deletePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteProtection() {
        let expectation = self.expectation(description: "testdeleteProtection")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "storage", type: "String")
        TestUtils.initialize("deleteProtection") { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidName() {
        let expectation = self.expectation(description: "testdeleteProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteProtection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteProtection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteProtection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteProtection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteProtection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteProtection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteProtection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteProtection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteProtection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteProtection(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteProtectionOnline() {
        let expectation = self.expectation(description: "testdeleteProtectionOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "password", type: "String")
        TestUtils.initialize("deleteProtectionOnline") { (response, error) -> Void in
            SlidesAPI.deleteProtectionOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteProtectionOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "document", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "deleteProtectionOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("deleteProtectionOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteProtectionOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtectionOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteProtectionOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteProtectionOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "document", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteProtectionOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteProtectionOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteProtectionOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteProtectionOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteProtectionOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSection() {
        let expectation = self.expectation(description: "testdeleteSection")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        let paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        TestUtils.initialize("deleteSection") { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidName() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramSectionIndex = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "sectionIndex", value: paramSectionIndex as Any, type: "Int")
        TestUtils.initialize("deleteSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidWithSlides() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramWithSlides = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "withSlides", value: paramWithSlides as Any, type: "Bool")
        TestUtils.initialize("deleteSection", "withSlides", paramWithSlides) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "withSlides", parameterValue: paramWithSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSection")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "deleteSection", name: "sectionIndex", type: "Int")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSection", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSection(paramName, paramSectionIndex, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSections() {
        let expectation = self.expectation(description: "testdeleteSections")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        let paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        let paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        TestUtils.initialize("deleteSections") { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidSections() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramSections = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "sections", value: paramSections as Any, type: "[Int]")
        TestUtils.initialize("deleteSections", "sections", paramSections) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "sections", parameterValue: paramSections as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidWithSlides() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramWithSlides = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "withSlides", value: paramWithSlides as Any, type: "Bool")
        TestUtils.initialize("deleteSections", "withSlides", paramWithSlides) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "withSlides", parameterValue: paramWithSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSections")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSections", name: "name", type: "String")
        var paramSections : [Int] = TestUtils.getTestValue(functionName: "deleteSections", name: "sections", type: "[Int]")
        var paramWithSlides : Bool = TestUtils.getTestValue(functionName: "deleteSections", name: "withSlides", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSections", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSections", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSections(paramName, paramSections, paramWithSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteShape() {
        let expectation = self.expectation(description: "testdeleteShape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        TestUtils.initialize("deleteShape") { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteShape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteShapes() {
        let expectation = self.expectation(description: "testdeleteShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        TestUtils.initialize("deleteShapes") { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "deleteShapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("deleteShapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteShapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteShapes", name: "slideIndex", type: "Int")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteShapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteShapes(paramName, paramSlideIndex, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlide() {
        let expectation = self.expectation(description: "testdeleteSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "storage", type: "String")
        TestUtils.initialize("deleteSlide") { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideComments() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        TestUtils.initialize("deleteSlideComments") { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlideComments", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlideComments", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideComments", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideComments", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        paramAuthor = TestUtils.getInvalidTestValue(functionName: "deleteSlideComments", name: "author", value: paramAuthor as Any, type: "String")
        TestUtils.initialize("deleteSlideComments", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideComments", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideComments", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlideComments", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlideComments", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlideComments", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlideComments", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlideComments", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlideComments(paramName, paramSlideIndex, paramAuthor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideComments", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlideCommentsOnline() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "slideIndex", type: "Int")
        let paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "author", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "password", type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline") { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "deleteSlideCommentsOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("deleteSlideCommentsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSlideCommentsOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSlideCommentsOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidAuthor() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "password", type: "String")
        paramAuthor = TestUtils.getInvalidTestValue(functionName: "deleteSlideCommentsOnline", name: "author", value: paramAuthor as Any, type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline", "author", paramAuthor) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "author", parameterValue: paramAuthor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlideCommentsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlideCommentsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "slideIndex", type: "Int")
        var paramAuthor : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "author", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlideCommentsOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlideCommentsOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlideCommentsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlideCommentsOnline(paramDocument, paramSlideIndex, paramAuthor, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlideCommentsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSlides() {
        let expectation = self.expectation(description: "testdeleteSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "name", type: "String")
        let paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlides", name: "slides", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "storage", type: "String")
        TestUtils.initialize("deleteSlides") { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlides", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSlides", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidSlides() {
        let expectation = self.expectation(description: "testdeleteSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlides", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "storage", type: "String")
        paramSlides = TestUtils.getInvalidTestValue(functionName: "deleteSlides", name: "slides", value: paramSlides as Any, type: "[Int]")
        TestUtils.initialize("deleteSlides", "slides", paramSlides) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "slides", parameterValue: paramSlides as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlides", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSlides", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlides", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSlides", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "name", type: "String")
        var paramSlides : [Int] = TestUtils.getTestValue(functionName: "deleteSlides", name: "slides", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSlides", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSlides", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSlides(paramName, paramSlides, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshape() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshape") { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapeParagraph() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapeParagraphs() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        let paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs") { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapeParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidParagraphs() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramParagraphs = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", value: paramParagraphs as Any, type: "[Int]")
        TestUtils.initialize("deleteSubshapeParagraphs", "paragraphs", paramParagraphs) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "paragraphs", parameterValue: paramParagraphs as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramParagraphs : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "paragraphs", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapeParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapeParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphs, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapeParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapePortion() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapePortion") { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapePortions() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        let paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapePortions") { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPortions() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramPortions = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "portions", value: paramPortions as Any, type: "[Int]")
        TestUtils.initialize("deleteSubshapePortions", "portions", paramPortions) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "portions", parameterValue: paramPortions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPortions : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "portions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteSubshapes() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        let paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        TestUtils.initialize("deleteSubshapes") { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapesInvalidName() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteSubshapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteSubshapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "deleteSubshapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("deleteSubshapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapesInvalidPath() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "deleteSubshapes", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("deleteSubshapes", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapes", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapesInvalidShapes() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        paramShapes = TestUtils.getInvalidTestValue(functionName: "deleteSubshapes", name: "shapes", value: paramShapes as Any, type: "[Int]")
        TestUtils.initialize("deleteSubshapes", "shapes", paramShapes) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapes", parameterName: "shapes", parameterValue: paramShapes as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapesInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteSubshapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteSubshapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapesInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteSubshapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteSubshapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteSubshapesInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "path", type: "String")
        var paramShapes : [Int] = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "shapes", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteSubshapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteSubshapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteSubshapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteSubshapes(paramName, paramSlideIndex, paramPath, paramShapes, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteSubshapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteWatermark() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        let paramName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "name", type: "String")
        let paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "shapeName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "storage", type: "String")
        TestUtils.initialize("deleteWatermark") { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidName() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "name", type: "String")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "deleteWatermark", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("deleteWatermark", "name", paramName) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidShapeName() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "name", type: "String")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "storage", type: "String")
        paramShapeName = TestUtils.getInvalidTestValue(functionName: "deleteWatermark", name: "shapeName", value: paramShapeName as Any, type: "String")
        TestUtils.initialize("deleteWatermark", "shapeName", paramShapeName) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "shapeName", parameterValue: paramShapeName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "name", type: "String")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteWatermark", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteWatermark", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidFolder() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "name", type: "String")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "deleteWatermark", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("deleteWatermark", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkInvalidStorage() {
        let expectation = self.expectation(description: "testdeleteWatermark")
        var paramName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "name", type: "String")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "deleteWatermark", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "deleteWatermark", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("deleteWatermark", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.deleteWatermark(paramName, paramShapeName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermark", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDeleteWatermarkOnline() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "document", type: "Data")
        let paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "shapeName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "password", type: "String")
        TestUtils.initialize("deleteWatermarkOnline") { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "document", type: "Data")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "deleteWatermarkOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("deleteWatermarkOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermarkOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkOnlineInvalidShapeName() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "document", type: "Data")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "password", type: "String")
        paramShapeName = TestUtils.getInvalidTestValue(functionName: "deleteWatermarkOnline", name: "shapeName", value: paramShapeName as Any, type: "String")
        TestUtils.initialize("deleteWatermarkOnline", "shapeName", paramShapeName) { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermarkOnline", parameterName: "shapeName", parameterValue: paramShapeName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDeleteWatermarkOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdeleteWatermarkOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "document", type: "Data")
        var paramShapeName : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "shapeName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "deleteWatermarkOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "deleteWatermarkOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("deleteWatermarkOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.deleteWatermarkOnline(paramDocument, paramShapeName, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "deleteWatermarkOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadFile() {
        let expectation = self.expectation(description: "testdownloadFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        TestUtils.initialize("downloadFile") { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidPath() {
        let expectation = self.expectation(description: "testdownloadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("downloadFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testdownloadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("downloadFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadFileInvalidVersionId() {
        let expectation = self.expectation(description: "testdownloadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadFile", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "downloadFile", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "downloadFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "downloadFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("downloadFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.downloadFile(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImage() {
        let expectation = self.expectation(description: "testdownloadImage")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        TestUtils.initialize("downloadImage") { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidName() {
        let expectation = self.expectation(description: "testdownloadImage")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadImage", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadImage", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImage")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "downloadImage", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("downloadImage", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImage")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadImage", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadImage", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImage")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImage", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImage", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImage")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadImage", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadImage", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImage")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImage", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImage", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImage", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImage", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImage", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImage", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadImage", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadImage", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImage(paramName, paramIndex, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImage", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImageDefaultFormat() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "name", type: "String")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "index", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "storage", type: "String")
        TestUtils.initialize("downloadImageDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidName() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormat", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "storage", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormat", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("downloadImageDefaultFormat", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormat", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "name", type: "String")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormat", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormat", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadImageDefaultFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormat(paramName, paramIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImageDefaultFormatOnline() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "document", type: "Data")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "index", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImageDefaultFormatOnline") { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormatOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("downloadImageDefaultFormatOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormatOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatOnlineInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "password", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormatOnline", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("downloadImageDefaultFormatOnline", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormatOnline", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageDefaultFormatOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImageDefaultFormatOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "index", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageDefaultFormatOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImageDefaultFormatOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImageDefaultFormatOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageDefaultFormatOnline(paramDocument, paramIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageDefaultFormatOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImageOnline() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "document", type: "Data")
        let paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "index", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImageOnline") { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "downloadImageOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("downloadImageOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidIndex() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "password", type: "String")
        paramIndex = TestUtils.getInvalidTestValue(functionName: "downloadImageOnline", name: "index", value: paramIndex as Any, type: "Int")
        TestUtils.initialize("downloadImageOnline", "index", paramIndex) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "index", parameterValue: paramIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "password", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadImageOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadImageOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImageOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImageOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "document", type: "Data")
        var paramIndex : Int = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "index", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImageOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImageOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImageOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImageOnline(paramDocument, paramIndex, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImageOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImages() {
        let expectation = self.expectation(description: "testdownloadImages")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImages", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImages", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImages", name: "storage", type: "String")
        TestUtils.initialize("downloadImages") { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidName() {
        let expectation = self.expectation(description: "testdownloadImages")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImages", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImages", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImages", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadImages", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImages")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImages", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImages", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImages", name: "storage", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadImages", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadImages", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImages")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImages", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImages", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImages", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImages", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImages")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImages", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImages", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImages", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadImages", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImages")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImages", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImages", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImages", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadImages", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImages(paramName, paramFormat, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImagesDefaultFormat() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "storage", type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat") { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidName() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadImagesDefaultFormat", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImagesDefaultFormat", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadImagesDefaultFormat", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormat")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormat", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadImagesDefaultFormat", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormat", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormat(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormat", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImagesDefaultFormatOnline() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormatOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "document", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImagesDefaultFormatOnline") { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormatOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "document", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("downloadImagesDefaultFormatOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormatOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesDefaultFormatOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImagesDefaultFormatOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "document", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImagesDefaultFormatOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImagesDefaultFormatOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesDefaultFormatOnline(paramDocument, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesDefaultFormatOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadImagesOnline() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "format", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "password", type: "String")
        TestUtils.initialize("downloadImagesOnline") { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "downloadImagesOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("downloadImagesOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "password", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadImagesOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadImagesOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadImagesOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadImagesOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "format", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadImagesOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadImagesOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadImagesOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadImagesOnline(paramDocument, paramFormat, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadImagesOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadNotesSlide() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadNotesSlide") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadNotesSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlide", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadNotesSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlide(paramName, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadNotesSlideOnline() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadNotesSlideOnline") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("downloadNotesSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideOnline", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlideOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideOnline", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlideOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "password", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideOnline", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadNotesSlideShape() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("downloadNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("downloadNotesSlideShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("downloadNotesSlideShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("downloadNotesSlideShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidBounds() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadNotesSlideShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadNotesSlideShape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadNotesSlideShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadNotesSlideShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadPresentation() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadPresentation") { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidName() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadPresentation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadPresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadPresentation", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadPresentation", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "downloadPresentation", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("downloadPresentation", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadPresentation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadPresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadPresentation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadPresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadPresentation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadPresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadPresentationInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadPresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadPresentation", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadPresentation", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadPresentation", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadPresentation(paramName, paramFormat, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadPresentation", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadShape() {
        let expectation = self.expectation(description: "testdownloadShape")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadShape") { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidName() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("downloadShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("downloadShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("downloadShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("downloadShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidBounds() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("downloadShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadShape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadShape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadShapeOnline() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadShapeOnline") { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("downloadShapeOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadShapeOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("downloadShapeOnline", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadShapeOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidScaleX() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("downloadShapeOnline", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidScaleY() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("downloadShapeOnline", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidBounds() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("downloadShapeOnline", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadShapeOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadShapeOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadShapeOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "format", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadShapeOnline", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadShapeOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadShapeOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadSlide() {
        let expectation = self.expectation(description: "testdownloadSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadSlide") { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidName() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("downloadSlide", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("downloadSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("downloadSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "format", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "downloadSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlide", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadSlide", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlide(paramName, paramSlideIndex, paramFormat, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadSlideOnline() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadSlideOnline") { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("downloadSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadSlideOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("downloadSlideOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("downloadSlideOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadSlideOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSlideOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadSlideOnline", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadSlideOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSlideOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testDownloadSubshape() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        TestUtils.initialize("downloadSubshape") { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidName() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("downloadSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("downloadSubshape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidFormat() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidOptions() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("downloadSubshape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidScaleX() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("downloadSubshape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidScaleY() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("downloadSubshape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidBounds() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testDownloadSubshapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testdownloadSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "downloadSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "format", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "downloadSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "downloadSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "downloadSubshape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "downloadSubshape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("downloadSubshape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.downloadSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "downloadSubshape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetAnimation() {
        let expectation = self.expectation(description: "testgetAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        TestUtils.initialize("getAnimation") { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidName() {
        let expectation = self.expectation(description: "testgetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getAnimation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getAnimation", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getAnimation", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getAnimation", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testgetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getAnimation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testgetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getAnimation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testgetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "getAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getAnimation", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getAnimation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getAnimation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getAnimation(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetApiInfo() {
        let expectation = self.expectation(description: "testgetApiInfo")
        TestUtils.initialize("getApiInfo") { (response, error) -> Void in
            SlidesAPI.getApiInfo() { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetBackground() {
        let expectation = self.expectation(description: "testgetBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "getBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getBackground", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getBackground", name: "storage", type: "String")
        TestUtils.initialize("getBackground") { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidName() {
        let expectation = self.expectation(description: "testgetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getBackground", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getBackground", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getBackground", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getBackground", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testgetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getBackground", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getBackground", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testgetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getBackground", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getBackground", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testgetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "getBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getBackground", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getBackground", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getBackground", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getBackground(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetColorScheme() {
        let expectation = self.expectation(description: "testgetColorScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getColorScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "storage", type: "String")
        TestUtils.initialize("getColorScheme") { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getColorScheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getColorScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getColorScheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getColorScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getColorScheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getColorScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getColorScheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getColorScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetColorSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetColorScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getColorScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getColorScheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getColorScheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getColorScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getColorScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getColorScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDiscUsage() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String")
        TestUtils.initialize("getDiscUsage") { (response, error) -> Void in
            SlidesAPI.getDiscUsage(paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDiscUsageInvalidStorageName() {
        let expectation = self.expectation(description: "testgetDiscUsage")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getDiscUsage", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "getDiscUsage", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("getDiscUsage", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getDiscUsage(paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDiscUsage", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDocumentProperties() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("getDocumentProperties") { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getDocumentProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getDocumentProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getDocumentProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getDocumentProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getDocumentProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetDocumentProperty() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "propertyName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("getDocumentProperty") { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getDocumentProperty", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "storage", type: "String")
        paramPropertyName = TestUtils.getInvalidTestValue(functionName: "getDocumentProperty", name: "propertyName", value: paramPropertyName as Any, type: "String")
        TestUtils.initialize("getDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getDocumentProperty", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getDocumentProperty", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testgetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "propertyName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getDocumentProperty", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getDocumentProperty", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getDocumentProperty(paramName, paramPropertyName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFileVersions() {
        let expectation = self.expectation(description: "testgetFileVersions")
        let paramPath : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String")
        TestUtils.initialize("getFileVersions") { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidPath() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getFileVersions", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFileVersionsInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFileVersions")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFileVersions", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "getFileVersions", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("getFileVersions", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getFileVersions(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFileVersions", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFilesList() {
        let expectation = self.expectation(description: "testgetFilesList")
        let paramPath : String = TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String")
        TestUtils.initialize("getFilesList") { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidPath() {
        let expectation = self.expectation(description: "testgetFilesList")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getFilesList", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFilesListInvalidStorageName() {
        let expectation = self.expectation(description: "testgetFilesList")
        var paramPath : String = TestUtils.getTestValue(functionName: "getFilesList", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "getFilesList", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "getFilesList", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("getFilesList", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.getFilesList(paramPath, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFilesList", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFontScheme() {
        let expectation = self.expectation(description: "testgetFontScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFontScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "storage", type: "String")
        TestUtils.initialize("getFontScheme") { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getFontScheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getFontScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getFontScheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getFontScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getFontScheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getFontScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getFontScheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getFontScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFontSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetFontScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFontScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFontScheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getFontScheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getFontScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getFontScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFontScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetFormatScheme() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFormatScheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "storage", type: "String")
        TestUtils.initialize("getFormatScheme") { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidName() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getFormatScheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getFormatScheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getFormatScheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getFormatScheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getFormatScheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getFormatScheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getFormatScheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getFormatScheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetFormatSchemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetFormatScheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getFormatScheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getFormatScheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getFormatScheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getFormatScheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getFormatScheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getFormatScheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlide() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("getLayoutSlide") { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getLayoutSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetLayoutSlides() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "storage", type: "String")
        TestUtils.initialize("getLayoutSlides") { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidName() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getLayoutSlides", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getLayoutSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getLayoutSlides", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getLayoutSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getLayoutSlides", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getLayoutSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetLayoutSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testgetLayoutSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getLayoutSlides", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getLayoutSlides", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getLayoutSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getLayoutSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getLayoutSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlide() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        TestUtils.initialize("getMasterSlide") { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getMasterSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getMasterSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getMasterSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getMasterSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getMasterSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetMasterSlides() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "storage", type: "String")
        TestUtils.initialize("getMasterSlides") { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidName() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getMasterSlides", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getMasterSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getMasterSlides", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getMasterSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getMasterSlides", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getMasterSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetMasterSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testgetMasterSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getMasterSlides", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getMasterSlides", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getMasterSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getMasterSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getMasterSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlide() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlide") { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideHeaderFooter() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideOnline() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "password", type: "String")
        TestUtils.initialize("getNotesSlideOnline") { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "getNotesSlideOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("getNotesSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideParagraph() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideParagraph") { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideParagraphs() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideParagraphs") { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlidePortion() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlidePortion") { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlidePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlidePortions() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlidePortions") { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionsInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlidePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlidePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlidePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlidePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlidePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlidePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlidePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlidePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlidePortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlidePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShape() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetNotesSlideShapes() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        TestUtils.initialize("getNotesSlideShapes") { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidName() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getNotesSlideShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetNotesSlideShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetNotesSlideShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getNotesSlideShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getNotesSlideShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getNotesSlideShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getNotesSlideShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getNotesSlideShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraph() {
        let expectation = self.expectation(description: "testgetParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        TestUtils.initialize("getParagraph") { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetParagraphs() {
        let expectation = self.expectation(description: "testgetParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        TestUtils.initialize("getParagraphs") { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getParagraphs(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPlaceholder() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        let paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        let paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        TestUtils.initialize("getPlaceholder") { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidName() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getPlaceholder", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getPlaceholder", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getPlaceholder", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getPlaceholder", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidPlaceholderIndex() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        paramPlaceholderIndex = TestUtils.getInvalidTestValue(functionName: "getPlaceholder", name: "placeholderIndex", value: paramPlaceholderIndex as Any, type: "Int")
        TestUtils.initialize("getPlaceholder", "placeholderIndex", paramPlaceholderIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "placeholderIndex", parameterValue: paramPlaceholderIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidPassword() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getPlaceholder", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getPlaceholder", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidFolder() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getPlaceholder", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getPlaceholder", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholderInvalidStorage() {
        let expectation = self.expectation(description: "testgetPlaceholder")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "slideIndex", type: "Int")
        var paramPlaceholderIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholder", name: "placeholderIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholder", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getPlaceholder", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getPlaceholder", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPlaceholder(paramName, paramSlideIndex, paramPlaceholderIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholder", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPlaceholders() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        let paramName : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholders", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "storage", type: "String")
        TestUtils.initialize("getPlaceholders") { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidName() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getPlaceholders", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getPlaceholders", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getPlaceholders", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getPlaceholders", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidPassword() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getPlaceholders", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getPlaceholders", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidFolder() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getPlaceholders", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getPlaceholders", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPlaceholdersInvalidStorage() {
        let expectation = self.expectation(description: "testgetPlaceholders")
        var paramName : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPlaceholders", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPlaceholders", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getPlaceholders", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getPlaceholders", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPlaceholders(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPlaceholders", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPortion() {
        let expectation = self.expectation(description: "testgetPortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        TestUtils.initialize("getPortion") { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidName() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getPortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getPortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getPortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getPortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("getPortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getPortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getPortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetPortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getPortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getPortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getPortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPortions() {
        let expectation = self.expectation(description: "testgetPortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        TestUtils.initialize("getPortions") { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidName() {
        let expectation = self.expectation(description: "testgetPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getPortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getPortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getPortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getPortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getPortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getPortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getPortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getPortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getPortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getPortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getPortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getPortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetPortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getPortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getPortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getPortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getPortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPortions(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPresentation() {
        let expectation = self.expectation(description: "testgetPresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "getPresentation", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPresentation", name: "storage", type: "String")
        TestUtils.initialize("getPresentation") { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidName() {
        let expectation = self.expectation(description: "testgetPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentation", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getPresentation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getPresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidPassword() {
        let expectation = self.expectation(description: "testgetPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentation", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getPresentation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getPresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidFolder() {
        let expectation = self.expectation(description: "testgetPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentation", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getPresentation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getPresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationInvalidStorage() {
        let expectation = self.expectation(description: "testgetPresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentation", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getPresentation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getPresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentation(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPresentationImages() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        let paramName : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "storage", type: "String")
        TestUtils.initialize("getPresentationImages") { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidName() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getPresentationImages", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getPresentationImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getPresentationImages", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getPresentationImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getPresentationImages", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getPresentationImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetPresentationImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationImages", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getPresentationImages", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getPresentationImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentationImages(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetPresentationTextItems() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        let paramName : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "name", type: "String")
        let paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "withEmpty", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "storage", type: "String")
        TestUtils.initialize("getPresentationTextItems") { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getPresentationTextItems", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getPresentationTextItems", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "storage", type: "String")
        paramWithEmpty = TestUtils.getInvalidTestValue(functionName: "getPresentationTextItems", name: "withEmpty", value: paramWithEmpty as Any, type: "Bool")
        TestUtils.initialize("getPresentationTextItems", "withEmpty", paramWithEmpty) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "withEmpty", parameterValue: paramWithEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getPresentationTextItems", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getPresentationTextItems", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getPresentationTextItems", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getPresentationTextItems", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetPresentationTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetPresentationTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "name", type: "String")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getPresentationTextItems", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getPresentationTextItems", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getPresentationTextItems", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getPresentationTextItems(paramName, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getPresentationTextItems", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetProtectionProperties() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "storage", type: "String")
        TestUtils.initialize("getProtectionProperties") { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getProtectionProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getProtectionProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getProtectionProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getProtectionProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getProtectionProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getProtectionProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetProtectionPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetProtectionProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getProtectionProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getProtectionProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getProtectionProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getProtectionProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getProtectionProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSections() {
        let expectation = self.expectation(description: "testgetSections")
        let paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        TestUtils.initialize("getSections") { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidName() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSections", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSections", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSections", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "getSections", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSections", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSections", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSections(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetShape() {
        let expectation = self.expectation(description: "testgetShape")
        let paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        TestUtils.initialize("getShape") { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidName() {
        let expectation = self.expectation(description: "testgetShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetShape")
        var paramName : String = TestUtils.getTestValue(functionName: "getShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getShape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getShape(paramName, paramSlideIndex, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetShapes() {
        let expectation = self.expectation(description: "testgetShapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getShapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapes", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getShapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getShapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getShapes", name: "storage", type: "String")
        TestUtils.initialize("getShapes") { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidName() {
        let expectation = self.expectation(description: "testgetShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getShapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getShapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getShapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getShapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getShapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getShapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getShapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getShapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetShapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetShapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getShapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getShapes", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getShapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getShapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getShapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getShapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getShapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getShapes(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getShapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlide() {
        let expectation = self.expectation(description: "testgetSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlide", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlide", name: "storage", type: "String")
        TestUtils.initialize("getSlide") { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidName() {
        let expectation = self.expectation(description: "testgetSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlide", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlide(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideComments() {
        let expectation = self.expectation(description: "testgetSlideComments")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideComments", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "storage", type: "String")
        TestUtils.initialize("getSlideComments") { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideComments", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideComments", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideComments", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideComments", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideComments", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideComments", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideComments", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideComments", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideCommentsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideComments")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideComments", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideComments", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideComments", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideComments", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideComments(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideComments", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideHeaderFooter() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("getSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideHeaderFooter(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideImages() {
        let expectation = self.expectation(description: "testgetSlideImages")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideImages", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "storage", type: "String")
        TestUtils.initialize("getSlideImages") { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideImages", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideImages", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideImages", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideImages", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideImages", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideImages", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideImages", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideImages", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideImagesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideImages")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideImages", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideImages", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideImages", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideImages", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideImages(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideImages", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideProperties() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "storage", type: "String")
        TestUtils.initialize("getSlideProperties") { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidePropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlideTextItems() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        let paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        TestUtils.initialize("getSlideTextItems") { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidName() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlideTextItems", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlideTextItems", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSlideTextItems", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSlideTextItems", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidWithEmpty() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        paramWithEmpty = TestUtils.getInvalidTestValue(functionName: "getSlideTextItems", name: "withEmpty", value: paramWithEmpty as Any, type: "Bool")
        TestUtils.initialize("getSlideTextItems", "withEmpty", paramWithEmpty) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "withEmpty", parameterValue: paramWithEmpty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlideTextItems", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlideTextItems", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlideTextItems", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlideTextItems", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlideTextItemsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlideTextItems")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "slideIndex", type: "Int")
        var paramWithEmpty : Bool = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "withEmpty", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlideTextItems", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlideTextItems", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlideTextItems", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlideTextItems(paramName, paramSlideIndex, paramWithEmpty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlideTextItems", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSlides() {
        let expectation = self.expectation(description: "testgetSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "getSlides", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSlides", name: "storage", type: "String")
        TestUtils.initialize("getSlides") { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidName() {
        let expectation = self.expectation(description: "testgetSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlides", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSlides", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlides", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSlides", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlides", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSlides", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "getSlides", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSlides", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSlides", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSlides(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshape() {
        let expectation = self.expectation(description: "testgetSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        TestUtils.initialize("getSubshape") { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeInvalidName() {
        let expectation = self.expectation(description: "testgetSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshape", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapeParagraph() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("getSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraph", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapeParagraphs() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        TestUtils.initialize("getSubshapeParagraphs") { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphsInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphs", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphs", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphs", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphs", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphs", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphsInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphs", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphs", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphs", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapeParagraphs", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphs", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphs", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphs", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphs", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphs", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphs", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphs", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapeParagraphsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapeParagraphs")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "shapeIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapeParagraphs", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshapeParagraphs", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshapeParagraphs", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapeParagraphs(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapeParagraphs", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapePortion() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        TestUtils.initialize("getSubshapePortion") { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshapePortion", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "portionIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapePortions() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        TestUtils.initialize("getSubshapePortions") { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshapePortions", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapePortions", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshapePortions", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidShapeIndex() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapePortions", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapePortions", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshapePortions", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshapePortions", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapePortionsInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapePortions")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "paragraphIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapePortions", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshapePortions", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshapePortions", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapePortions(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapePortions", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetSubshapes() {
        let expectation = self.expectation(description: "testgetSubshapes")
        let paramName : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapes", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "path", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "storage", type: "String")
        TestUtils.initialize("getSubshapes") { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapesInvalidName() {
        let expectation = self.expectation(description: "testgetSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getSubshapes", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getSubshapes", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapes", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getSubshapes", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getSubshapes", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapes", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapesInvalidPath() {
        let expectation = self.expectation(description: "testgetSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "getSubshapes", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("getSubshapes", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapes", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapesInvalidPassword() {
        let expectation = self.expectation(description: "testgetSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getSubshapes", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getSubshapes", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapes", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapesInvalidFolder() {
        let expectation = self.expectation(description: "testgetSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getSubshapes", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getSubshapes", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapes", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetSubshapesInvalidStorage() {
        let expectation = self.expectation(description: "testgetSubshapes")
        var paramName : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getSubshapes", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "path", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getSubshapes", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getSubshapes", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getSubshapes", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getSubshapes(paramName, paramSlideIndex, paramPath, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getSubshapes", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetTheme() {
        let expectation = self.expectation(description: "testgetTheme")
        let paramName : String = TestUtils.getTestValue(functionName: "getTheme", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getTheme", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getTheme", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getTheme", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getTheme", name: "storage", type: "String")
        TestUtils.initialize("getTheme") { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidName() {
        let expectation = self.expectation(description: "testgetTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getTheme", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getTheme", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getTheme", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testgetTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getTheme", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "getTheme", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("getTheme", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidPassword() {
        let expectation = self.expectation(description: "testgetTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getTheme", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getTheme", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getTheme", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidFolder() {
        let expectation = self.expectation(description: "testgetTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getTheme", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getTheme", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getTheme", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetThemeInvalidStorage() {
        let expectation = self.expectation(description: "testgetTheme")
        var paramName : String = TestUtils.getTestValue(functionName: "getTheme", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "getTheme", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getTheme", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getTheme", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getTheme", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getTheme", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getTheme", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getTheme(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getTheme", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testGetViewProperties() {
        let expectation = self.expectation(description: "testgetViewProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "name", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "storage", type: "String")
        TestUtils.initialize("getViewProperties") { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testgetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "getViewProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("getViewProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testgetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "getViewProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("getViewProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testgetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "getViewProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("getViewProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testGetViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testgetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "name", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "getViewProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "getViewProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("getViewProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.getViewProperties(paramName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "getViewProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testImportFromHtml() {
        let expectation = self.expectation(description: "testimportFromHtml")
        let paramName : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "name", type: "String")
        let paramHtml : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "html", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "storage", type: "String")
        TestUtils.initialize("importFromHtml") { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidName() {
        let expectation = self.expectation(description: "testimportFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "importFromHtml", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("importFromHtml", "name", paramName) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidHtml() {
        let expectation = self.expectation(description: "testimportFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "storage", type: "String")
        paramHtml = TestUtils.getInvalidTestValue(functionName: "importFromHtml", name: "html", value: paramHtml as Any, type: "String")
        TestUtils.initialize("importFromHtml", "html", paramHtml) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "html", parameterValue: paramHtml as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidPassword() {
        let expectation = self.expectation(description: "testimportFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "importFromHtml", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("importFromHtml", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidFolder() {
        let expectation = self.expectation(description: "testimportFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "importFromHtml", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("importFromHtml", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromHtmlInvalidStorage() {
        let expectation = self.expectation(description: "testimportFromHtml")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "name", type: "String")
        var paramHtml : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "html", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromHtml", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "importFromHtml", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("importFromHtml", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.importFromHtml(paramName, paramHtml, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromHtml", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testImportFromPdf() {
        let expectation = self.expectation(description: "testimportFromPdf")
        let paramName : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "name", type: "String")
        let paramPdf : Data = TestUtils.getTestValue(functionName: "importFromPdf", name: "pdf", type: "Data")
        let paramPassword : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "storage", type: "String")
        TestUtils.initialize("importFromPdf") { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidName() {
        let expectation = self.expectation(description: "testimportFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "importFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "importFromPdf", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("importFromPdf", "name", paramName) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidPdf() {
        let expectation = self.expectation(description: "testimportFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "importFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "storage", type: "String")
        paramPdf = TestUtils.getInvalidTestValue(functionName: "importFromPdf", name: "pdf", value: paramPdf as Any, type: "Data")
        TestUtils.initialize("importFromPdf", "pdf", paramPdf) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "pdf", parameterValue: paramPdf as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidPassword() {
        let expectation = self.expectation(description: "testimportFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "importFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "importFromPdf", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("importFromPdf", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidFolder() {
        let expectation = self.expectation(description: "testimportFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "importFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "importFromPdf", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("importFromPdf", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testImportFromPdfInvalidStorage() {
        let expectation = self.expectation(description: "testimportFromPdf")
        var paramName : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "name", type: "String")
        var paramPdf : Data = TestUtils.getTestValue(functionName: "importFromPdf", name: "pdf", type: "Data")
        var paramPassword : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "importFromPdf", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "importFromPdf", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("importFromPdf", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.importFromPdf(paramName, paramPdf, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "importFromPdf", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMerge() {
        let expectation = self.expectation(description: "testmerge")
        let paramName : String = TestUtils.getTestValue(functionName: "merge", name: "name", type: "String")
        let paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "merge", name: "request", type: "PresentationsMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "merge", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "merge", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "merge", name: "storage", type: "String")
        TestUtils.initialize("merge") { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidName() {
        let expectation = self.expectation(description: "testmerge")
        var paramName : String = TestUtils.getTestValue(functionName: "merge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "merge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "merge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "merge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "merge", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "merge", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("merge", "name", paramName) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidRequest() {
        let expectation = self.expectation(description: "testmerge")
        var paramName : String = TestUtils.getTestValue(functionName: "merge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "merge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "merge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "merge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "merge", name: "storage", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "merge", name: "request", value: paramRequest as Any, type: "PresentationsMergeRequest")
        TestUtils.initialize("merge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidPassword() {
        let expectation = self.expectation(description: "testmerge")
        var paramName : String = TestUtils.getTestValue(functionName: "merge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "merge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "merge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "merge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "merge", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "merge", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("merge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidFolder() {
        let expectation = self.expectation(description: "testmerge")
        var paramName : String = TestUtils.getTestValue(functionName: "merge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "merge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "merge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "merge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "merge", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "merge", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("merge", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeInvalidStorage() {
        let expectation = self.expectation(description: "testmerge")
        var paramName : String = TestUtils.getTestValue(functionName: "merge", name: "name", type: "String")
        var paramRequest : PresentationsMergeRequest = TestUtils.getTestValue(functionName: "merge", name: "request", type: "PresentationsMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "merge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "merge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "merge", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "merge", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("merge", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.merge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "merge", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMergeAndSaveOnline() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "outPath", type: "String")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "files", type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "request", type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "storage", type: "String")
        TestUtils.initialize("mergeAndSaveOnline") { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidOutPath() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "request", type: "OrderedMergeRequest")
        var paramStorage : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "storage", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "mergeAndSaveOnline", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("mergeAndSaveOnline", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidFiles() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "request", type: "OrderedMergeRequest")
        var paramStorage : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "storage", type: "String")
        paramFiles = TestUtils.getInvalidTestValue(functionName: "mergeAndSaveOnline", name: "files", value: paramFiles as Any, type: "[Data]")
        TestUtils.initialize("mergeAndSaveOnline", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidRequest() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "request", type: "OrderedMergeRequest")
        var paramStorage : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "storage", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "mergeAndSaveOnline", name: "request", value: paramRequest as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("mergeAndSaveOnline", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeAndSaveOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testmergeAndSaveOnline")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "outPath", type: "String")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "request", type: "OrderedMergeRequest")
        var paramStorage : String = TestUtils.getTestValue(functionName: "mergeAndSaveOnline", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "mergeAndSaveOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("mergeAndSaveOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.mergeAndSaveOnline(paramOutPath, paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeAndSaveOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMergeOnline() {
        let expectation = self.expectation(description: "testmergeOnline")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeOnline", name: "files", type: "[Data]")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeOnline", name: "request", type: "OrderedMergeRequest")
        let paramStorage : String = TestUtils.getTestValue(functionName: "mergeOnline", name: "storage", type: "String")
        TestUtils.initialize("mergeOnline") { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeOnlineInvalidFiles() {
        let expectation = self.expectation(description: "testmergeOnline")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeOnline", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeOnline", name: "request", type: "OrderedMergeRequest")
        var paramStorage : String = TestUtils.getTestValue(functionName: "mergeOnline", name: "storage", type: "String")
        paramFiles = TestUtils.getInvalidTestValue(functionName: "mergeOnline", name: "files", value: paramFiles as Any, type: "[Data]")
        TestUtils.initialize("mergeOnline", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeOnline", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeOnlineInvalidRequest() {
        let expectation = self.expectation(description: "testmergeOnline")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeOnline", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeOnline", name: "request", type: "OrderedMergeRequest")
        var paramStorage : String = TestUtils.getTestValue(functionName: "mergeOnline", name: "storage", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "mergeOnline", name: "request", value: paramRequest as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("mergeOnline", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeOnline", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMergeOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testmergeOnline")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "mergeOnline", name: "files", type: "[Data]")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "mergeOnline", name: "request", type: "OrderedMergeRequest")
        var paramStorage : String = TestUtils.getTestValue(functionName: "mergeOnline", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "mergeOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("mergeOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.mergeOnline(paramFiles, paramRequest, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "mergeOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFile() {
        let expectation = self.expectation(description: "testmoveFile")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        TestUtils.initialize("moveFile") { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("moveFile", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("moveFile", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("moveFile", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFileInvalidVersionId() {
        let expectation = self.expectation(description: "testmoveFile")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFile", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFile", name: "destStorageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "moveFile", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "moveFile", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("moveFile", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.moveFile(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFile", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveFolder() {
        let expectation = self.expectation(description: "testmoveFolder")
        let paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        let paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        let paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        let paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        TestUtils.initialize("moveFolder") { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramSrcPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcPath", value: paramSrcPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcPath", paramSrcPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcPath", parameterValue: paramSrcPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestPath() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramDestPath = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destPath", value: paramDestPath as Any, type: "String")
        TestUtils.initialize("moveFolder", "destPath", paramDestPath) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destPath", parameterValue: paramDestPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidSrcStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramSrcStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "srcStorageName", value: paramSrcStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "srcStorageName", paramSrcStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "srcStorageName", parameterValue: paramSrcStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveFolderInvalidDestStorageName() {
        let expectation = self.expectation(description: "testmoveFolder")
        var paramSrcPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcPath", type: "String")
        var paramDestPath : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destPath", type: "String")
        var paramSrcStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "srcStorageName", type: "String")
        var paramDestStorageName : String = TestUtils.getTestValue(functionName: "moveFolder", name: "destStorageName", type: "String")
        paramDestStorageName = TestUtils.getInvalidTestValue(functionName: "moveFolder", name: "destStorageName", value: paramDestStorageName as Any, type: "String")
        TestUtils.initialize("moveFolder", "destStorageName", paramDestStorageName) { (response, error) -> Void in
            SlidesAPI.moveFolder(paramSrcPath, paramDestPath, paramSrcStorageName, paramDestStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveFolder", parameterName: "destStorageName", parameterValue: paramDestStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveSection() {
        let expectation = self.expectation(description: "testmoveSection")
        let paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        TestUtils.initialize("moveSection") { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidName() {
        let expectation = self.expectation(description: "testmoveSection")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "moveSection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("moveSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testmoveSection")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        paramSectionIndex = TestUtils.getInvalidTestValue(functionName: "moveSection", name: "sectionIndex", value: paramSectionIndex as Any, type: "Int")
        TestUtils.initialize("moveSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidNewPosition() {
        let expectation = self.expectation(description: "testmoveSection")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        paramNewPosition = TestUtils.getInvalidTestValue(functionName: "moveSection", name: "newPosition", value: paramNewPosition as Any, type: "Int")
        TestUtils.initialize("moveSection", "newPosition", paramNewPosition) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "newPosition", parameterValue: paramNewPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidPassword() {
        let expectation = self.expectation(description: "testmoveSection")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "moveSection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("moveSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidFolder() {
        let expectation = self.expectation(description: "testmoveSection")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "moveSection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("moveSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSectionInvalidStorage() {
        let expectation = self.expectation(description: "testmoveSection")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "moveSection", name: "sectionIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSection", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "moveSection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("moveSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.moveSection(paramName, paramSectionIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testMoveSlide() {
        let expectation = self.expectation(description: "testmoveSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        let paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        TestUtils.initialize("moveSlide") { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidName() {
        let expectation = self.expectation(description: "testmoveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "moveSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("moveSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testmoveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "moveSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("moveSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidNewPosition() {
        let expectation = self.expectation(description: "testmoveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        paramNewPosition = TestUtils.getInvalidTestValue(functionName: "moveSlide", name: "newPosition", value: paramNewPosition as Any, type: "Int")
        TestUtils.initialize("moveSlide", "newPosition", paramNewPosition) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "newPosition", parameterValue: paramNewPosition as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidPassword() {
        let expectation = self.expectation(description: "testmoveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "moveSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("moveSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidFolder() {
        let expectation = self.expectation(description: "testmoveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "moveSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("moveSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testMoveSlideInvalidStorage() {
        let expectation = self.expectation(description: "testmoveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "moveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "slideIndex", type: "Int")
        var paramNewPosition : Int = TestUtils.getTestValue(functionName: "moveSlide", name: "newPosition", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "moveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "moveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "moveSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "moveSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("moveSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.moveSlide(paramName, paramSlideIndex, paramNewPosition, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "moveSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testNotesSlideExists() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        let paramName : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExists", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "storage", type: "String")
        TestUtils.initialize("notesSlideExists") { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidName() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "notesSlideExists", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("notesSlideExists", "name", paramName) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidSlideIndex() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "notesSlideExists", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("notesSlideExists", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidPassword() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "notesSlideExists", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("notesSlideExists", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidFolder() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "notesSlideExists", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("notesSlideExists", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsInvalidStorage() {
        let expectation = self.expectation(description: "testnotesSlideExists")
        var paramName : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExists", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "notesSlideExists", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "notesSlideExists", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("notesSlideExists", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.notesSlideExists(paramName, paramSlideIndex, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExists", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testNotesSlideExistsOnline() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "slideIndex", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "password", type: "String")
        TestUtils.initialize("notesSlideExistsOnline") { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "notesSlideExistsOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("notesSlideExistsOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExistsOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "notesSlideExistsOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("notesSlideExistsOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExistsOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testNotesSlideExistsOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testnotesSlideExistsOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "slideIndex", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "notesSlideExistsOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "notesSlideExistsOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("notesSlideExistsOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.notesSlideExistsOnline(paramDocument, paramSlideIndex, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "notesSlideExistsOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testObjectExists() {
        let expectation = self.expectation(description: "testobjectExists")
        let paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        let paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        TestUtils.initialize("objectExists") { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidPath() {
        let expectation = self.expectation(description: "testobjectExists")
        var paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("objectExists", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidStorageName() {
        let expectation = self.expectation(description: "testobjectExists")
        var paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("objectExists", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testObjectExistsInvalidVersionId() {
        let expectation = self.expectation(description: "testobjectExists")
        var paramPath : String = TestUtils.getTestValue(functionName: "objectExists", name: "path", type: "String")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "objectExists", name: "storageName", type: "String")
        var paramVersionId : String = TestUtils.getTestValue(functionName: "objectExists", name: "versionId", type: "String")
        paramVersionId = TestUtils.getInvalidTestValue(functionName: "objectExists", name: "versionId", value: paramVersionId as Any, type: "String")
        TestUtils.initialize("objectExists", "versionId", paramVersionId) { (response, error) -> Void in
            SlidesAPI.objectExists(paramPath, paramStorageName, paramVersionId) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "objectExists", parameterName: "versionId", parameterValue: paramVersionId as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testOrderedMerge() {
        let expectation = self.expectation(description: "testorderedMerge")
        let paramName : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "name", type: "String")
        let paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "orderedMerge", name: "request", type: "OrderedMergeRequest")
        let paramPassword : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "storage", type: "String")
        TestUtils.initialize("orderedMerge") { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidName() {
        let expectation = self.expectation(description: "testorderedMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "orderedMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "orderedMerge", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("orderedMerge", "name", paramName) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidRequest() {
        let expectation = self.expectation(description: "testorderedMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "orderedMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "storage", type: "String")
        paramRequest = TestUtils.getInvalidTestValue(functionName: "orderedMerge", name: "request", value: paramRequest as Any, type: "OrderedMergeRequest")
        TestUtils.initialize("orderedMerge", "request", paramRequest) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "request", parameterValue: paramRequest as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidPassword() {
        let expectation = self.expectation(description: "testorderedMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "orderedMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "orderedMerge", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("orderedMerge", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidFolder() {
        let expectation = self.expectation(description: "testorderedMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "orderedMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "orderedMerge", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("orderedMerge", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testOrderedMergeInvalidStorage() {
        let expectation = self.expectation(description: "testorderedMerge")
        var paramName : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "name", type: "String")
        var paramRequest : OrderedMergeRequest = TestUtils.getTestValue(functionName: "orderedMerge", name: "request", type: "OrderedMergeRequest")
        var paramPassword : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "orderedMerge", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "orderedMerge", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("orderedMerge", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.orderedMerge(paramName, paramRequest, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "orderedMerge", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testPipeline() {
        let expectation = self.expectation(description: "testpipeline")
        let paramPipeline : Pipeline = TestUtils.getTestValue(functionName: "pipeline", name: "pipeline", type: "Pipeline")
        let paramFiles : [Data] = TestUtils.getTestValue(functionName: "pipeline", name: "files", type: "[Data]")
        TestUtils.initialize("pipeline") { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPipelineInvalidPipeline() {
        let expectation = self.expectation(description: "testpipeline")
        var paramPipeline : Pipeline = TestUtils.getTestValue(functionName: "pipeline", name: "pipeline", type: "Pipeline")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "pipeline", name: "files", type: "[Data]")
        paramPipeline = TestUtils.getInvalidTestValue(functionName: "pipeline", name: "pipeline", value: paramPipeline as Any, type: "Pipeline")
        TestUtils.initialize("pipeline", "pipeline", paramPipeline) { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "pipeline", parameterName: "pipeline", parameterValue: paramPipeline as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testPipelineInvalidFiles() {
        let expectation = self.expectation(description: "testpipeline")
        var paramPipeline : Pipeline = TestUtils.getTestValue(functionName: "pipeline", name: "pipeline", type: "Pipeline")
        var paramFiles : [Data] = TestUtils.getTestValue(functionName: "pipeline", name: "files", type: "[Data]")
        paramFiles = TestUtils.getInvalidTestValue(functionName: "pipeline", name: "files", value: paramFiles as Any, type: "[Data]")
        TestUtils.initialize("pipeline", "files", paramFiles) { (response, error) -> Void in
            SlidesAPI.pipeline(paramPipeline, paramFiles) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "pipeline", parameterName: "files", parameterValue: paramFiles as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReorderSlides() {
        let expectation = self.expectation(description: "testreorderSlides")
        let paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        let paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        let paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        let paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        TestUtils.initialize("reorderSlides") { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidName() {
        let expectation = self.expectation(description: "testreorderSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "reorderSlides", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("reorderSlides", "name", paramName) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidOldPositions() {
        let expectation = self.expectation(description: "testreorderSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        paramOldPositions = TestUtils.getInvalidTestValue(functionName: "reorderSlides", name: "oldPositions", value: paramOldPositions as Any, type: "[Int]")
        TestUtils.initialize("reorderSlides", "oldPositions", paramOldPositions) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "oldPositions", parameterValue: paramOldPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidNewPositions() {
        let expectation = self.expectation(description: "testreorderSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        paramNewPositions = TestUtils.getInvalidTestValue(functionName: "reorderSlides", name: "newPositions", value: paramNewPositions as Any, type: "[Int]")
        TestUtils.initialize("reorderSlides", "newPositions", paramNewPositions) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "newPositions", parameterValue: paramNewPositions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidPassword() {
        let expectation = self.expectation(description: "testreorderSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "reorderSlides", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("reorderSlides", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidFolder() {
        let expectation = self.expectation(description: "testreorderSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "reorderSlides", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("reorderSlides", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReorderSlidesInvalidStorage() {
        let expectation = self.expectation(description: "testreorderSlides")
        var paramName : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "name", type: "String")
        var paramOldPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "oldPositions", type: "[Int]")
        var paramNewPositions : [Int] = TestUtils.getTestValue(functionName: "reorderSlides", name: "newPositions", type: "[Int]")
        var paramPassword : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "reorderSlides", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "reorderSlides", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("reorderSlides", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.reorderSlides(paramName, paramOldPositions, paramNewPositions, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "reorderSlides", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplacePresentationText() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        let paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        TestUtils.initialize("replacePresentationText") { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidName() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        var paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "replacePresentationText", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("replacePresentationText", "name", paramName) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidOldValue() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        var paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "replacePresentationText", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("replacePresentationText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidNewValue() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        var paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "replacePresentationText", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("replacePresentationText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        var paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "replacePresentationText", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("replacePresentationText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidPassword() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        var paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "replacePresentationText", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("replacePresentationText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidFolder() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        var paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "replacePresentationText", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("replacePresentationText", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextInvalidStorage() {
        let expectation = self.expectation(description: "testreplacePresentationText")
        var paramName : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "name", type: "String")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replacePresentationText", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "replacePresentationText", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("replacePresentationText", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.replacePresentationText(paramName, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationText", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplacePresentationTextOnline() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "document", type: "Data")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "password", type: "String")
        TestUtils.initialize("replacePresentationTextOnline") { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "replacePresentationTextOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("replacePresentationTextOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidOldValue() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "password", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidNewValue() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "password", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "replacePresentationTextOnline", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "password", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("replacePresentationTextOnline", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplacePresentationTextOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testreplacePresentationTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "document", type: "Data")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replacePresentationTextOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "replacePresentationTextOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("replacePresentationTextOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replacePresentationTextOnline(paramDocument, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replacePresentationTextOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplaceSlideText() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        let paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        TestUtils.initialize("replaceSlideText") { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidName() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("replaceSlideText", "name", paramName) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidSlideIndex() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("replaceSlideText", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidOldValue() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("replaceSlideText", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidNewValue() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("replaceSlideText", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("replaceSlideText", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidPassword() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("replaceSlideText", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidFolder() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("replaceSlideText", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextInvalidStorage() {
        let expectation = self.expectation(description: "testreplaceSlideText")
        var paramName : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideText", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideText", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "replaceSlideText", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "replaceSlideText", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("replaceSlideText", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.replaceSlideText(paramName, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideText", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testReplaceSlideTextOnline() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        let paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        let paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        let paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        let paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        TestUtils.initialize("replaceSlideTextOnline") { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "replaceSlideTextOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("replaceSlideTextOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("replaceSlideTextOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidOldValue() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        paramOldValue = TestUtils.getInvalidTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", value: paramOldValue as Any, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "oldValue", paramOldValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "oldValue", parameterValue: paramOldValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidNewValue() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        paramNewValue = TestUtils.getInvalidTestValue(functionName: "replaceSlideTextOnline", name: "newValue", value: paramNewValue as Any, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "newValue", paramNewValue) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "newValue", parameterValue: paramNewValue as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidIgnoreCase() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        paramIgnoreCase = TestUtils.getInvalidTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", value: paramIgnoreCase as Any, type: "Bool")
        TestUtils.initialize("replaceSlideTextOnline", "ignoreCase", paramIgnoreCase) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "ignoreCase", parameterValue: paramIgnoreCase as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testReplaceSlideTextOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testreplaceSlideTextOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "slideIndex", type: "Int")
        var paramOldValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "oldValue", type: "String")
        var paramNewValue : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "newValue", type: "String")
        var paramIgnoreCase : Bool = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "ignoreCase", type: "Bool")
        var paramPassword : String = TestUtils.getTestValue(functionName: "replaceSlideTextOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "replaceSlideTextOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("replaceSlideTextOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.replaceSlideTextOnline(paramDocument, paramSlideIndex, paramOldValue, paramNewValue, paramIgnoreCase, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "replaceSlideTextOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveNotesSlideShape() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        TestUtils.initialize("saveNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("saveNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("saveNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidFormat() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidOptions() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("saveNotesSlideShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("saveNotesSlideShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("saveNotesSlideShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidBounds() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveNotesSlideShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "saveNotesSlideShape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("saveNotesSlideShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveNotesSlideShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSavePresentation() {
        let expectation = self.expectation(description: "testsavePresentation")
        let paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        let paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        let paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        TestUtils.initialize("savePresentation") { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidName() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("savePresentation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidFormat() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("savePresentation", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidOutPath() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("savePresentation", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidOptions() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("savePresentation", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidPassword() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("savePresentation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidFolder() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("savePresentation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidStorage() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("savePresentation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSavePresentationInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsavePresentation")
        var paramName : String = TestUtils.getTestValue(functionName: "savePresentation", name: "name", type: "String")
        var paramFormat : String = TestUtils.getTestValue(functionName: "savePresentation", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "savePresentation", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "savePresentation", name: "options", type: "ExportOptions")
        var paramPassword : String = TestUtils.getTestValue(functionName: "savePresentation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "savePresentation", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "savePresentation", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "savePresentation", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("savePresentation", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.savePresentation(paramName, paramFormat, paramOutPath, paramOptions, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "savePresentation", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveShape() {
        let expectation = self.expectation(description: "testsaveShape")
        let paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        TestUtils.initialize("saveShape") { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidName() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("saveShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("saveShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("saveShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidFormat() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("saveShape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("saveShape", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidOptions() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("saveShape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidScaleX() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("saveShape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidScaleY() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("saveShape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidBounds() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("saveShape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidPassword() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("saveShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidFolder() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("saveShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidStorage() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("saveShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveShape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveShape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "saveShape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("saveShape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveShape(paramName, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveShapeOnline() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("saveShapeOnline") { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("saveShapeOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("saveShapeOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("saveShapeOnline", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("saveShapeOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("saveShapeOnline", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidScaleX() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("saveShapeOnline", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidScaleY() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("saveShapeOnline", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidBounds() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("saveShapeOnline", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("saveShapeOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("saveShapeOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveShapeOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveShapeOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "outPath", type: "String")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveShapeOnline", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "saveShapeOnline", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("saveShapeOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveShapeOnline(paramDocument, paramSlideIndex, paramShapeIndex, paramFormat, paramOutPath, paramScaleX, paramScaleY, paramBounds, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveShapeOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveSlide() {
        let expectation = self.expectation(description: "testsaveSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        TestUtils.initialize("saveSlide") { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidName() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("saveSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("saveSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidFormat() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("saveSlide", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("saveSlide", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidOptions() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("saveSlide", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidWidth() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("saveSlide", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidHeight() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("saveSlide", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidPassword() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("saveSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidFolder() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("saveSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidStorage() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("saveSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlide", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlide", name: "outPath", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "saveSlide", name: "options", type: "ExportOptions")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlide", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlide", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlide", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "saveSlide", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("saveSlide", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSlide(paramName, paramSlideIndex, paramFormat, paramOutPath, paramOptions, paramWidth, paramHeight, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlide", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveSlideOnline() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("saveSlideOnline") { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("saveSlideOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("saveSlideOnline", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("saveSlideOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("saveSlideOnline", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("saveSlideOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("saveSlideOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("saveSlideOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("saveSlideOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSlideOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveSlideOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "document", type: "Data")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "slideIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "outPath", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "height", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSlideOnline", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "saveSlideOnline", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("saveSlideOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSlideOnline(paramDocument, paramSlideIndex, paramFormat, paramOutPath, paramWidth, paramHeight, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSlideOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSaveSubshape() {
        let expectation = self.expectation(description: "testsaveSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        let paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        let paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        let paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        let paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        let paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        let paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        TestUtils.initialize("saveSubshape") { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidName() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("saveSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("saveSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("saveSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("saveSubshape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidFormat() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("saveSubshape", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidOutPath() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramOutPath = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "outPath", value: paramOutPath as Any, type: "String")
        TestUtils.initialize("saveSubshape", "outPath", paramOutPath) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "outPath", parameterValue: paramOutPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidOptions() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "options", value: paramOptions as Any, type: "IShapeExportOptions")
        TestUtils.initialize("saveSubshape", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidScaleX() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramScaleX = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "scaleX", value: paramScaleX as Any, type: "Double")
        TestUtils.initialize("saveSubshape", "scaleX", paramScaleX) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "scaleX", parameterValue: paramScaleX as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidScaleY() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramScaleY = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "scaleY", value: paramScaleY as Any, type: "Double")
        TestUtils.initialize("saveSubshape", "scaleY", paramScaleY) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "scaleY", parameterValue: paramScaleY as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidBounds() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramBounds = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "bounds", value: paramBounds as Any, type: "String")
        TestUtils.initialize("saveSubshape", "bounds", paramBounds) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "bounds", parameterValue: paramBounds as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("saveSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("saveSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("saveSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSaveSubshapeInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsaveSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "saveSubshape", name: "shapeIndex", type: "Int")
        var paramFormat : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "format", type: "String")
        var paramOutPath : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "outPath", type: "String")
        var paramOptions : IShapeExportOptions = TestUtils.getTestValue(functionName: "saveSubshape", name: "options", type: "IShapeExportOptions")
        var paramScaleX : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleX", type: "Double")
        var paramScaleY : Double = TestUtils.getTestValue(functionName: "saveSubshape", name: "scaleY", type: "Double")
        var paramBounds : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "bounds", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "saveSubshape", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "saveSubshape", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("saveSubshape", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.saveSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramFormat, paramOutPath, paramOptions, paramScaleX, paramScaleY, paramBounds, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "saveSubshape", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetAnimation() {
        let expectation = self.expectation(description: "testsetAnimation")
        let paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        let paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        TestUtils.initialize("setAnimation") { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidName() {
        let expectation = self.expectation(description: "testsetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setAnimation", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setAnimation", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "setAnimation", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("setAnimation", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidAnimation() {
        let expectation = self.expectation(description: "testsetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        paramAnimation = TestUtils.getInvalidTestValue(functionName: "setAnimation", name: "animation", value: paramAnimation as Any, type: "SlideAnimation")
        TestUtils.initialize("setAnimation", "animation", paramAnimation) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "animation", parameterValue: paramAnimation as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidPassword() {
        let expectation = self.expectation(description: "testsetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setAnimation", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setAnimation", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidFolder() {
        let expectation = self.expectation(description: "testsetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setAnimation", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setAnimation", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetAnimationInvalidStorage() {
        let expectation = self.expectation(description: "testsetAnimation")
        var paramName : String = TestUtils.getTestValue(functionName: "setAnimation", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setAnimation", name: "slideIndex", type: "Int")
        var paramAnimation : SlideAnimation = TestUtils.getTestValue(functionName: "setAnimation", name: "animation", type: "SlideAnimation")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setAnimation", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setAnimation", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setAnimation", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setAnimation", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setAnimation", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setAnimation(paramName, paramSlideIndex, paramAnimation, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setAnimation", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetBackground() {
        let expectation = self.expectation(description: "testsetBackground")
        let paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        let paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        TestUtils.initialize("setBackground") { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidName() {
        let expectation = self.expectation(description: "testsetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setBackground", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setBackground", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "setBackground", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("setBackground", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidBackground() {
        let expectation = self.expectation(description: "testsetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        paramBackground = TestUtils.getInvalidTestValue(functionName: "setBackground", name: "background", value: paramBackground as Any, type: "SlideBackground")
        TestUtils.initialize("setBackground", "background", paramBackground) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "background", parameterValue: paramBackground as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidPassword() {
        let expectation = self.expectation(description: "testsetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setBackground", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setBackground", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidFolder() {
        let expectation = self.expectation(description: "testsetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setBackground", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setBackground", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundInvalidStorage() {
        let expectation = self.expectation(description: "testsetBackground")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackground", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackground", name: "slideIndex", type: "Int")
        var paramBackground : SlideBackground = TestUtils.getTestValue(functionName: "setBackground", name: "background", type: "SlideBackground")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackground", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackground", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackground", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setBackground", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setBackground", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setBackground(paramName, paramSlideIndex, paramBackground, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackground", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetBackgroundColor() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        let paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        let paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        TestUtils.initialize("setBackgroundColor") { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidName() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setBackgroundColor", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setBackgroundColor", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "setBackgroundColor", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("setBackgroundColor", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidColor() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        paramColor = TestUtils.getInvalidTestValue(functionName: "setBackgroundColor", name: "color", value: paramColor as Any, type: "String")
        TestUtils.initialize("setBackgroundColor", "color", paramColor) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "color", parameterValue: paramColor as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidPassword() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setBackgroundColor", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setBackgroundColor", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidFolder() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setBackgroundColor", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setBackgroundColor", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetBackgroundColorInvalidStorage() {
        let expectation = self.expectation(description: "testsetBackgroundColor")
        var paramName : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "slideIndex", type: "Int")
        var paramColor : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "color", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setBackgroundColor", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setBackgroundColor", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setBackgroundColor", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setBackgroundColor(paramName, paramSlideIndex, paramColor, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setBackgroundColor", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetDocumentProperties() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "name", type: "String")
        let paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "properties", type: "DocumentProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "storage", type: "String")
        TestUtils.initialize("setDocumentProperties") { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidName() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setDocumentProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setDocumentProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidProperties() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "storage", type: "String")
        paramProperties = TestUtils.getInvalidTestValue(functionName: "setDocumentProperties", name: "properties", value: paramProperties as Any, type: "DocumentProperties")
        TestUtils.initialize("setDocumentProperties", "properties", paramProperties) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "properties", parameterValue: paramProperties as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setDocumentProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setDocumentProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setDocumentProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setDocumentProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testsetDocumentProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "name", type: "String")
        var paramProperties : DocumentProperties = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "properties", type: "DocumentProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setDocumentProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setDocumentProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setDocumentProperties(paramName, paramProperties, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetDocumentProperty() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        let paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        let paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        let paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        TestUtils.initialize("setDocumentProperty") { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidName() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setDocumentProperty", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setDocumentProperty", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidPropertyName() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        paramPropertyName = TestUtils.getInvalidTestValue(functionName: "setDocumentProperty", name: "propertyName", value: paramPropertyName as Any, type: "String")
        TestUtils.initialize("setDocumentProperty", "propertyName", paramPropertyName) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "propertyName", parameterValue: paramPropertyName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidProperty() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        paramProperty = TestUtils.getInvalidTestValue(functionName: "setDocumentProperty", name: "property", value: paramProperty as Any, type: "DocumentProperty")
        TestUtils.initialize("setDocumentProperty", "property", paramProperty) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "property", parameterValue: paramProperty as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidPassword() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setDocumentProperty", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setDocumentProperty", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidFolder() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setDocumentProperty", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setDocumentProperty", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetDocumentPropertyInvalidStorage() {
        let expectation = self.expectation(description: "testsetDocumentProperty")
        var paramName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "name", type: "String")
        var paramPropertyName : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "propertyName", type: "String")
        var paramProperty : DocumentProperty = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "property", type: "DocumentProperty")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setDocumentProperty", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setDocumentProperty", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setDocumentProperty", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setDocumentProperty(paramName, paramPropertyName, paramProperty, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setDocumentProperty", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetNotesSlideHeaderFooter() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("setNotesSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", value: paramDto as Any, type: "NotesSlideHeaderFooter")
        TestUtils.initialize("setNotesSlideHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetNotesSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testsetNotesSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : NotesSlideHeaderFooter = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "dto", type: "NotesSlideHeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setNotesSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setNotesSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setNotesSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setNotesSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetPresentationHeaderFooter() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "name", type: "String")
        let paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "dto", type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("setPresentationHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setPresentationHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "setPresentationHeaderFooter", name: "dto", value: paramDto as Any, type: "HeaderFooter")
        TestUtils.initialize("setPresentationHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setPresentationHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setPresentationHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetPresentationHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testsetPresentationHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "name", type: "String")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setPresentationHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setPresentationHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setPresentationHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setPresentationHeaderFooter(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setPresentationHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetProtection() {
        let expectation = self.expectation(description: "testsetProtection")
        let paramName : String = TestUtils.getTestValue(functionName: "setProtection", name: "name", type: "String")
        let paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtection", name: "dto", type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setProtection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setProtection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setProtection", name: "storage", type: "String")
        TestUtils.initialize("setProtection") { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidName() {
        let expectation = self.expectation(description: "testsetProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "setProtection", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtection", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setProtection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setProtection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setProtection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidDto() {
        let expectation = self.expectation(description: "testsetProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "setProtection", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtection", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setProtection", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "setProtection", name: "dto", value: paramDto as Any, type: "ProtectionProperties")
        TestUtils.initialize("setProtection", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidPassword() {
        let expectation = self.expectation(description: "testsetProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "setProtection", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtection", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setProtection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setProtection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setProtection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidFolder() {
        let expectation = self.expectation(description: "testsetProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "setProtection", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtection", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setProtection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setProtection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setProtection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionInvalidStorage() {
        let expectation = self.expectation(description: "testsetProtection")
        var paramName : String = TestUtils.getTestValue(functionName: "setProtection", name: "name", type: "String")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtection", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setProtection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setProtection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setProtection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setProtection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setProtection(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetProtectionOnline() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "document", type: "Data")
        let paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "dto", type: "ProtectionProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "password", type: "String")
        TestUtils.initialize("setProtectionOnline") { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "document", type: "Data")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "password", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "setProtectionOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("setProtectionOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtectionOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionOnlineInvalidDto() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "document", type: "Data")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "password", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "setProtectionOnline", name: "dto", value: paramDto as Any, type: "ProtectionProperties")
        TestUtils.initialize("setProtectionOnline", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtectionOnline", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetProtectionOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsetProtectionOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "document", type: "Data")
        var paramDto : ProtectionProperties = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "dto", type: "ProtectionProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setProtectionOnline", name: "password", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setProtectionOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setProtectionOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setProtectionOnline(paramDocument, paramDto, paramPassword) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setProtectionOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSections() {
        let expectation = self.expectation(description: "testsetSections")
        let paramName : String = TestUtils.getTestValue(functionName: "setSections", name: "name", type: "String")
        let paramSections : Sections = TestUtils.getTestValue(functionName: "setSections", name: "sections", type: "Sections")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSections", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSections", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSections", name: "storage", type: "String")
        TestUtils.initialize("setSections") { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidName() {
        let expectation = self.expectation(description: "testsetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "setSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "setSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSections", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setSections", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setSections", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidSections() {
        let expectation = self.expectation(description: "testsetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "setSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "setSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSections", name: "storage", type: "String")
        paramSections = TestUtils.getInvalidTestValue(functionName: "setSections", name: "sections", value: paramSections as Any, type: "Sections")
        TestUtils.initialize("setSections", "sections", paramSections) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "sections", parameterValue: paramSections as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidPassword() {
        let expectation = self.expectation(description: "testsetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "setSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "setSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSections", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setSections", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setSections", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidFolder() {
        let expectation = self.expectation(description: "testsetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "setSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "setSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSections", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setSections", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setSections", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSectionsInvalidStorage() {
        let expectation = self.expectation(description: "testsetSections")
        var paramName : String = TestUtils.getTestValue(functionName: "setSections", name: "name", type: "String")
        var paramSections : Sections = TestUtils.getTestValue(functionName: "setSections", name: "sections", type: "Sections")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSections", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSections", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSections", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setSections", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setSections", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSections(paramName, paramSections, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSections", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSlideHeaderFooter() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        let paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        let paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        TestUtils.initialize("setSlideHeaderFooter") { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidName() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setSlideHeaderFooter", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidSlideIndex() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("setSlideHeaderFooter", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidDto() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "setSlideHeaderFooter", name: "dto", value: paramDto as Any, type: "HeaderFooter")
        TestUtils.initialize("setSlideHeaderFooter", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidPassword() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setSlideHeaderFooter", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidFolder() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setSlideHeaderFooter", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlideHeaderFooterInvalidStorage() {
        let expectation = self.expectation(description: "testsetSlideHeaderFooter")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "slideIndex", type: "Int")
        var paramDto : HeaderFooter = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "dto", type: "HeaderFooter")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideHeaderFooter", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setSlideHeaderFooter", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setSlideHeaderFooter", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSlideHeaderFooter(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideHeaderFooter", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetSlideProperties() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "name", type: "String")
        let paramDto : SlideProperties = TestUtils.getTestValue(functionName: "setSlideProperties", name: "dto", type: "SlideProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "storage", type: "String")
        TestUtils.initialize("setSlideProperties") { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidName() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "setSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setSlideProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setSlideProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidDto() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "setSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "setSlideProperties", name: "dto", value: paramDto as Any, type: "SlideProperties")
        TestUtils.initialize("setSlideProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "setSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setSlideProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setSlideProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "setSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setSlideProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setSlideProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetSlidePropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testsetSlideProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "name", type: "String")
        var paramDto : SlideProperties = TestUtils.getTestValue(functionName: "setSlideProperties", name: "dto", type: "SlideProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setSlideProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setSlideProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setSlideProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setSlideProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setSlideProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSetViewProperties() {
        let expectation = self.expectation(description: "testsetViewProperties")
        let paramName : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "name", type: "String")
        let paramDto : ViewProperties = TestUtils.getTestValue(functionName: "setViewProperties", name: "dto", type: "ViewProperties")
        let paramPassword : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "storage", type: "String")
        TestUtils.initialize("setViewProperties") { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidName() {
        let expectation = self.expectation(description: "testsetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "setViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "setViewProperties", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("setViewProperties", "name", paramName) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidDto() {
        let expectation = self.expectation(description: "testsetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "setViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "setViewProperties", name: "dto", value: paramDto as Any, type: "ViewProperties")
        TestUtils.initialize("setViewProperties", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidPassword() {
        let expectation = self.expectation(description: "testsetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "setViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "setViewProperties", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("setViewProperties", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidFolder() {
        let expectation = self.expectation(description: "testsetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "setViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "setViewProperties", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("setViewProperties", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSetViewPropertiesInvalidStorage() {
        let expectation = self.expectation(description: "testsetViewProperties")
        var paramName : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "name", type: "String")
        var paramDto : ViewProperties = TestUtils.getTestValue(functionName: "setViewProperties", name: "dto", type: "ViewProperties")
        var paramPassword : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "setViewProperties", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "setViewProperties", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("setViewProperties", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.setViewProperties(paramName, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "setViewProperties", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSplit() {
        let expectation = self.expectation(description: "testsplit")
        let paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        let paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        let paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        let paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        TestUtils.initialize("split") { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidName() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "split", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("split", "name", paramName) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidOptions() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramOptions = TestUtils.getInvalidTestValue(functionName: "split", name: "options", value: paramOptions as Any, type: "ExportOptions")
        TestUtils.initialize("split", "options", paramOptions) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "options", parameterValue: paramOptions as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFormat() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "split", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("split", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidWidth() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "split", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("split", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidHeight() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "split", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("split", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFrom() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramFrom = TestUtils.getInvalidTestValue(functionName: "split", name: "from", value: paramFrom as Any, type: "Int")
        TestUtils.initialize("split", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidTo() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramTo = TestUtils.getInvalidTestValue(functionName: "split", name: "to", value: paramTo as Any, type: "Int")
        TestUtils.initialize("split", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidDestFolder() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramDestFolder = TestUtils.getInvalidTestValue(functionName: "split", name: "destFolder", value: paramDestFolder as Any, type: "String")
        TestUtils.initialize("split", "destFolder", paramDestFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "destFolder", parameterValue: paramDestFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidPassword() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "split", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("split", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFolder() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "split", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("split", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidStorage() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "split", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("split", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsplit")
        var paramName : String = TestUtils.getTestValue(functionName: "split", name: "name", type: "String")
        var paramOptions : ExportOptions = TestUtils.getTestValue(functionName: "split", name: "options", type: "ExportOptions")
        var paramFormat : String = TestUtils.getTestValue(functionName: "split", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "split", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "split", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "split", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "split", name: "to", type: "Int")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "split", name: "destFolder", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "split", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "split", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "split", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "split", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "split", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("split", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.split(paramName, paramOptions, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramDestFolder, paramPassword, paramFolder, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "split", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSplitAndSaveOnline() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        let paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("splitAndSaveOnline") { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("splitAndSaveOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidDestFolder() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramDestFolder = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "destFolder", value: paramDestFolder as Any, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "destFolder", paramDestFolder) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "destFolder", parameterValue: paramDestFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("splitAndSaveOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("splitAndSaveOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidFrom() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramFrom = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "from", value: paramFrom as Any, type: "Int")
        TestUtils.initialize("splitAndSaveOnline", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidTo() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramTo = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "to", value: paramTo as Any, type: "Int")
        TestUtils.initialize("splitAndSaveOnline", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitAndSaveOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsplitAndSaveOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "format", type: "String")
        var paramDestFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "destFolder", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "splitAndSaveOnline", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("splitAndSaveOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.splitAndSaveOnline(paramDocument, paramFormat, paramDestFolder, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitAndSaveOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testSplitOnline() {
        let expectation = self.expectation(description: "testsplitOnline")
        let paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        let paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        let paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        let paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        let paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        let paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        let paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        let paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        TestUtils.initialize("splitOnline") { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidDocument() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramDocument = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "document", value: paramDocument as Any, type: "Data")
        TestUtils.initialize("splitOnline", "document", paramDocument) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "document", parameterValue: paramDocument as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidFormat() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramFormat = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "format", value: paramFormat as Any, type: "String")
        TestUtils.initialize("splitOnline", "format", paramFormat) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "format", parameterValue: paramFormat as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidWidth() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramWidth = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "width", value: paramWidth as Any, type: "Int")
        TestUtils.initialize("splitOnline", "width", paramWidth) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "width", parameterValue: paramWidth as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidHeight() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramHeight = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "height", value: paramHeight as Any, type: "Int")
        TestUtils.initialize("splitOnline", "height", paramHeight) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "height", parameterValue: paramHeight as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidFrom() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramFrom = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "from", value: paramFrom as Any, type: "Int")
        TestUtils.initialize("splitOnline", "from", paramFrom) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "from", parameterValue: paramFrom as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidTo() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramTo = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "to", value: paramTo as Any, type: "Int")
        TestUtils.initialize("splitOnline", "to", paramTo) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "to", parameterValue: paramTo as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidPassword() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("splitOnline", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidStorage() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("splitOnline", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testSplitOnlineInvalidFontsFolder() {
        let expectation = self.expectation(description: "testsplitOnline")
        var paramDocument : Data = TestUtils.getTestValue(functionName: "splitOnline", name: "document", type: "Data")
        var paramFormat : String = TestUtils.getTestValue(functionName: "splitOnline", name: "format", type: "String")
        var paramWidth : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "width", type: "Int")
        var paramHeight : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "height", type: "Int")
        var paramFrom : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "from", type: "Int")
        var paramTo : Int = TestUtils.getTestValue(functionName: "splitOnline", name: "to", type: "Int")
        var paramPassword : String = TestUtils.getTestValue(functionName: "splitOnline", name: "password", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "splitOnline", name: "storage", type: "String")
        var paramFontsFolder : String = TestUtils.getTestValue(functionName: "splitOnline", name: "fontsFolder", type: "String")
        paramFontsFolder = TestUtils.getInvalidTestValue(functionName: "splitOnline", name: "fontsFolder", value: paramFontsFolder as Any, type: "String")
        TestUtils.initialize("splitOnline", "fontsFolder", paramFontsFolder) { (response, error) -> Void in
            SlidesAPI.splitOnline(paramDocument, paramFormat, paramWidth, paramHeight, paramFrom, paramTo, paramPassword, paramStorage, paramFontsFolder) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "splitOnline", parameterName: "fontsFolder", parameterValue: paramFontsFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testStorageExists() {
        let expectation = self.expectation(description: "teststorageExists")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String")
        TestUtils.initialize("storageExists") { (response, error) -> Void in
            SlidesAPI.storageExists(paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testStorageExistsInvalidStorageName() {
        let expectation = self.expectation(description: "teststorageExists")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "storageExists", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "storageExists", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("storageExists", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.storageExists(paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "storageExists", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateAnimationEffect() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        TestUtils.initialize("updateAnimationEffect") { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidName() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateAnimationEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateAnimationEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateAnimationEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateAnimationEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "updateAnimationEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("updateAnimationEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidEffect() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "updateAnimationEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("updateAnimationEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidPassword() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateAnimationEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateAnimationEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidFolder() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateAnimationEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateAnimationEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationEffectInvalidStorage() {
        let expectation = self.expectation(description: "testupdateAnimationEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "slideIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateAnimationEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateAnimationEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateAnimationEffect(paramName, paramSlideIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateAnimationInteractiveSequenceEffect() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        let paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        let paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        let paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        let paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect") { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidName() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidSequenceIndex() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramSequenceIndex = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", value: paramSequenceIndex as Any, type: "Int")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", paramSequenceIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "sequenceIndex", parameterValue: paramSequenceIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidEffectIndex() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffectIndex = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", value: paramEffectIndex as Any, type: "Int")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", paramEffectIndex) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "effectIndex", parameterValue: paramEffectIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidEffect() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramEffect = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", value: paramEffect as Any, type: "Effect")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "effect", paramEffect) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "effect", parameterValue: paramEffect as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidPassword() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidFolder() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateAnimationInteractiveSequenceEffectInvalidStorage() {
        let expectation = self.expectation(description: "testupdateAnimationInteractiveSequenceEffect")
        var paramName : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "slideIndex", type: "Int")
        var paramSequenceIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "sequenceIndex", type: "Int")
        var paramEffectIndex : Int = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effectIndex", type: "Int")
        var paramEffect : Effect = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "effect", type: "Effect")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateAnimationInteractiveSequenceEffect", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateAnimationInteractiveSequenceEffect", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateAnimationInteractiveSequenceEffect(paramName, paramSlideIndex, paramSequenceIndex, paramEffectIndex, paramEffect, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateAnimationInteractiveSequenceEffect", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateChartCategory() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        let paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        let paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        let paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        TestUtils.initialize("updateChartCategory") { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidName() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateChartCategory", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateChartCategory", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateChartCategory", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidCategoryIndex() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramCategoryIndex = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "categoryIndex", value: paramCategoryIndex as Any, type: "Int")
        TestUtils.initialize("updateChartCategory", "categoryIndex", paramCategoryIndex) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "categoryIndex", parameterValue: paramCategoryIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidCategory() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramCategory = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "category", value: paramCategory as Any, type: "ChartCategory")
        TestUtils.initialize("updateChartCategory", "category", paramCategory) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "category", parameterValue: paramCategory as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidPassword() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateChartCategory", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidFolder() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateChartCategory", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartCategoryInvalidStorage() {
        let expectation = self.expectation(description: "testupdateChartCategory")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "shapeIndex", type: "Int")
        var paramCategoryIndex : Int = TestUtils.getTestValue(functionName: "updateChartCategory", name: "categoryIndex", type: "Int")
        var paramCategory : ChartCategory = TestUtils.getTestValue(functionName: "updateChartCategory", name: "category", type: "ChartCategory")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartCategory", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateChartCategory", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateChartCategory", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartCategory(paramName, paramSlideIndex, paramShapeIndex, paramCategoryIndex, paramCategory, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartCategory", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateChartDataPoint() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        let paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        let paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        let paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        TestUtils.initialize("updateChartDataPoint") { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidName() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateChartDataPoint", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateChartDataPoint", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateChartDataPoint", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("updateChartDataPoint", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidPointIndex() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramPointIndex = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "pointIndex", value: paramPointIndex as Any, type: "Int")
        TestUtils.initialize("updateChartDataPoint", "pointIndex", paramPointIndex) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "pointIndex", parameterValue: paramPointIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidDataPoint() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramDataPoint = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "dataPoint", value: paramDataPoint as Any, type: "DataPoint")
        TestUtils.initialize("updateChartDataPoint", "dataPoint", paramDataPoint) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "dataPoint", parameterValue: paramDataPoint as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidPassword() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateChartDataPoint", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidFolder() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateChartDataPoint", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartDataPointInvalidStorage() {
        let expectation = self.expectation(description: "testupdateChartDataPoint")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "seriesIndex", type: "Int")
        var paramPointIndex : Int = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "pointIndex", type: "Int")
        var paramDataPoint : DataPoint = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "dataPoint", type: "DataPoint")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartDataPoint", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateChartDataPoint", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateChartDataPoint", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartDataPoint(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramPointIndex, paramDataPoint, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartDataPoint", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateChartSeries() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        let paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        let paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        let paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        TestUtils.initialize("updateChartSeries") { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidName() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateChartSeries", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateChartSeries", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateChartSeries", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidSeriesIndex() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramSeriesIndex = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "seriesIndex", value: paramSeriesIndex as Any, type: "Int")
        TestUtils.initialize("updateChartSeries", "seriesIndex", paramSeriesIndex) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "seriesIndex", parameterValue: paramSeriesIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidSeries() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramSeries = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "series", value: paramSeries as Any, type: "Series")
        TestUtils.initialize("updateChartSeries", "series", paramSeries) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "series", parameterValue: paramSeries as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidPassword() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateChartSeries", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidFolder() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateChartSeries", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateChartSeriesInvalidStorage() {
        let expectation = self.expectation(description: "testupdateChartSeries")
        var paramName : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "shapeIndex", type: "Int")
        var paramSeriesIndex : Int = TestUtils.getTestValue(functionName: "updateChartSeries", name: "seriesIndex", type: "Int")
        var paramSeries : Series = TestUtils.getTestValue(functionName: "updateChartSeries", name: "series", type: "Series")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateChartSeries", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateChartSeries", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateChartSeries", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateChartSeries(paramName, paramSlideIndex, paramShapeIndex, paramSeriesIndex, paramSeries, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateChartSeries", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateLayoutSlide() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        let paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        TestUtils.initialize("updateLayoutSlide") { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidName() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateLayoutSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateLayoutSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateLayoutSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateLayoutSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        paramSlideDto = TestUtils.getInvalidTestValue(functionName: "updateLayoutSlide", name: "slideDto", value: paramSlideDto as Any, type: "LayoutSlide")
        TestUtils.initialize("updateLayoutSlide", "slideDto", paramSlideDto) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "slideDto", parameterValue: paramSlideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidPassword() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateLayoutSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateLayoutSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidFolder() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateLayoutSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateLayoutSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateLayoutSlideInvalidStorage() {
        let expectation = self.expectation(description: "testupdateLayoutSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : LayoutSlide = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "slideDto", type: "LayoutSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateLayoutSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateLayoutSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateLayoutSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateLayoutSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateLayoutSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateNotesSlide() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        let paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        TestUtils.initialize("updateNotesSlide") { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidName() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateNotesSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateNotesSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidDto() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateNotesSlide", name: "dto", value: paramDto as Any, type: "NotesSlide")
        TestUtils.initialize("updateNotesSlide", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidPassword() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateNotesSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateNotesSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidFolder() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateNotesSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateNotesSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideInvalidStorage() {
        let expectation = self.expectation(description: "testupdateNotesSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "slideIndex", type: "Int")
        var paramDto : NotesSlide = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "dto", type: "NotesSlide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateNotesSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateNotesSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlide(paramName, paramSlideIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateNotesSlideParagraph() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        TestUtils.initialize("updateNotesSlideParagraph") { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidName() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateNotesSlideParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlideParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlideParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlideParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidDto() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("updateNotesSlideParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateNotesSlideParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateNotesSlideParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testupdateNotesSlideParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateNotesSlideParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateNotesSlidePortion() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        TestUtils.initialize("updateNotesSlidePortion") { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidName() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateNotesSlidePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlidePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlidePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlidePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlidePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidDto() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("updateNotesSlidePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidPassword() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateNotesSlidePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidFolder() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateNotesSlidePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlidePortionInvalidStorage() {
        let expectation = self.expectation(description: "testupdateNotesSlidePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlidePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateNotesSlidePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateNotesSlidePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlidePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlidePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateNotesSlideShape() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        let paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        TestUtils.initialize("updateNotesSlideShape") { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideShapeInvalidName() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateNotesSlideShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlideShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateNotesSlideShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideShapeInvalidDto() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideShape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("updateNotesSlideShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideShapeInvalidPassword() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateNotesSlideShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideShapeInvalidFolder() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateNotesSlideShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateNotesSlideShapeInvalidStorage() {
        let expectation = self.expectation(description: "testupdateNotesSlideShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateNotesSlideShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateNotesSlideShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateNotesSlideShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateNotesSlideShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateNotesSlideShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateParagraph() {
        let expectation = self.expectation(description: "testupdateParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        TestUtils.initialize("updateParagraph") { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidName() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("updateParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidDto() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("updateParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testupdateParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateParagraph(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdatePortion() {
        let expectation = self.expectation(description: "testupdatePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        TestUtils.initialize("updatePortion") { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidName() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updatePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updatePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updatePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("updatePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("updatePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidDto() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("updatePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidPassword() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updatePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidFolder() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updatePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdatePortionInvalidStorage() {
        let expectation = self.expectation(description: "testupdatePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updatePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updatePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updatePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updatePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updatePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updatePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updatePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updatePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updatePortion(paramName, paramSlideIndex, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updatePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSection() {
        let expectation = self.expectation(description: "testupdateSection")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        let paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        let paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        TestUtils.initialize("updateSection") { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidName() {
        let expectation = self.expectation(description: "testupdateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateSection", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateSection", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidSectionIndex() {
        let expectation = self.expectation(description: "testupdateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        paramSectionIndex = TestUtils.getInvalidTestValue(functionName: "updateSection", name: "sectionIndex", value: paramSectionIndex as Any, type: "Int")
        TestUtils.initialize("updateSection", "sectionIndex", paramSectionIndex) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "sectionIndex", parameterValue: paramSectionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidSectionName() {
        let expectation = self.expectation(description: "testupdateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        paramSectionName = TestUtils.getInvalidTestValue(functionName: "updateSection", name: "sectionName", value: paramSectionName as Any, type: "String")
        TestUtils.initialize("updateSection", "sectionName", paramSectionName) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "sectionName", parameterValue: paramSectionName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateSection", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateSection", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateSection", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateSection", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSectionInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSection")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSection", name: "name", type: "String")
        var paramSectionIndex : Int = TestUtils.getTestValue(functionName: "updateSection", name: "sectionIndex", type: "Int")
        var paramSectionName : String = TestUtils.getTestValue(functionName: "updateSection", name: "sectionName", type: "String")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSection", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSection", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSection", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateSection", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateSection", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSection(paramName, paramSectionIndex, paramSectionName, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSection", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateShape() {
        let expectation = self.expectation(description: "testupdateShape")
        let paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        TestUtils.initialize("updateShape") { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidName() {
        let expectation = self.expectation(description: "testupdateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateShape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateShape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateShape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateShape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateShape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateShape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidDto() {
        let expectation = self.expectation(description: "testupdateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateShape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("updateShape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidPassword() {
        let expectation = self.expectation(description: "testupdateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateShape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateShape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidFolder() {
        let expectation = self.expectation(description: "testupdateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateShape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateShape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateShapeInvalidStorage() {
        let expectation = self.expectation(description: "testupdateShape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateShape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "slideIndex", type: "Int")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateShape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateShape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateShape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateShape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateShape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateShape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateShape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateShape(paramName, paramSlideIndex, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateShape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSlide() {
        let expectation = self.expectation(description: "testupdateSlide")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        let paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        TestUtils.initialize("updateSlide") { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidName() {
        let expectation = self.expectation(description: "testupdateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateSlide", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateSlide", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateSlide", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateSlide", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidSlideDto() {
        let expectation = self.expectation(description: "testupdateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        paramSlideDto = TestUtils.getInvalidTestValue(functionName: "updateSlide", name: "slideDto", value: paramSlideDto as Any, type: "Slide")
        TestUtils.initialize("updateSlide", "slideDto", paramSlideDto) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "slideDto", parameterValue: paramSlideDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateSlide", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateSlide", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateSlide", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateSlide", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSlideInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSlide")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSlide", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSlide", name: "slideIndex", type: "Int")
        var paramSlideDto : Slide = TestUtils.getTestValue(functionName: "updateSlide", name: "slideDto", type: "Slide")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSlide", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSlide", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSlide", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateSlide", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateSlide", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSlide(paramName, paramSlideIndex, paramSlideDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSlide", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSubshape() {
        let expectation = self.expectation(description: "testupdateSubshape")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        let paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        TestUtils.initialize("updateSubshape") { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidName() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateSubshape", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshape", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidPath() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("updateSubshape", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshape", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidDto() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "dto", value: paramDto as Any, type: "ShapeBase")
        TestUtils.initialize("updateSubshape", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateSubshape", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateSubshape", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSubshape")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshape", name: "shapeIndex", type: "Int")
        var paramDto : ShapeBase = TestUtils.getTestValue(functionName: "updateSubshape", name: "dto", type: "ShapeBase")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshape", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateSubshape", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateSubshape", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSubshape(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshape", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSubshapeParagraph() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        let paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        TestUtils.initialize("updateSubshapeParagraph") { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidName() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateSubshapeParagraph", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshapeParagraph", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidPath() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("updateSubshapeParagraph", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshapeParagraph", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshapeParagraph", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidDto() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "dto", value: paramDto as Any, type: "Paragraph")
        TestUtils.initialize("updateSubshapeParagraph", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateSubshapeParagraph", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateSubshapeParagraph", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapeParagraphInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSubshapeParagraph")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "paragraphIndex", type: "Int")
        var paramDto : Paragraph = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "dto", type: "Paragraph")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapeParagraph", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateSubshapeParagraph", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateSubshapeParagraph", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSubshapeParagraph(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapeParagraph", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUpdateSubshapePortion() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        let paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        let paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        let paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        let paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        let paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        let paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        let paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        let paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        let paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        let paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        TestUtils.initialize("updateSubshapePortion") { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidName() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramName = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "name", value: paramName as Any, type: "String")
        TestUtils.initialize("updateSubshapePortion", "name", paramName) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "name", parameterValue: paramName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidSlideIndex() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramSlideIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "slideIndex", value: paramSlideIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshapePortion", "slideIndex", paramSlideIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "slideIndex", parameterValue: paramSlideIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidPath() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("updateSubshapePortion", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidShapeIndex() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramShapeIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", value: paramShapeIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshapePortion", "shapeIndex", paramShapeIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "shapeIndex", parameterValue: paramShapeIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidParagraphIndex() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramParagraphIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", value: paramParagraphIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshapePortion", "paragraphIndex", paramParagraphIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "paragraphIndex", parameterValue: paramParagraphIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidPortionIndex() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramPortionIndex = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "portionIndex", value: paramPortionIndex as Any, type: "Int")
        TestUtils.initialize("updateSubshapePortion", "portionIndex", paramPortionIndex) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "portionIndex", parameterValue: paramPortionIndex as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidDto() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramDto = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "dto", value: paramDto as Any, type: "Portion")
        TestUtils.initialize("updateSubshapePortion", "dto", paramDto) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "dto", parameterValue: paramDto as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidPassword() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramPassword = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "password", value: paramPassword as Any, type: "String")
        TestUtils.initialize("updateSubshapePortion", "password", paramPassword) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "password", parameterValue: paramPassword as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidFolder() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramFolder = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "folder", value: paramFolder as Any, type: "String")
        TestUtils.initialize("updateSubshapePortion", "folder", paramFolder) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "folder", parameterValue: paramFolder as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUpdateSubshapePortionInvalidStorage() {
        let expectation = self.expectation(description: "testupdateSubshapePortion")
        var paramName : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "name", type: "String")
        var paramSlideIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "slideIndex", type: "Int")
        var paramPath : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "path", type: "String")
        var paramShapeIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "shapeIndex", type: "Int")
        var paramParagraphIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "paragraphIndex", type: "Int")
        var paramPortionIndex : Int = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "portionIndex", type: "Int")
        var paramDto : Portion = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "dto", type: "Portion")
        var paramPassword : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "password", type: "String")
        var paramFolder : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "folder", type: "String")
        var paramStorage : String = TestUtils.getTestValue(functionName: "updateSubshapePortion", name: "storage", type: "String")
        paramStorage = TestUtils.getInvalidTestValue(functionName: "updateSubshapePortion", name: "storage", value: paramStorage as Any, type: "String")
        TestUtils.initialize("updateSubshapePortion", "storage", paramStorage) { (response, error) -> Void in
            SlidesAPI.updateSubshapePortion(paramName, paramSlideIndex, paramPath, paramShapeIndex, paramParagraphIndex, paramPortionIndex, paramDto, paramPassword, paramFolder, paramStorage) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "updateSubshapePortion", parameterName: "storage", parameterValue: paramStorage as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
    func testUploadFile() {
        let expectation = self.expectation(description: "testuploadFile")
        let paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        let paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        let paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        TestUtils.initialize("uploadFile") { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                XCTAssertNotNil(response)
                XCTAssertNil(error)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidPath() {
        let expectation = self.expectation(description: "testuploadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        var paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        paramPath = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "path", value: paramPath as Any, type: "String")
        TestUtils.initialize("uploadFile", "path", paramPath) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "path", parameterValue: paramPath as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidFile() {
        let expectation = self.expectation(description: "testuploadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        var paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        paramFile = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "file", value: paramFile as Any, type: "Data")
        TestUtils.initialize("uploadFile", "file", paramFile) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "file", parameterValue: paramFile as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }

    func testUploadFileInvalidStorageName() {
        let expectation = self.expectation(description: "testuploadFile")
        var paramPath : String = TestUtils.getTestValue(functionName: "uploadFile", name: "path", type: "String")
        var paramFile : Data = TestUtils.getTestValue(functionName: "uploadFile", name: "file", type: "Data")
        var paramStorageName : String = TestUtils.getTestValue(functionName: "uploadFile", name: "storageName", type: "String")
        paramStorageName = TestUtils.getInvalidTestValue(functionName: "uploadFile", name: "storageName", value: paramStorageName as Any, type: "String")
        TestUtils.initialize("uploadFile", "storageName", paramStorageName) { (response, error) -> Void in
            SlidesAPI.uploadFile(paramPath, paramFile, paramStorageName) { (response, error) -> Void in
                TestUtils.assertError(error: error, functionName: "uploadFile", parameterName: "storageName", parameterValue: paramStorageName as Any)
                expectation.fulfill()
            }
        }
        self.waitForExpectations(timeout: testTimeout, handler: nil)
    }
}
